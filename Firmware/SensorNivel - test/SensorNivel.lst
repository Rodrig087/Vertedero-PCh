;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 16/5/2022 16:47:34
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x000000040A26  	GOTO	_main
0x0004	0x000000  	0
0x0006	0x000000  	0
0x0008	0x000000  	0
0x000A	0x000000  	0
0x000C	0x000000  	0
0x000E	0x000000  	0
0x0010	0x000000  	0
0x0012	0x000000  	0
0x0014	0x000000  	0
0x0016	0x000000  	0
0x0018	0x000000  	0
0x001A	0x00098A  	2442
0x001C	0x000000  	0
0x001E	0x000000  	0
0x0020	0x000000  	0
0x0022	0x000944  	2372
0x0024	0x0009D2  	2514
0x0026	0x000000  	0
0x0028	0x000000  	0
0x002A	0x000AC6  	2758
0x002C	0x000000  	0
0x002E	0x000000  	0
0x0030	0x000000  	0
0x0032	0x000000  	0
0x0034	0x000000  	0
0x0036	0x000000  	0
0x0038	0x000000  	0
0x003A	0x000000  	0
0x003C	0x000000  	0
0x003E	0x000000  	0
0x0040	0x000000  	0
0x0042	0x000000  	0
0x0044	0x000000  	0
0x0046	0x000000  	0
0x0048	0x000000  	0
0x004A	0x000000  	0
0x004C	0x000000  	0
0x004E	0x000000  	0
0x0050	0x000000  	0
0x0052	0x000000  	0
0x0054	0x000000  	0
0x0056	0x000000  	0
0x0058	0x000000  	0
0x005A	0x000000  	0
0x005C	0x000000  	0
0x005E	0x000000  	0
0x0060	0x000000  	0
0x0062	0x000000  	0
0x0064	0x000000  	0
0x0066	0x000000  	0
0x0068	0x000000  	0
0x006A	0x000000  	0
0x006C	0x000000  	0
0x006E	0x000000  	0
0x0070	0x000000  	0
0x0072	0x000000  	0
0x0074	0x000000  	0
0x0076	0x000000  	0
0x0078	0x000000  	0
0x007A	0x000000  	0
0x007C	0x000000  	0
0x007E	0x000000  	0
0x0080	0x000000  	0
0x0082	0x000000  	0
0x0084	0x000000  	0
0x0086	0x000000  	0
0x0088	0x000000  	0
0x008A	0x000000  	0
0x008C	0x000000  	0
0x008E	0x000000  	0
0x0090	0x000000  	0
0x0092	0x000000  	0
0x0094	0x000000  	0
0x0096	0x000000  	0
0x0098	0x000000  	0
0x009A	0x000000  	0
0x009C	0x000000  	0
0x009E	0x000000  	0
0x00A0	0x000000  	0
0x00A2	0x000000  	0
0x00A4	0x000000  	0
0x00A6	0x000000  	0
0x00A8	0x000000  	0
0x00AA	0x000000  	0
0x00AC	0x000000  	0
0x00AE	0x000000  	0
0x00B0	0x000000  	0
0x00B2	0x000000  	0
0x00B4	0x000000  	0
0x00B6	0x000000  	0
0x00B8	0x000000  	0
0x00BA	0x000000  	0
0x00BC	0x000000  	0
0x00BE	0x000000  	0
0x00C0	0x000000  	0
0x00C2	0x000000  	0
0x00C4	0x000000  	0
0x00C6	0x000000  	0
0x00C8	0x000000  	0
0x00CA	0x000000  	0
0x00CC	0x000000  	0
0x00CE	0x000000  	0
0x00D0	0x000000  	0
0x00D2	0x000000  	0
0x00D4	0x000000  	0
0x00D6	0x000000  	0
0x00D8	0x000000  	0
0x00DA	0x000000  	0
0x00DC	0x000000  	0
0x00DE	0x000000  	0
0x00E0	0x000000  	0
0x00E2	0x000000  	0
0x00E4	0x000000  	0
0x00E6	0x000000  	0
0x00E8	0x000000  	0
0x00EA	0x000000  	0
0x00EC	0x000000  	0
0x00EE	0x000000  	0
0x00F0	0x000000  	0
0x00F2	0x000000  	0
0x00F4	0x000000  	0
0x00F6	0x000000  	0
0x00F8	0x000000  	0
0x00FA	0x000000  	0
0x00FC	0x000000  	0
0x00FE	0x000000  	0
0x0100	0x000000  	0
0x0102	0x000000  	0
0x0104	0x000000  	0
0x0106	0x000000  	0
0x0108	0x000000  	0
0x010A	0x000000  	0
0x010C	0x000000  	0
0x010E	0x000000  	0
0x0110	0x000000  	0
0x0112	0x000000  	0
0x0114	0x000000  	0
0x0116	0x000000  	0
0x0118	0x000000  	0
0x011A	0x000000  	0
0x011C	0x000000  	0
0x011E	0x000000  	0
0x0120	0x000000  	0
0x0122	0x000000  	0
0x0124	0x000000  	0
0x0126	0x000000  	0
0x0128	0x000000  	0
0x012A	0x000000  	0
0x012C	0x000000  	0
0x012E	0x000000  	0
0x0130	0x000000  	0
0x0132	0x000000  	0
0x0134	0x000000  	0
0x0136	0x000000  	0
0x0138	0x000000  	0
0x013A	0x000000  	0
0x013C	0x000000  	0
0x013E	0x000000  	0
0x0140	0x000000  	0
0x0142	0x000000  	0
0x0144	0x000000  	0
0x0146	0x000000  	0
0x0148	0x000000  	0
0x014A	0x000000  	0
0x014C	0x000000  	0
0x014E	0x000000  	0
0x0150	0x000000  	0
0x0152	0x000000  	0
0x0154	0x000000  	0
0x0156	0x000000  	0
0x0158	0x000000  	0
0x015A	0x000000  	0
0x015C	0x000000  	0
0x015E	0x000000  	0
0x0160	0x000000  	0
0x0162	0x000000  	0
0x0164	0x000000  	0
0x0166	0x000000  	0
0x0168	0x000000  	0
0x016A	0x000000  	0
0x016C	0x000000  	0
0x016E	0x000000  	0
0x0170	0x000000  	0
0x0172	0x000000  	0
0x0174	0x000000  	0
0x0176	0x000000  	0
0x0178	0x000000  	0
0x017A	0x000000  	0
0x017C	0x000000  	0
0x017E	0x000000  	0
0x0180	0x000000  	0
0x0182	0x000000  	0
0x0184	0x000000  	0
0x0186	0x000000  	0
0x0188	0x000000  	0
0x018A	0x000000  	0
0x018C	0x000000  	0
0x018E	0x000000  	0
0x0190	0x000000  	0
0x0192	0x000000  	0
0x0194	0x000000  	0
0x0196	0x000000  	0
0x0198	0x000000  	0
0x019A	0x000000  	0
0x019C	0x000000  	0
0x019E	0x000000  	0
0x01A0	0x000000  	0
0x01A2	0x000000  	0
0x01A4	0x000000  	0
0x01A6	0x000000  	0
0x01A8	0x000000  	0
0x01AA	0x000000  	0
0x01AC	0x000000  	0
0x01AE	0x000000  	0
0x01B0	0x000000  	0
0x01B2	0x000000  	0
0x01B4	0x000000  	0
0x01B6	0x000000  	0
0x01B8	0x000000  	0
0x01BA	0x000000  	0
0x01BC	0x000000  	0
0x01BE	0x000000  	0
0x01C0	0x000000  	0
0x01C2	0x000000  	0
0x01C4	0x000000  	0
0x01C6	0x000000  	0
0x01C8	0x000000  	0
0x01CA	0x000000  	0
0x01CC	0x000000  	0
0x01CE	0x000000  	0
0x01D0	0x000000  	0
0x01D2	0x000000  	0
0x01D4	0x000000  	0
0x01D6	0x000000  	0
0x01D8	0x000000  	0
0x01DA	0x000000  	0
0x01DC	0x000000  	0
0x01DE	0x000000  	0
0x01E0	0x000000  	0
0x01E2	0x000000  	0
0x01E4	0x000000  	0
0x01E6	0x000000  	0
0x01E8	0x000000  	0
0x01EA	0x000000  	0
0x01EC	0x000000  	0
0x01EE	0x000000  	0
0x01F0	0x000000  	0
0x01F2	0x000000  	0
0x01F4	0x000000  	0
0x01F6	0x000000  	0
0x01F8	0x000000  	0
0x01FA	0x000000  	0
0x01FC	0x000000  	0
0x01FE	0x000000  	0
_main:
0x0A26	0x20B16F  	MOV	#2838, W15
0x0A28	0x20FFF0  	MOV	#4095, W0
0x0A2A	0xB7A020  	MOV	WREG, SPLIM
0x0A2C	0x200000  	MOV	#0, W0
0x0A2E	0xB7A034  	MOV	WREG, PSVPAG
0x0A30	0x200040  	MOV	#4, W0
0x0A32	0xB72044  	IOR	CORCON
0x0A34	0x000000020BD8  	CALL	3032
;SensorNivel.c,129 :: 		void main() {
;SensorNivel.c,132 :: 		ConfiguracionPrincipal();
0x0A38	0x781F8A  	PUSH	W10
0x0A3A	0x781F8B  	PUSH	W11
0x0A3C	0x07FEDC  	RCALL	_ConfiguracionPrincipal
;SensorNivel.c,136 :: 		i = 0;
0x0A3E	0xEF2000  	CLR	W0
0x0A40	0x8858A0  	MOV	W0, _i
;SensorNivel.c,137 :: 		j = 0;
0x0A42	0xEF2000  	CLR	W0
0x0A44	0x8842A0  	MOV	W0, _j
;SensorNivel.c,138 :: 		x = 0;
0x0A46	0xEF2000  	CLR	W0
0x0A48	0x884080  	MOV	W0, _x
;SensorNivel.c,139 :: 		y = 0;
0x0A4A	0xEF2000  	CLR	W0
0x0A4C	0x884090  	MOV	W0, _y
;SensorNivel.c,142 :: 		T2 = 0;
0x0A4E	0xEF2000  	CLR	W0
0x0A50	0xEF2002  	CLR	W1
0x0A52	0x884060  	MOV	W0, _T2
0x0A54	0x884071  	MOV	W1, _T2+2
;SensorNivel.c,143 :: 		bm = 0;
0x0A56	0x2083D1  	MOV	#lo_addr(_bm), W1
0x0A58	0xEF2000  	CLR	W0
0x0A5A	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,144 :: 		TOF = 0;
0x0A5C	0xEF2000  	CLR	W0
0x0A5E	0xEF2002  	CLR	W1
0x0A60	0x884200  	MOV	W0, _TOF
0x0A62	0x884211  	MOV	W1, _TOF+2
;SensorNivel.c,145 :: 		temperaturaRaw = 0;
0x0A64	0xEF2000  	CLR	W0
0x0A66	0x8841F0  	MOV	W0, _temperaturaRaw
;SensorNivel.c,147 :: 		banRSI = 0;
0x0A68	0x2080A1  	MOV	#lo_addr(_banRSI), W1
0x0A6A	0xEF2000  	CLR	W0
0x0A6C	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,148 :: 		banRSC = 0;
0x0A6E	0x2080B1  	MOV	#lo_addr(_banRSC), W1
0x0A70	0xEF2000  	CLR	W0
0x0A72	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,149 :: 		byteRS485 = 0;
0x0A74	0x208181  	MOV	#lo_addr(_byteRS485), W1
0x0A76	0xEF2000  	CLR	W0
0x0A78	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,150 :: 		i_rs485 = 0;
0x0A7A	0xEF2000  	CLR	W0
0x0A7C	0x8840D0  	MOV	W0, _i_rs485
;SensorNivel.c,151 :: 		funcionRS485 = 0;
0x0A7E	0x208151  	MOV	#lo_addr(_funcionRS485), W1
0x0A80	0xEF2000  	CLR	W0
0x0A82	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,152 :: 		subFuncionRS485 = 0;
0x0A84	0x208141  	MOV	#lo_addr(_subFuncionRS485), W1
0x0A86	0xEF2000  	CLR	W0
0x0A88	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,153 :: 		numDatosRS485 = 0;
0x0A8A	0xEF2000  	CLR	W0
0x0A8C	0x8840B0  	MOV	W0, _numDatosRS485
;SensorNivel.c,154 :: 		ptrNumDatosRS485 = (unsigned char *) & numDatosRS485;
0x0A8E	0x208160  	MOV	#lo_addr(_numDatosRS485), W0
0x0A90	0x884120  	MOV	W0, _ptrNumDatosRS485
;SensorNivel.c,155 :: 		MSRS485 = 0;
0x0A92	0xA9A2CC  	BCLR	LATB5_bit, BitPos(LATB5_bit+0)
;SensorNivel.c,156 :: 		contTMR3 = 0;
0x0A94	0x208221  	MOV	#lo_addr(_contTMR3), W1
0x0A96	0xEF2000  	CLR	W0
0x0A98	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,157 :: 		contPulsosTMR3 = 0;
0x0A9A	0x208191  	MOV	#lo_addr(_contPulsosTMR3), W1
0x0A9C	0xEF2000  	CLR	W0
0x0A9E	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,160 :: 		banderaPeticion = 0;
0x0AA0	0x208351  	MOV	#lo_addr(_banderaPeticion), W1
0x0AA2	0xEF2000  	CLR	W0
0x0AA4	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,163 :: 		LED1 = 1;
0x0AA6	0xA882C4  	BSET	LATA4_bit, BitPos(LATA4_bit+0)
;SensorNivel.c,164 :: 		LED2 = 0;
0x0AA8	0xA982CC  	BCLR	LATB4_bit, BitPos(LATB4_bit+0)
;SensorNivel.c,166 :: 		ip=0;
0x0AAA	0x208231  	MOV	#lo_addr(_ip), W1
0x0AAC	0xEF2000  	CLR	W0
0x0AAE	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,169 :: 		while(1){
L_main6:
;SensorNivel.c,171 :: 		if (banderaPeticion==1){
0x0AB0	0x208350  	MOV	#lo_addr(_banderaPeticion), W0
0x0AB2	0x784010  	MOV.B	[W0], W0
0x0AB4	0xE10461  	CP.B	W0, #1
0x0AB6	0x3A0003  	BRA NZ	L_main8
L__main100:
;SensorNivel.c,173 :: 		ProcesarSolicitud(solicitudCabeceraRS485, solicitudPyloadRS485);
0x0AB8	0x20826B  	MOV	#lo_addr(_solicitudPyloadRS485), W11
0x0ABA	0x20838A  	MOV	#lo_addr(_solicitudCabeceraRS485), W10
0x0ABC	0x07FE0D  	RCALL	_ProcesarSolicitud
;SensorNivel.c,175 :: 		}
L_main8:
;SensorNivel.c,182 :: 		}
0x0ABE	0x37FFF8  	BRA	L_main6
;SensorNivel.c,185 :: 		}
L_end_main:
0x0AC0	0x7805CF  	POP	W11
0x0AC2	0x78054F  	POP	W10
L__main_end_loop:
0x0AC4	0x37FFFF  	BRA	L__main_end_loop
; end of _main
_ConfiguracionPrincipal:
;SensorNivel.c,193 :: 		void ConfiguracionPrincipal(){
;SensorNivel.c,196 :: 		CLKDIVbits.PLLPRE = 0;                                                     //PLLPRE<4:0> = 0  ->  N1 = 2    8MHz / 2 = 4MHz
0x07F6	0x781F8A  	PUSH	W10
0x07F8	0x781F8B  	PUSH	W11
0x07FA	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x07FC	0x784090  	MOV.B	[W0], W1
0x07FE	0xB3CE00  	MOV.B	#224, W0
0x0800	0x60C080  	AND.B	W1, W0, W1
0x0802	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x0804	0x784801  	MOV.B	W1, [W0]
;SensorNivel.c,197 :: 		PLLFBD = 38;                                                               //PLLDIV<8:0> = 38 ->  M = 40    4MHz * 40 = 160MHz
0x0806	0x200260  	MOV	#38, W0
0x0808	0xB7A746  	MOV	WREG, PLLFBD
;SensorNivel.c,198 :: 		CLKDIVbits.PLLPOST = 0;                                                    //PLLPOST<1:0> = 0 ->  N2 = 2    160MHz / 2 = 80MHz
0x080A	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x080C	0x784090  	MOV.B	[W0], W1
0x080E	0xB3C3F0  	MOV.B	#63, W0
0x0810	0x60C080  	AND.B	W1, W0, W1
0x0812	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x0814	0x784801  	MOV.B	W1, [W0]
;SensorNivel.c,201 :: 		AD1PCFGL = 0xFFFD;                                                         //Configura el puerto AN1 como entrada analogica y todas las demas como digitales
0x0816	0x2FFFD0  	MOV	#65533, W0
0x0818	0xB7A32C  	MOV	WREG, AD1PCFGL
;SensorNivel.c,202 :: 		TRISA1_bit = 1;                                                            //Establece el pin RA1 como entrada
0x081A	0xA822C0  	BSET	TRISA1_bit, BitPos(TRISA1_bit+0)
;SensorNivel.c,203 :: 		TRISB = 0xFF40;                                                            //TRISB = 11111111 01000000
0x081C	0x2FF400  	MOV	#65344, W0
0x081E	0xB7A2C8  	MOV	WREG, TRISB
;SensorNivel.c,204 :: 		MSRS485_Direction = 0;                                                     //MSRS485 out
0x0820	0xA9A2C8  	BCLR	TRISB5_bit, BitPos(TRISB5_bit+0)
;SensorNivel.c,205 :: 		LED1_Direction = 0;                                                        //LED1 out
0x0822	0xA982C0  	BCLR	TRISA4_bit, BitPos(TRISA4_bit+0)
;SensorNivel.c,206 :: 		LED2_Direction = 0;                                                        //LED2 out
0x0824	0xA982C8  	BCLR	TRISB4_bit, BitPos(TRISB4_bit+0)
;SensorNivel.c,208 :: 		AD1CON1.AD12B = 0;                                                         //Configura el ADC en modo de 10 bits
0x0826	0xA94321  	BCLR	AD1CON1, #10
;SensorNivel.c,209 :: 		AD1CON1bits.FORM = 0x00;                                                   //Formato de la canversion: 00->(0_1023)|01->(-512_511)|02->(0_0.999)|03->(-1_0.999)
0x0828	0x801901  	MOV	AD1CON1bits, W1
0x082A	0x2FCFF0  	MOV	#64767, W0
0x082C	0x608000  	AND	W1, W0, W0
0x082E	0xB7A320  	MOV	WREG, AD1CON1bits
;SensorNivel.c,210 :: 		AD1CON1.SIMSAM = 0;                                                        //0 -> Muestrea multiples canales individualmente en secuencia
0x0830	0xA96320  	BCLR	AD1CON1, #3
;SensorNivel.c,211 :: 		AD1CON1.ADSIDL = 0;                                                        //Continua con la operacion del modulo durante el modo desocupado
0x0832	0xA9A321  	BCLR	AD1CON1, #13
;SensorNivel.c,212 :: 		AD1CON1.ASAM = 1;                                                          //Muestreo automatico
0x0834	0xA84320  	BSET	AD1CON1, #2
;SensorNivel.c,213 :: 		AD1CON1bits.SSRC = 0x00;                                                   //Conversion manual
0x0836	0x203200  	MOV	#lo_addr(AD1CON1bits), W0
0x0838	0x784090  	MOV.B	[W0], W1
0x083A	0xB3C1F0  	MOV.B	#31, W0
0x083C	0x60C080  	AND.B	W1, W0, W1
0x083E	0x203200  	MOV	#lo_addr(AD1CON1bits), W0
0x0840	0x784801  	MOV.B	W1, [W0]
;SensorNivel.c,214 :: 		AD1CON2bits.VCFG = 0;                                                      //Selecciona AVDD y AVSS como fuentes de voltaje de referencia
0x0842	0x801911  	MOV	AD1CON2bits, W1
0x0844	0x21FFF0  	MOV	#8191, W0
0x0846	0x608000  	AND	W1, W0, W0
0x0848	0xB7A322  	MOV	WREG, AD1CON2bits
;SensorNivel.c,215 :: 		AD1CON2bits.CHPS = 0;                                                      //Selecciona unicamente el canal CH0
0x084A	0x801911  	MOV	AD1CON2bits, W1
0x084C	0x2FCFF0  	MOV	#64767, W0
0x084E	0x608000  	AND	W1, W0, W0
0x0850	0xB7A322  	MOV	WREG, AD1CON2bits
;SensorNivel.c,216 :: 		AD1CON2.CSCNA = 0;                                                         //No escanea las entradas de CH0 durante la Muestra A
0x0852	0xA94323  	BCLR	AD1CON2, #10
;SensorNivel.c,217 :: 		AD1CON2.BUFM = 0;                                                          //Bit de seleccion del modo de relleno del bufer, 0 -> Siempre comienza a llenar el buffer desde el principio
0x0854	0xA92322  	BCLR	AD1CON2, #1
;SensorNivel.c,218 :: 		AD1CON2.ALTS = 0x00;                                                       //Utiliza siempre la seleccion de entrada de canal para la muestra A
0x0856	0xA90322  	BCLR	AD1CON2, #0
;SensorNivel.c,219 :: 		AD1CON3.ADRC = 0;                                                          //Selecciona el reloj de conversion del ADC derivado del reloj del sistema
0x0858	0xA9E325  	BCLR	AD1CON3, #15
;SensorNivel.c,220 :: 		AD1CON3bits.ADCS = 0x02;                                                   //Configura el periodo del reloj del ADC fijando el valor de los bits ADCS segun la formula: TAD = TCY*(ADCS+1) = 75ns  -> ADCS = 2
0x085A	0xB3C020  	MOV.B	#2, W0
0x085C	0x784080  	MOV.B	W0, W1
0x085E	0x203240  	MOV	#lo_addr(AD1CON3bits), W0
0x0860	0x68C090  	XOR.B	W1, [W0], W1
0x0862	0xB3CFF0  	MOV.B	#255, W0
0x0864	0x60C080  	AND.B	W1, W0, W1
0x0866	0x203240  	MOV	#lo_addr(AD1CON3bits), W0
0x0868	0x68C090  	XOR.B	W1, [W0], W1
0x086A	0x203240  	MOV	#lo_addr(AD1CON3bits), W0
0x086C	0x784801  	MOV.B	W1, [W0]
;SensorNivel.c,221 :: 		AD1CON3bits.SAMC = 0x02;                                                   //Auto Sample Time bits, 2 -> 2*TAD (minimo periodo de muestreo para 10 bits)
0x086E	0x202000  	MOV	#512, W0
0x0870	0x780080  	MOV	W0, W1
0x0872	0x203240  	MOV	#lo_addr(AD1CON3bits), W0
0x0874	0x688090  	XOR	W1, [W0], W1
0x0876	0x21F000  	MOV	#7936, W0
0x0878	0x608080  	AND	W1, W0, W1
0x087A	0x203240  	MOV	#lo_addr(AD1CON3bits), W0
0x087C	0x688090  	XOR	W1, [W0], W1
0x087E	0x881921  	MOV	W1, AD1CON3bits
;SensorNivel.c,222 :: 		AD1CHS0.CH0NB = 0;                                                         //Channel 0 negative input is VREF-
0x0880	0xA9E329  	BCLR	AD1CHS0, #15
;SensorNivel.c,223 :: 		AD1CHS0bits.CH0SB = 0x01;                                                  //Channel 0 positive input is AN1
0x0882	0x201000  	MOV	#256, W0
0x0884	0x780080  	MOV	W0, W1
0x0886	0x203280  	MOV	#lo_addr(AD1CHS0bits), W0
0x0888	0x688090  	XOR	W1, [W0], W1
0x088A	0x21F000  	MOV	#7936, W0
0x088C	0x608080  	AND	W1, W0, W1
0x088E	0x203280  	MOV	#lo_addr(AD1CHS0bits), W0
0x0890	0x688090  	XOR	W1, [W0], W1
0x0892	0x881941  	MOV	W1, AD1CHS0bits
;SensorNivel.c,224 :: 		AD1CHS0.CH0NA = 0;                                                         //Channel 0 negative input is VREF-
0x0894	0xA9E328  	BCLR	AD1CHS0, #7
;SensorNivel.c,225 :: 		AD1CHS0bits.CH0SA = 0x01;                                                  //Channel 0 positive input is AN1
0x0896	0xB3C010  	MOV.B	#1, W0
0x0898	0x784080  	MOV.B	W0, W1
0x089A	0x203280  	MOV	#lo_addr(AD1CHS0bits), W0
0x089C	0x68C090  	XOR.B	W1, [W0], W1
0x089E	0x60C0FF  	AND.B	W1, #31, W1
0x08A0	0x203280  	MOV	#lo_addr(AD1CHS0bits), W0
0x08A2	0x68C090  	XOR.B	W1, [W0], W1
0x08A4	0x203280  	MOV	#lo_addr(AD1CHS0bits), W0
0x08A6	0x784801  	MOV.B	W1, [W0]
;SensorNivel.c,226 :: 		AD1CHS123 = 0;                                                             //AD1CHS123: ADC1 INPUT CHANNEL 1, 2, 3 SELECT REGISTER
0x08A8	0xEF2326  	CLR	AD1CHS123
;SensorNivel.c,227 :: 		AD1CSSL = 0x00;                                                            //Se salta todos los puertos ANx para los escaneos de entrada
0x08AA	0xEF2330  	CLR	AD1CSSL
;SensorNivel.c,228 :: 		AD1CON1.ADON = 1;                                                          //Enciende el modulo ADC
0x08AC	0xA8E321  	BSET	AD1CON1, #15
;SensorNivel.c,231 :: 		T1CON = 0x8000;                                                            //Habilita el TMR1, selecciona el reloj interno, desabilita el modo Gated Timer, selecciona el preescalador 1:1,
0x08AE	0x280000  	MOV	#32768, W0
0x08B0	0xB7A104  	MOV	WREG, T1CON
;SensorNivel.c,232 :: 		IEC0.T1IE = 1;                                                             //Habilita la interrupcion por desborde de TMR1
0x08B2	0xA86094  	BSET	IEC0, #3
;SensorNivel.c,233 :: 		T1IF_bit = 0;                                                              //Limpia la bandera de interrupcion
0x08B4	0xA96084  	BCLR	T1IF_bit, BitPos(T1IF_bit+0)
;SensorNivel.c,234 :: 		PR1 = 200;                                                                 //Genera una interrupcion cada 5us (Fs=200KHz)
0x08B6	0x200C80  	MOV	#200, W0
0x08B8	0xB7A102  	MOV	WREG, PR1
;SensorNivel.c,235 :: 		T1CON.TON = 0;                                                             //Apaga la interrupcion
0x08BA	0xA9E105  	BCLR	T1CON, #15
;SensorNivel.c,238 :: 		T2CON = 0x8000;                                                            //Habilita el TMR2, selecciona el reloj interno, desabilita el modo Gated Timer, selecciona el preescalador 1:1,
0x08BC	0x280000  	MOV	#32768, W0
0x08BE	0xB7A110  	MOV	WREG, T2CON
;SensorNivel.c,239 :: 		IEC0.T2IE = 1;                                                             //Habilita la interrupcion por desborde de TMR2
0x08C0	0xA8E094  	BSET	IEC0, #7
;SensorNivel.c,240 :: 		T2IF_bit = 0;                                                              //Limpia la bandera de interrupcion
0x08C2	0xA9E084  	BCLR	T2IF_bit, BitPos(T2IF_bit+0)
;SensorNivel.c,241 :: 		PR2 = 500;                                                                 //Genera una interrupcion cada 12.5us
0x08C4	0x201F40  	MOV	#500, W0
0x08C6	0xB7A10C  	MOV	WREG, PR2
;SensorNivel.c,242 :: 		T2CON.TON = 0;                                                             //Apaga la interrupcion
0x08C8	0xA9E111  	BCLR	T2CON, #15
;SensorNivel.c,245 :: 		T3CON = 0x8030;                                                            //Habilita el TMR3
0x08CA	0x280300  	MOV	#32816, W0
0x08CC	0xB7A112  	MOV	WREG, T3CON
;SensorNivel.c,246 :: 		IEC0.T3IE = 1;                                                             //Habilita la interrupcion por desborde de TMR3
0x08CE	0xA80095  	BSET	IEC0, #8
;SensorNivel.c,247 :: 		T3IF_bit = 0;                                                              //Limpia la bandera de interrupcion
0x08D0	0xA90085  	BCLR	T3IF_bit, BitPos(T3IF_bit+0)
;SensorNivel.c,248 :: 		PR3 = 46875;                                                               //Genera una interrupcion cada 300ms
0x08D2	0x2B71B0  	MOV	#46875, W0
0x08D4	0xB7A10E  	MOV	WREG, PR3
;SensorNivel.c,249 :: 		T3CON.TON = 1;                                                             //Apaga la interrupcion
0x08D6	0xA8E113  	BSET	T3CON, #15
;SensorNivel.c,252 :: 		RPINR18bits.U1RXR = 0x06;                                                  //Asisgna Rx a RP6
0x08D8	0xB3C060  	MOV.B	#6, W0
0x08DA	0x784080  	MOV.B	W0, W1
0x08DC	0x206A40  	MOV	#lo_addr(RPINR18bits), W0
0x08DE	0x68C090  	XOR.B	W1, [W0], W1
0x08E0	0x60C0FF  	AND.B	W1, #31, W1
0x08E2	0x206A40  	MOV	#lo_addr(RPINR18bits), W0
0x08E4	0x68C090  	XOR.B	W1, [W0], W1
0x08E6	0x206A40  	MOV	#lo_addr(RPINR18bits), W0
0x08E8	0x784801  	MOV.B	W1, [W0]
;SensorNivel.c,253 :: 		RPOR3bits.RP7R = 0x03;                                                     //Asigna Tx a RP7
0x08EA	0x203000  	MOV	#768, W0
0x08EC	0x780080  	MOV	W0, W1
0x08EE	0x206C60  	MOV	#lo_addr(RPOR3bits), W0
0x08F0	0x688090  	XOR	W1, [W0], W1
0x08F2	0x21F000  	MOV	#7936, W0
0x08F4	0x608080  	AND	W1, W0, W1
0x08F6	0x206C60  	MOV	#lo_addr(RPOR3bits), W0
0x08F8	0x688090  	XOR	W1, [W0], W1
0x08FA	0x883631  	MOV	W1, RPOR3bits
;SensorNivel.c,254 :: 		IEC0.U1RXIE = 1;                                                           //Habilita la interrupcion por recepcion de dato por UART
0x08FC	0xA86095  	BSET	IEC0, #11
;SensorNivel.c,255 :: 		U1RXIF_bit = 0;                                                            //Limpia la bandera de interrupcion de UARTRX
0x08FE	0xA96085  	BCLR	U1RXIF_bit, BitPos(U1RXIF_bit+0)
;SensorNivel.c,256 :: 		UART1_Init(19200);                                                         //Inicializa el modulo UART a 9600 bps
0x0900	0x24B00A  	MOV	#19200, W10
0x0902	0x20000B  	MOV	#0, W11
0x0904	0x07FE1A  	RCALL	_UART1_Init
;SensorNivel.c,259 :: 		IPC0bits.T1IP = 0x07;                                                      //Nivel de prioridad de la interrupcion por desbordamiento del TMR1
0x0906	0x800521  	MOV	IPC0bits, W1
0x0908	0x270000  	MOV	#28672, W0
0x090A	0x708000  	IOR	W1, W0, W0
0x090C	0xB7A0A4  	MOV	WREG, IPC0bits
;SensorNivel.c,260 :: 		IPC1bits.T2IP = 0x06;                                                      //Nivel de prioridad de la interrupcion por desbordamiento del TMR2
0x090E	0x260000  	MOV	#24576, W0
0x0910	0x780080  	MOV	W0, W1
0x0912	0x200A60  	MOV	#lo_addr(IPC1bits), W0
0x0914	0x688090  	XOR	W1, [W0], W1
0x0916	0x270000  	MOV	#28672, W0
0x0918	0x608080  	AND	W1, W0, W1
0x091A	0x200A60  	MOV	#lo_addr(IPC1bits), W0
0x091C	0x688090  	XOR	W1, [W0], W1
0x091E	0x880531  	MOV	W1, IPC1bits
;SensorNivel.c,261 :: 		IPC2bits.U1RXIP = 0x05;                                                    //Nivel de prioridad de la interrupcion UARTRX
0x0920	0x250000  	MOV	#20480, W0
0x0922	0x780080  	MOV	W0, W1
0x0924	0x200A80  	MOV	#lo_addr(IPC2bits), W0
0x0926	0x688090  	XOR	W1, [W0], W1
0x0928	0x270000  	MOV	#28672, W0
0x092A	0x608080  	AND	W1, W0, W1
0x092C	0x200A80  	MOV	#lo_addr(IPC2bits), W0
0x092E	0x688090  	XOR	W1, [W0], W1
0x0930	0x880541  	MOV	W1, IPC2bits
;SensorNivel.c,263 :: 		Delay_ms(100);                                                             //Espera hasta que se estabilicen los cambios
0x0932	0x200158  	MOV	#21, W8
0x0934	0x2585B7  	MOV	#22619, W7
L_ConfiguracionPrincipal9:
0x0936	0xED200E  	DEC	W7
0x0938	0x3AFFFE  	BRA NZ	L_ConfiguracionPrincipal9
0x093A	0xED2010  	DEC	W8
0x093C	0x3AFFFC  	BRA NZ	L_ConfiguracionPrincipal9
;SensorNivel.c,265 :: 		}
L_end_ConfiguracionPrincipal:
0x093E	0x7805CF  	POP	W11
0x0940	0x78054F  	POP	W10
0x0942	0x060000  	RETURN
; end of _ConfiguracionPrincipal
_UART1_Init:
0x053A	0xFA0008  	LNK	#8
;__Lib_UART_1_p24_p33.c,118 :: 		
;__Lib_UART_1_p24_p33.c,121 :: 		
0x053C	0x202AC0  	MOV	#lo_addr(_UART1_Write), W0
0x053E	0x8841B0  	MOV	W0, _UART_Wr_Ptr
;__Lib_UART_1_p24_p33.c,122 :: 		
0x0540	0x206CC0  	MOV	#lo_addr(_UART1_Read), W0
0x0542	0x884100  	MOV	W0, _UART_Rd_Ptr
;__Lib_UART_1_p24_p33.c,123 :: 		
0x0544	0x2FFFF0  	MOV	#lo_addr(_UART1_Data_Ready), W0
0x0546	0x8840E0  	MOV	W0, _UART_Rdy_Ptr
;__Lib_UART_1_p24_p33.c,124 :: 		
0x0548	0x202A00  	MOV	#lo_addr(_UART1_Tx_Idle), W0
0x054A	0x8840F0  	MOV	W0, _UART_Tx_Idle_Ptr
;__Lib_UART_1_p24_p33.c,129 :: 		
0x054C	0xEF2220  	CLR	U1MODE
;__Lib_UART_1_p24_p33.c,130 :: 		
0x054E	0x280000  	MOV	#32768, W0
0x0550	0xB7A222  	MOV	WREG, U1STA
;__Lib_UART_1_p24_p33.c,134 :: 		
0x0552	0xA96220  	BCLR	U1MODE, #3
;__Lib_UART_1_p24_p33.c,135 :: 		
0x0554	0x07FE8A  	RCALL	_Get_Fosc_kHz
; tmp start address is: 4 (W2)
0x0556	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_1_p24_p33.c,137 :: 		
0x0558	0x203E80  	MOV	#1000, W0
0x055A	0x200001  	MOV	#0, W1
0x055C	0x07FEFF  	RCALL	__Multiply_32x32
0x055E	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_1_p24_p33.c,139 :: 		
0x0560	0x07FF06  	RCALL	_Get_Fosc_Per_Cyc
0x0562	0xDE0041  	LSR	W0, #1, W0
0x0564	0x400064  	ADD	W0, #4, W0
0x0566	0x780080  	MOV	W0, W1
0x0568	0x470060  	ADD	W14, #0, W0
0x056A	0xBE880A  	MOV.D	W10, [W0]
L__UART1_Init54:
0x056C	0xE90081  	DEC	W1, W1
0x056E	0x350003  	BRA LT	L__UART1_Init55
0x0570	0xD01810  	SL	[W0], [W0++]
0x0572	0xD29010  	RLC	[W0], [W0--]
0x0574	0x37FFFB  	BRA	L__UART1_Init54
L__UART1_Init55:
;__Lib_UART_1_p24_p33.c,141 :: 		
0x0576	0xBE9F82  	PUSH.D	W2
0x0578	0xBE9F8A  	PUSH.D	W10
0x057A	0xBE0002  	MOV.D	W2, W0
0x057C	0x90010E  	MOV	[W14+0], W2
0x057E	0x90019E  	MOV	[W14+2], W3
0x0580	0xEB0200  	CLR	W4
0x0582	0x07FEB9  	RCALL	__Modulus_32x32
0x0584	0xBE054F  	POP.D	W10
0x0586	0xBE014F  	POP.D	W2
0x0588	0x980720  	MOV	W0, [W14+4]
0x058A	0x980731  	MOV	W1, [W14+6]
;__Lib_UART_1_p24_p33.c,142 :: 		
0x058C	0xBE9F8A  	PUSH.D	W10
; tmp end address is: 4 (W2)
0x058E	0xBE0002  	MOV.D	W2, W0
0x0590	0x90010E  	MOV	[W14+0], W2
0x0592	0x90019E  	MOV	[W14+2], W3
0x0594	0xEB0200  	CLR	W4
0x0596	0x07FEED  	RCALL	__Divide_32x32
0x0598	0xBE054F  	POP.D	W10
; tmp start address is: 6 (W3)
0x059A	0x780180  	MOV	W0, W3
0x059C	0x780201  	MOV	W1, W4
;__Lib_UART_1_p24_p33.c,144 :: 		
0x059E	0x470060  	ADD	W14, #0, W0
0x05A0	0xD10150  	LSR	[++W0], W2
0x05A2	0xD380C0  	RRC	[--W0], W1
0x05A4	0x470064  	ADD	W14, #4, W0
0x05A6	0xE10830  	CP	W1, [W0++]
0x05A8	0xE19020  	CPB	W2, [W0--]
0x05AA	0x310007  	BRA GEU	L__UART1_Init37
L__UART1_Init56:
;__Lib_UART_1_p24_p33.c,145 :: 		
0x05AC	0x418061  	ADD	W3, #1, W0
0x05AE	0x4A00E0  	ADDC	W4, #0, W1
; tmp end address is: 6 (W3)
; tmp start address is: 10 (W5)
0x05B0	0x780280  	MOV	W0, W5
0x05B2	0x780301  	MOV	W1, W6
; tmp end address is: 10 (W5)
0x05B4	0x780105  	MOV	W5, W2
0x05B6	0x780186  	MOV	W6, W3
0x05B8	0x370002  	BRA	L_UART1_Init13
L__UART1_Init37:
;__Lib_UART_1_p24_p33.c,144 :: 		
0x05BA	0x780103  	MOV	W3, W2
0x05BC	0x780184  	MOV	W4, W3
;__Lib_UART_1_p24_p33.c,145 :: 		
L_UART1_Init13:
;__Lib_UART_1_p24_p33.c,148 :: 		
; tmp start address is: 4 (W2)
0x05BE	0x718002  	IOR	W3, W2, W0
0x05C0	0x3A0033  	BRA NZ	L__UART1_Init39
L__UART1_Init57:
; tmp end address is: 4 (W2)
;__Lib_UART_1_p24_p33.c,150 :: 		
0x05C2	0x07FE53  	RCALL	_Get_Fosc_kHz
; tmp start address is: 4 (W2)
0x05C4	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_1_p24_p33.c,152 :: 		
0x05C6	0x203E80  	MOV	#1000, W0
0x05C8	0x200001  	MOV	#0, W1
0x05CA	0x07FEC8  	RCALL	__Multiply_32x32
0x05CC	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_1_p24_p33.c,154 :: 		
0x05CE	0x07FECF  	RCALL	_Get_Fosc_Per_Cyc
0x05D0	0xDE0041  	LSR	W0, #1, W0
0x05D2	0xECA000  	INC2	W0
0x05D4	0x780080  	MOV	W0, W1
0x05D6	0x470060  	ADD	W14, #0, W0
0x05D8	0xBE880A  	MOV.D	W10, [W0]
L__UART1_Init58:
0x05DA	0xE90081  	DEC	W1, W1
0x05DC	0x350003  	BRA LT	L__UART1_Init59
0x05DE	0xD01810  	SL	[W0], [W0++]
0x05E0	0xD29010  	RLC	[W0], [W0--]
0x05E2	0x37FFFB  	BRA	L__UART1_Init58
L__UART1_Init59:
;__Lib_UART_1_p24_p33.c,156 :: 		
0x05E4	0xBE9F82  	PUSH.D	W2
0x05E6	0xBE0002  	MOV.D	W2, W0
0x05E8	0x90010E  	MOV	[W14+0], W2
0x05EA	0x90019E  	MOV	[W14+2], W3
0x05EC	0xEB0200  	CLR	W4
0x05EE	0x07FE83  	RCALL	__Modulus_32x32
0x05F0	0xBE014F  	POP.D	W2
0x05F2	0x980720  	MOV	W0, [W14+4]
0x05F4	0x980731  	MOV	W1, [W14+6]
;__Lib_UART_1_p24_p33.c,157 :: 		
0x05F6	0xBE0002  	MOV.D	W2, W0
0x05F8	0x90010E  	MOV	[W14+0], W2
0x05FA	0x90019E  	MOV	[W14+2], W3
0x05FC	0xEB0200  	CLR	W4
0x05FE	0x07FEB9  	RCALL	__Divide_32x32
; tmp end address is: 4 (W2)
; tmp start address is: 6 (W3)
0x0600	0x780180  	MOV	W0, W3
0x0602	0x780201  	MOV	W1, W4
;__Lib_UART_1_p24_p33.c,159 :: 		
0x0604	0x470060  	ADD	W14, #0, W0
0x0606	0xD10150  	LSR	[++W0], W2
0x0608	0xD380C0  	RRC	[--W0], W1
0x060A	0x470064  	ADD	W14, #4, W0
0x060C	0xE10830  	CP	W1, [W0++]
0x060E	0xE19020  	CPB	W2, [W0--]
0x0610	0x310007  	BRA GEU	L__UART1_Init38
L__UART1_Init60:
;__Lib_UART_1_p24_p33.c,160 :: 		
0x0612	0x418061  	ADD	W3, #1, W0
0x0614	0x4A00E0  	ADDC	W4, #0, W1
; tmp end address is: 6 (W3)
; tmp start address is: 10 (W5)
0x0616	0x780280  	MOV	W0, W5
0x0618	0x780301  	MOV	W1, W6
; tmp end address is: 10 (W5)
0x061A	0x780105  	MOV	W5, W2
0x061C	0x780186  	MOV	W6, W3
0x061E	0x370002  	BRA	L_UART1_Init15
L__UART1_Init38:
;__Lib_UART_1_p24_p33.c,159 :: 		
0x0620	0x780103  	MOV	W3, W2
0x0622	0x780184  	MOV	W4, W3
;__Lib_UART_1_p24_p33.c,160 :: 		
L_UART1_Init15:
;__Lib_UART_1_p24_p33.c,162 :: 		
; tmp start address is: 4 (W2)
0x0624	0xA86220  	BSET	U1MODE, #3
; tmp end address is: 4 (W2)
;__Lib_UART_1_p24_p33.c,163 :: 		
0x0626	0x370000  	BRA	L_UART1_Init14
L__UART1_Init39:
;__Lib_UART_1_p24_p33.c,148 :: 		
;__Lib_UART_1_p24_p33.c,163 :: 		
L_UART1_Init14:
;__Lib_UART_1_p24_p33.c,165 :: 		
; tmp start address is: 4 (W2)
0x0628	0x510061  	SUB	W2, #1, W0
0x062A	0x5980E0  	SUBB	W3, #0, W1
; tmp end address is: 4 (W2)
; tmp start address is: 0 (W0)
0x062C	0x881140  	MOV	W0, U1BRG
; tmp end address is: 0 (W0)
;__Lib_UART_1_p24_p33.c,168 :: 		
0x062E	0xA92222  	BCLR	U1STA, #1
;__Lib_UART_1_p24_p33.c,170 :: 		
0x0630	0xA8E221  	BSET	U1MODE, #15
;__Lib_UART_1_p24_p33.c,171 :: 		
0x0632	0xA84223  	BSET	U1STA, #10
;__Lib_UART_1_p24_p33.c,173 :: 		
0x0634	0x07FE8C  	RCALL	_Delay_100ms
0x0636	0x07FE8B  	RCALL	_Delay_100ms
;__Lib_UART_1_p24_p33.c,175 :: 		
L_end_UART1_Init:
0x0638	0xFA8000  	ULNK
0x063A	0x060000  	RETURN
; end of _UART1_Init
_Get_Fosc_kHz:
;__Lib_Delays.c,38 :: 		unsigned long Get_Fosc_kHz() {
;__Lib_Delays.c,39 :: 		return Clock_kHz();
0x026A	0x238800  	MOV	#14464, W0
0x026C	0x200011  	MOV	#1, W1
;__Lib_Delays.c,40 :: 		}
L_end_Get_Fosc_kHz:
0x026E	0x060000  	RETURN
; end of _Get_Fosc_kHz
_Get_Fosc_Per_Cyc:
;__Lib_Delays.c,63 :: 		unsigned int Get_Fosc_Per_Cyc() {
;__Lib_Delays.c,64 :: 		return __FOSC_PER_CYC;
0x036E	0x200020  	MOV	#2, W0
;__Lib_Delays.c,65 :: 		}
L_end_Get_Fosc_Per_Cyc:
0x0370	0x060000  	RETURN
; end of _Get_Fosc_Per_Cyc
_Delay_100ms:
;__Lib_Delays.c,666 :: 		void Delay_100ms()
;__Lib_Delays.c,668 :: 		Delay_ms(100);
0x034E	0x200158  	MOV	#21, W8
0x0350	0x2585B7  	MOV	#22619, W7
L_Delay_100ms33:
0x0352	0xED200E  	DEC	W7
0x0354	0x3AFFFE  	BRA NZ	L_Delay_100ms33
0x0356	0xED2010  	DEC	W8
0x0358	0x3AFFFC  	BRA NZ	L_Delay_100ms33
;__Lib_Delays.c,669 :: 		}
L_end_Delay_100ms:
0x035A	0x060000  	RETURN
; end of _Delay_100ms
__Multiply_32x32:
0x035C	0xFA0000  	LNK	#0
;__Lib_Math.c,43 :: 		
;__Lib_Math.c,46 :: 		
0x035E	0xB80A02  	MUL.UU	W1, W2, W4
;__Lib_Math.c,47 :: 		
0x0360	0x880050  	MOV	W0, W5
;__Lib_Math.c,48 :: 		
0x0362	0xB80002  	MUL.UU	W0, W2, W0
;__Lib_Math.c,49 :: 		
0x0364	0x420081  	ADD	W4, W1, W1
;__Lib_Math.c,50 :: 		
0x0366	0xB82A03  	MUL.UU	W5, W3, W4
;__Lib_Math.c,51 :: 		
0x0368	0x420081  	ADD	W4, W1, W1
;__Lib_Math.c,54 :: 		
L_end__Multiply_32x32:
0x036A	0xFA8000  	ULNK
0x036C	0x060000  	RETURN
; end of __Multiply_32x32
__Modulus_32x32:
0x02F6	0xFA0000  	LNK	#0
;__Lib_Math.c,162 :: 		
;__Lib_Math.c,164 :: 		
0x02F8	0x070002  	RCALL	Modulus_32x32___testsus
;__Lib_Math.c,166 :: 		
0x02FA	0x00000004034A  	GOTO	the_end_Modulus_32x32
;__Lib_Math.c,171 :: 		
Modulus_32x32___testsus:
;__Lib_Math.c,172 :: 		
0x02FE	0xE20008  	CP0	W4
;__Lib_Math.c,173 :: 		
0x0300	0x3A0002  	BRA NZ	Modulus_32x32___modsi3
;__Lib_Math.c,175 :: 		
0x0302	0x070010  	RCALL	Modulus_32x32___umodsi3
;__Lib_Math.c,176 :: 		
0x0304	0x060000  	RETURN
;__Lib_Math.c,178 :: 		
Modulus_32x32___modsi3:
;__Lib_Math.c,179 :: 		
0x0306	0x781F81  	MOV	W1, [W15++]
;__Lib_Math.c,180 :: 		
0x0308	0xE20002  	CP0	W1
;__Lib_Math.c,181 :: 		
0x030A	0x3D0002  	BRA GE	Modulus_32x32_modtestb
;__Lib_Math.c,182 :: 		
0x030C	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,183 :: 		
0x030E	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,184 :: 		
Modulus_32x32_modtestb:
;__Lib_Math.c,185 :: 		
0x0310	0xE20006  	CP0	W3
;__Lib_Math.c,186 :: 		
0x0312	0x3D0002  	BRA GE	Modulus_32x32_calcrem
;__Lib_Math.c,187 :: 		
0x0314	0x110160  	SUBR	W2, #0, W2
;__Lib_Math.c,188 :: 		
0x0316	0x1981E0  	SUBBR	W3, #0, W3
;__Lib_Math.c,189 :: 		
Modulus_32x32_calcrem:
;__Lib_Math.c,190 :: 		
0x0318	0x070005  	RCALL	Modulus_32x32___umodsi3
;__Lib_Math.c,191 :: 		
0x031A	0xE0004F  	CP0	[--W15]
;__Lib_Math.c,192 :: 		
0x031C	0x3B0002  	BRA NN	Modulus_32x32_exitr
;__Lib_Math.c,193 :: 		
0x031E	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,194 :: 		
0x0320	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,195 :: 		
Modulus_32x32_exitr:
;__Lib_Math.c,196 :: 		
0x0322	0x060000  	RETURN
;__Lib_Math.c,197 :: 		
Modulus_32x32___umodsi3:
;__Lib_Math.c,198 :: 		
0x0324	0x070002  	RCALL	Modulus_32x32___udivsi3
;__Lib_Math.c,199 :: 		
0x0326	0xBE8004  	MOV.D	W4, W0
;__Lib_Math.c,200 :: 		
0x0328	0x060000  	RETURN
;__Lib_Math.c,201 :: 		
Modulus_32x32___udivsi3:
;__Lib_Math.c,202 :: 		
0x032A	0xB82260  	MUL.UU	W4, #0, W4
;__Lib_Math.c,203 :: 		
0x032C	0x200206  	MOV	#32, W6
;__Lib_Math.c,204 :: 		
Modulus_32x32_nextbit:
;__Lib_Math.c,205 :: 		
0x032E	0xD00000  	SL	W0, W0
;__Lib_Math.c,206 :: 		
0x0330	0xD28081  	RLC	W1, W1
;__Lib_Math.c,207 :: 		
0x0332	0xD28204  	RLC	W4, W4
;__Lib_Math.c,208 :: 		
0x0334	0xD28285  	RLC	W5, W5
;__Lib_Math.c,209 :: 		
0x0336	0xA80000  	BSET	W0, #0
;__Lib_Math.c,210 :: 		
0x0338	0x520202  	SUB	W4, W2, W4
;__Lib_Math.c,211 :: 		
0x033A	0x5A8283  	SUBB	W5, W3, W5
;__Lib_Math.c,212 :: 		
0x033C	0x3B0003  	BRA NN	Modulus_32x32_iterate
;__Lib_Math.c,213 :: 		
0x033E	0x420202  	ADD	W4, W2, W4
;__Lib_Math.c,214 :: 		
0x0340	0x4A8283  	ADDC	W5, W3, W5
;__Lib_Math.c,215 :: 		
0x0342	0xA10000  	BCLR	W0, #0
;__Lib_Math.c,216 :: 		
Modulus_32x32_iterate:
;__Lib_Math.c,217 :: 		
0x0344	0xE90306  	DEC	W6, W6
;__Lib_Math.c,218 :: 		
0x0346	0x3AFFF3  	BRA NZ	Modulus_32x32_nextbit
;__Lib_Math.c,219 :: 		
0x0348	0x060000  	RETURN
;__Lib_Math.c,222 :: 		
the_end_Modulus_32x32:
;__Lib_Math.c,225 :: 		
L_end__Modulus_32x32:
0x034A	0xFA8000  	ULNK
0x034C	0x060000  	RETURN
; end of __Modulus_32x32
__Divide_32x32:
0x0372	0xFA0000  	LNK	#0
;__Lib_Math.c,78 :: 		
;__Lib_Math.c,81 :: 		
0x0374	0x070002  	RCALL	Divide_32x32___testsus
;__Lib_Math.c,83 :: 		
0x0376	0x0000000403C0  	GOTO	the_end_Divide_32x32
;__Lib_Math.c,88 :: 		
Divide_32x32___testsus:
;__Lib_Math.c,89 :: 		
0x037A	0xE20008  	CP0	W4
;__Lib_Math.c,90 :: 		
0x037C	0x3A0002  	BRA NZ	Divide_32x32___divsi3
;__Lib_Math.c,92 :: 		
0x037E	0x070010  	RCALL	Divide_32x32___udivsi3
;__Lib_Math.c,93 :: 		
0x0380	0x060000  	RETURN
;__Lib_Math.c,95 :: 		
Divide_32x32___divsi3:
;__Lib_Math.c,96 :: 		
0x0382	0x689F83  	XOR	W1, W3, [W15++]
;__Lib_Math.c,97 :: 		
0x0384	0xE20002  	CP0	W1
;__Lib_Math.c,98 :: 		
0x0386	0x3D0002  	BRA GE	Divide_32x32_divtestb
;__Lib_Math.c,99 :: 		
0x0388	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,100 :: 		
0x038A	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,101 :: 		
Divide_32x32_divtestb:
;__Lib_Math.c,102 :: 		
0x038C	0xE20006  	CP0	W3
;__Lib_Math.c,103 :: 		
0x038E	0x3D0002  	BRA GE	Divide_32x32_calcquot
;__Lib_Math.c,104 :: 		
0x0390	0x110160  	SUBR	W2, #0, W2
;__Lib_Math.c,105 :: 		
0x0392	0x1981E0  	SUBBR	W3, #0, W3
;__Lib_Math.c,106 :: 		
Divide_32x32_calcquot:
;__Lib_Math.c,107 :: 		
0x0394	0x070005  	RCALL	Divide_32x32___udivsi3
;__Lib_Math.c,108 :: 		
0x0396	0xE0004F  	CP0	[--W15]
;__Lib_Math.c,109 :: 		
0x0398	0x3B0002  	BRA NN	Divide_32x32_returnq
;__Lib_Math.c,110 :: 		
0x039A	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,111 :: 		
0x039C	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,112 :: 		
Divide_32x32_returnq:
;__Lib_Math.c,113 :: 		
0x039E	0x060000  	RETURN
;__Lib_Math.c,114 :: 		
Divide_32x32___udivsi3:
;__Lib_Math.c,115 :: 		
0x03A0	0xB82260  	MUL.UU	W4, #0, W4
;__Lib_Math.c,116 :: 		
0x03A2	0x200206  	MOV	#32, W6
;__Lib_Math.c,117 :: 		
Divide_32x32_nextbit:
;__Lib_Math.c,118 :: 		
0x03A4	0xD00000  	SL	W0, W0
;__Lib_Math.c,119 :: 		
0x03A6	0xD28081  	RLC	W1, W1
;__Lib_Math.c,120 :: 		
0x03A8	0xD28204  	RLC	W4, W4
;__Lib_Math.c,121 :: 		
0x03AA	0xD28285  	RLC	W5, W5
;__Lib_Math.c,122 :: 		
0x03AC	0xA80000  	BSET	W0, #0
;__Lib_Math.c,123 :: 		
0x03AE	0x520202  	SUB	W4, W2, W4
;__Lib_Math.c,124 :: 		
0x03B0	0x5A8283  	SUBB	W5, W3, W5
;__Lib_Math.c,125 :: 		
0x03B2	0x3B0003  	BRA NN	Divide_32x32_iterate
;__Lib_Math.c,126 :: 		
0x03B4	0x420202  	ADD	W4, W2, W4
;__Lib_Math.c,127 :: 		
0x03B6	0x4A8283  	ADDC	W5, W3, W5
;__Lib_Math.c,128 :: 		
0x03B8	0xA10000  	BCLR	W0, #0
;__Lib_Math.c,129 :: 		
Divide_32x32_iterate:
;__Lib_Math.c,130 :: 		
0x03BA	0xE90306  	DEC	W6, W6
;__Lib_Math.c,131 :: 		
0x03BC	0x3AFFF3  	BRA NZ	Divide_32x32_nextbit
;__Lib_Math.c,132 :: 		
0x03BE	0x060000  	RETURN
;__Lib_Math.c,135 :: 		
the_end_Divide_32x32:
;__Lib_Math.c,138 :: 		
L_end__Divide_32x32:
0x03C0	0xFA8000  	ULNK
0x03C2	0x060000  	RETURN
; end of __Divide_32x32
_ProcesarSolicitud:
0x06D8	0xFA0008  	LNK	#8
;SensorNivel.c,270 :: 		void ProcesarSolicitud(unsigned char *cabeceraSolicitud, unsigned char *payloadSolicitud){
;SensorNivel.c,280 :: 		ptrNumDatosResp = (unsigned char *) & numDatosResp;
0x06DA	0x781F8A  	PUSH	W10
0x06DC	0x781F8B  	PUSH	W11
0x06DE	0x781F8C  	PUSH	W12
0x06E0	0x470062  	ADD	W14, #2, W0
; ptrNumDatosResp start address is: 18 (W9)
0x06E2	0x780480  	MOV	W0, W9
;SensorNivel.c,281 :: 		ptrDatoInt = (unsigned char *) & datoInt;
0x06E4	0x470060  	ADD	W14, #0, W0
; ptrDatoInt start address is: 4 (W2)
0x06E6	0x780100  	MOV	W0, W2
;SensorNivel.c,282 :: 		ptrDatoFloat = (unsigned char *) & datoFloat;
0x06E8	0x470064  	ADD	W14, #4, W0
; ptrDatoFloat start address is: 6 (W3)
0x06EA	0x780180  	MOV	W0, W3
;SensorNivel.c,285 :: 		funcionSolicitud = cabeceraSolicitud[1];
0x06EC	0x450061  	ADD	W10, #1, W0
; funcionSolicitud start address is: 2 (W1)
0x06EE	0x784090  	MOV.B	[W0], W1
;SensorNivel.c,286 :: 		subFuncionSolicitud = cabeceraSolicitud[2];
0x06F0	0x450062  	ADD	W10, #2, W0
; subFuncionSolicitud start address is: 0 (W0)
0x06F2	0x784010  	MOV.B	[W0], W0
;SensorNivel.c,288 :: 		switch (funcionSolicitud){
0x06F4	0x370072  	BRA	L_ProcesarSolicitud11
; ptrNumDatosResp end address is: 18 (W9)
; ptrDatoInt end address is: 4 (W2)
; ptrDatoFloat end address is: 6 (W3)
; funcionSolicitud end address is: 2 (W1)
;SensorNivel.c,289 :: 		case 1:
L_ProcesarSolicitud13:
;SensorNivel.c,290 :: 		switch (subFuncionSolicitud){
0x06F6	0x370012  	BRA	L_ProcesarSolicitud14
; subFuncionSolicitud end address is: 0 (W0)
;SensorNivel.c,291 :: 		case 1:
L_ProcesarSolicitud16:
;SensorNivel.c,293 :: 		temperaturaRaw = LeerDS18B20();
0x06F8	0x07FFA1  	RCALL	_LeerDS18B20
0x06FA	0x8841F0  	MOV	W0, _temperaturaRaw
;SensorNivel.c,295 :: 		break;
0x06FC	0x370018  	BRA	L_ProcesarSolicitud15
;SensorNivel.c,296 :: 		case 2:
L_ProcesarSolicitud17:
;SensorNivel.c,298 :: 		temperaturaRaw = LeerDS18B20();
0x06FE	0x07FF9E  	RCALL	_LeerDS18B20
0x0700	0x8841F0  	MOV	W0, _temperaturaRaw
;SensorNivel.c,299 :: 		CapturarMuestras();
0x0702	0x07FFD1  	RCALL	_CapturarMuestras
;SensorNivel.c,300 :: 		break;
0x0704	0x370014  	BRA	L_ProcesarSolicitud15
;SensorNivel.c,301 :: 		case 3:
L_ProcesarSolicitud18:
;SensorNivel.c,303 :: 		temperaturaRaw = LeerDS18B20();
0x0706	0x07FF9A  	RCALL	_LeerDS18B20
0x0708	0x8841F0  	MOV	W0, _temperaturaRaw
;SensorNivel.c,304 :: 		ProbarMuestreo();
0x070A	0x07FF08  	RCALL	_ProbarMuestreo
;SensorNivel.c,305 :: 		break;
0x070C	0x370010  	BRA	L_ProcesarSolicitud15
;SensorNivel.c,307 :: 		case 4:
L_ProcesarSolicitud19:
;SensorNivel.c,309 :: 		temperaturaRaw = LeerDS18B20();
0x070E	0x07FF96  	RCALL	_LeerDS18B20
0x0710	0x8841F0  	MOV	W0, _temperaturaRaw
;SensorNivel.c,310 :: 		ProbarEnvioTrama();
0x0712	0x07FE78  	RCALL	_ProbarEnvioTrama
;SensorNivel.c,311 :: 		break;
0x0714	0x37000C  	BRA	L_ProcesarSolicitud15
;SensorNivel.c,312 :: 		default:
L_ProcesarSolicitud20:
;SensorNivel.c,314 :: 		temperaturaRaw = LeerDS18B20();
0x0716	0x07FF92  	RCALL	_LeerDS18B20
0x0718	0x8841F0  	MOV	W0, _temperaturaRaw
;SensorNivel.c,316 :: 		break;
0x071A	0x370009  	BRA	L_ProcesarSolicitud15
;SensorNivel.c,317 :: 		}
L_ProcesarSolicitud14:
; subFuncionSolicitud start address is: 0 (W0)
0x071C	0xE10461  	CP.B	W0, #1
0x071E	0x32FFEC  	BRA Z	L_ProcesarSolicitud16
L__ProcesarSolicitud104:
0x0720	0xE10462  	CP.B	W0, #2
0x0722	0x32FFED  	BRA Z	L_ProcesarSolicitud17
L__ProcesarSolicitud105:
0x0724	0xE10463  	CP.B	W0, #3
0x0726	0x32FFEF  	BRA Z	L_ProcesarSolicitud18
L__ProcesarSolicitud106:
0x0728	0xE10464  	CP.B	W0, #4
0x072A	0x32FFF1  	BRA Z	L_ProcesarSolicitud19
L__ProcesarSolicitud107:
; subFuncionSolicitud end address is: 0 (W0)
0x072C	0x37FFF4  	BRA	L_ProcesarSolicitud20
L_ProcesarSolicitud15:
;SensorNivel.c,318 :: 		break;
0x072E	0x37005B  	BRA	L_ProcesarSolicitud12
;SensorNivel.c,319 :: 		case 2:
L_ProcesarSolicitud21:
;SensorNivel.c,322 :: 		switch (subFuncionSolicitud){
; subFuncionSolicitud start address is: 0 (W0)
; ptrDatoFloat start address is: 6 (W3)
; ptrDatoInt start address is: 4 (W2)
; ptrNumDatosResp start address is: 18 (W9)
0x0730	0x370032  	BRA	L_ProcesarSolicitud22
; subFuncionSolicitud end address is: 0 (W0)
;SensorNivel.c,323 :: 		case 1:
L_ProcesarSolicitud24:
;SensorNivel.c,326 :: 		datoInt = temperaturaRaw;
0x0732	0x8041F0  	MOV	_temperaturaRaw, W0
0x0734	0x980700  	MOV	W0, [W14+0]
;SensorNivel.c,327 :: 		datoFloat = TOF;
0x0736	0x804200  	MOV	_TOF, W0
0x0738	0x804211  	MOV	_TOF+2, W1
0x073A	0x980720  	MOV	W0, [W14+4]
0x073C	0x980731  	MOV	W1, [W14+6]
;SensorNivel.c,328 :: 		respuestaPyloadRS485[0] = *(ptrDatoFloat);
0x073E	0x784093  	MOV.B	[W3], W1
0x0740	0x208440  	MOV	#lo_addr(_respuestaPyloadRS485), W0
0x0742	0x784801  	MOV.B	W1, [W0]
;SensorNivel.c,329 :: 		respuestaPyloadRS485[1] = *(ptrDatoFloat+1);
0x0744	0x418061  	ADD	W3, #1, W0
0x0746	0x784090  	MOV.B	[W0], W1
0x0748	0x208450  	MOV	#lo_addr(_respuestaPyloadRS485+1), W0
0x074A	0x784801  	MOV.B	W1, [W0]
;SensorNivel.c,330 :: 		respuestaPyloadRS485[2] = *(ptrDatoFloat+2);
0x074C	0x418062  	ADD	W3, #2, W0
0x074E	0x784090  	MOV.B	[W0], W1
0x0750	0x208460  	MOV	#lo_addr(_respuestaPyloadRS485+2), W0
0x0752	0x784801  	MOV.B	W1, [W0]
;SensorNivel.c,331 :: 		respuestaPyloadRS485[3] = *(ptrDatoFloat+3);
0x0754	0x418063  	ADD	W3, #3, W0
; ptrDatoFloat end address is: 6 (W3)
0x0756	0x784090  	MOV.B	[W0], W1
0x0758	0x208470  	MOV	#lo_addr(_respuestaPyloadRS485+3), W0
0x075A	0x784801  	MOV.B	W1, [W0]
;SensorNivel.c,332 :: 		respuestaPyloadRS485[4] = *(ptrDatoInt);
0x075C	0x784092  	MOV.B	[W2], W1
0x075E	0x208480  	MOV	#lo_addr(_respuestaPyloadRS485+4), W0
0x0760	0x784801  	MOV.B	W1, [W0]
;SensorNivel.c,333 :: 		respuestaPyloadRS485[5] = *(ptrDatoInt+1);
0x0762	0x410061  	ADD	W2, #1, W0
; ptrDatoInt end address is: 4 (W2)
0x0764	0x784090  	MOV.B	[W0], W1
0x0766	0x208490  	MOV	#lo_addr(_respuestaPyloadRS485+5), W0
0x0768	0x784801  	MOV.B	W1, [W0]
;SensorNivel.c,335 :: 		numDatosResp = 6;
0x076A	0x200060  	MOV	#6, W0
0x076C	0x980710  	MOV	W0, [W14+2]
;SensorNivel.c,336 :: 		cabeceraSolicitud[3] = *(ptrNumDatosResp);
0x076E	0x450063  	ADD	W10, #3, W0
0x0770	0x784819  	MOV.B	[W9], [W0]
;SensorNivel.c,337 :: 		cabeceraSolicitud[4] = *(ptrNumDatosResp+1);
0x0772	0x4500E4  	ADD	W10, #4, W1
0x0774	0x448061  	ADD	W9, #1, W0
; ptrNumDatosResp end address is: 18 (W9)
0x0776	0x784890  	MOV.B	[W0], [W1]
;SensorNivel.c,338 :: 		EnviarTramaRS485(1, cabeceraSolicitud, respuestaPyloadRS485);
0x0778	0x20844C  	MOV	#lo_addr(_respuestaPyloadRS485), W12
0x077A	0x78058A  	MOV	W10, W11
0x077C	0xB3C01A  	MOV.B	#1, W10
0x077E	0x07FE94  	RCALL	_EnviarTramaRS485
;SensorNivel.c,339 :: 		break;
0x0780	0x37000E  	BRA	L_ProcesarSolicitud23
;SensorNivel.c,340 :: 		case 2:
L_ProcesarSolicitud25:
;SensorNivel.c,343 :: 		numDatosResp = 702;
; ptrNumDatosResp start address is: 18 (W9)
0x0782	0x202BE0  	MOV	#702, W0
0x0784	0x980710  	MOV	W0, [W14+2]
;SensorNivel.c,344 :: 		cabeceraSolicitud[3] = *(ptrNumDatosResp);
0x0786	0x450063  	ADD	W10, #3, W0
0x0788	0x784819  	MOV.B	[W9], [W0]
;SensorNivel.c,345 :: 		cabeceraSolicitud[4] = *(ptrNumDatosResp+1);
0x078A	0x4500E4  	ADD	W10, #4, W1
0x078C	0x448061  	ADD	W9, #1, W0
; ptrNumDatosResp end address is: 18 (W9)
0x078E	0x784890  	MOV.B	[W0], [W1]
;SensorNivel.c,346 :: 		EnviarTramaInt(cabeceraSolicitud, temperaturaRaw);
0x0790	0x8041FB  	MOV	_temperaturaRaw, W11
0x0792	0x07FE59  	RCALL	_EnviarTramaInt
;SensorNivel.c,347 :: 		break;
0x0794	0x370004  	BRA	L_ProcesarSolicitud23
;SensorNivel.c,348 :: 		}
L_ProcesarSolicitud22:
; subFuncionSolicitud start address is: 0 (W0)
; ptrDatoFloat start address is: 6 (W3)
; ptrDatoInt start address is: 4 (W2)
; ptrNumDatosResp start address is: 18 (W9)
0x0796	0xE10461  	CP.B	W0, #1
0x0798	0x32FFCC  	BRA Z	L_ProcesarSolicitud24
L__ProcesarSolicitud108:
; ptrDatoInt end address is: 4 (W2)
; ptrDatoFloat end address is: 6 (W3)
0x079A	0xE10462  	CP.B	W0, #2
0x079C	0x32FFF2  	BRA Z	L_ProcesarSolicitud25
L__ProcesarSolicitud109:
; ptrNumDatosResp end address is: 18 (W9)
; subFuncionSolicitud end address is: 0 (W0)
L_ProcesarSolicitud23:
;SensorNivel.c,349 :: 		break;
0x079E	0x370023  	BRA	L_ProcesarSolicitud12
;SensorNivel.c,350 :: 		case 4:
L_ProcesarSolicitud26:
;SensorNivel.c,352 :: 		switch (subFuncionSolicitud){
; subFuncionSolicitud start address is: 0 (W0)
; ptrNumDatosResp start address is: 18 (W9)
0x07A0	0x370017  	BRA	L_ProcesarSolicitud27
; subFuncionSolicitud end address is: 0 (W0)
;SensorNivel.c,353 :: 		case 2:
L_ProcesarSolicitud29:
;SensorNivel.c,356 :: 		numDatosResp = 10;
0x07A2	0x2000A0  	MOV	#10, W0
0x07A4	0x980710  	MOV	W0, [W14+2]
;SensorNivel.c,357 :: 		cabeceraSolicitud[3] = *(ptrNumDatosResp);
0x07A6	0x450063  	ADD	W10, #3, W0
0x07A8	0x784819  	MOV.B	[W9], [W0]
;SensorNivel.c,358 :: 		cabeceraSolicitud[4] = *(ptrNumDatosResp+1);
0x07AA	0x4500E4  	ADD	W10, #4, W1
0x07AC	0x448061  	ADD	W9, #1, W0
; ptrNumDatosResp end address is: 18 (W9)
0x07AE	0x784890  	MOV.B	[W0], [W1]
;SensorNivel.c,359 :: 		EnviarTramaRS485(1, cabeceraSolicitud, tramaPruebaRS485);
0x07B0	0x20800C  	MOV	#lo_addr(_tramaPruebaRS485), W12
0x07B2	0x78058A  	MOV	W10, W11
0x07B4	0xB3C01A  	MOV.B	#1, W10
0x07B6	0x07FE78  	RCALL	_EnviarTramaRS485
;SensorNivel.c,360 :: 		break;
0x07B8	0x37000F  	BRA	L_ProcesarSolicitud28
;SensorNivel.c,361 :: 		case 3:
L_ProcesarSolicitud30:
;SensorNivel.c,364 :: 		numDatosResp = 512;
; ptrNumDatosResp start address is: 18 (W9)
0x07BA	0x202000  	MOV	#512, W0
0x07BC	0x980710  	MOV	W0, [W14+2]
;SensorNivel.c,365 :: 		cabeceraSolicitud[3] = *(ptrNumDatosResp);
0x07BE	0x450063  	ADD	W10, #3, W0
0x07C0	0x784819  	MOV.B	[W9], [W0]
;SensorNivel.c,366 :: 		cabeceraSolicitud[4] = *(ptrNumDatosResp+1);
0x07C2	0x4500E4  	ADD	W10, #4, W1
0x07C4	0x448061  	ADD	W9, #1, W0
; ptrNumDatosResp end address is: 18 (W9)
0x07C6	0x784890  	MOV.B	[W0], [W1]
;SensorNivel.c,367 :: 		GenerarTramaPrueba(numDatosResp, cabeceraSolicitud);
0x07C8	0x78058A  	MOV	W10, W11
0x07CA	0x90051E  	MOV	[W14+2], W10
0x07CC	0x07FDFB  	RCALL	_GenerarTramaPrueba
;SensorNivel.c,368 :: 		break;
0x07CE	0x370004  	BRA	L_ProcesarSolicitud28
;SensorNivel.c,369 :: 		}
L_ProcesarSolicitud27:
; subFuncionSolicitud start address is: 0 (W0)
; ptrNumDatosResp start address is: 18 (W9)
0x07D0	0xE10462  	CP.B	W0, #2
0x07D2	0x32FFE7  	BRA Z	L_ProcesarSolicitud29
L__ProcesarSolicitud110:
0x07D4	0xE10463  	CP.B	W0, #3
0x07D6	0x32FFF1  	BRA Z	L_ProcesarSolicitud30
L__ProcesarSolicitud111:
; ptrNumDatosResp end address is: 18 (W9)
; subFuncionSolicitud end address is: 0 (W0)
L_ProcesarSolicitud28:
;SensorNivel.c,370 :: 		break;
0x07D8	0x370006  	BRA	L_ProcesarSolicitud12
;SensorNivel.c,371 :: 		}
L_ProcesarSolicitud11:
; subFuncionSolicitud start address is: 0 (W0)
; funcionSolicitud start address is: 2 (W1)
; ptrDatoFloat start address is: 6 (W3)
; ptrDatoInt start address is: 4 (W2)
; ptrNumDatosResp start address is: 18 (W9)
0x07DA	0xE10C61  	CP.B	W1, #1
0x07DC	0x32FF8C  	BRA Z	L_ProcesarSolicitud13
L__ProcesarSolicitud112:
0x07DE	0xE10C62  	CP.B	W1, #2
0x07E0	0x32FFA7  	BRA Z	L_ProcesarSolicitud21
L__ProcesarSolicitud113:
; ptrDatoInt end address is: 4 (W2)
; ptrDatoFloat end address is: 6 (W3)
0x07E2	0xE10C64  	CP.B	W1, #4
0x07E4	0x32FFDD  	BRA Z	L_ProcesarSolicitud26
L__ProcesarSolicitud114:
; ptrNumDatosResp end address is: 18 (W9)
; funcionSolicitud end address is: 2 (W1)
; subFuncionSolicitud end address is: 0 (W0)
L_ProcesarSolicitud12:
;SensorNivel.c,373 :: 		banderaPeticion = 0;
0x07E6	0x208351  	MOV	#lo_addr(_banderaPeticion), W1
0x07E8	0xEF2000  	CLR	W0
0x07EA	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,375 :: 		}
L_end_ProcesarSolicitud:
0x07EC	0x78064F  	POP	W12
0x07EE	0x7805CF  	POP	W11
0x07F0	0x78054F  	POP	W10
0x07F2	0xFA8000  	ULNK
0x07F4	0x060000  	RETURN
; end of _ProcesarSolicitud
_LeerDS18B20:
;SensorNivel.c,401 :: 		unsigned int LeerDS18B20(){
;SensorNivel.c,405 :: 		LED1 = 1;
0x063C	0x781F8A  	PUSH	W10
0x063E	0x781F8B  	PUSH	W11
0x0640	0x781F8C  	PUSH	W12
0x0642	0xA882C4  	BSET	LATA4_bit, BitPos(LATA4_bit+0)
;SensorNivel.c,408 :: 		Ow_Reset(&PORTA, 0);                                                       //Onewire reset signal
0x0644	0xEF2016  	CLR	W11
0x0646	0x202C2A  	MOV	#lo_addr(PORTA), W10
0x0648	0x07FE13  	RCALL	_Ow_Reset
;SensorNivel.c,409 :: 		Ow_Write(&PORTA, 0, 0xCC);                                                 //Issue command SKIP_ROM
0x064A	0xB3CCCC  	MOV.B	#204, W12
0x064C	0xEF2016  	CLR	W11
0x064E	0x202C2A  	MOV	#lo_addr(PORTA), W10
0x0650	0x07FDEE  	RCALL	_Ow_Write
;SensorNivel.c,410 :: 		Ow_Write(&PORTA, 0, 0x44);                                                 //Issue command CONVERT_T
0x0652	0xB3C44C  	MOV.B	#68, W12
0x0654	0xEF2016  	CLR	W11
0x0656	0x202C2A  	MOV	#lo_addr(PORTA), W10
0x0658	0x07FDEA  	RCALL	_Ow_Write
;SensorNivel.c,411 :: 		Delay_ms(750);
0x065A	0x200998  	MOV	#153, W8
0x065C	0x296B17  	MOV	#38577, W7
L_LeerDS18B2035:
0x065E	0xED200E  	DEC	W7
0x0660	0x3AFFFE  	BRA NZ	L_LeerDS18B2035
0x0662	0xED2010  	DEC	W8
0x0664	0x3AFFFC  	BRA NZ	L_LeerDS18B2035
0x0666	0x000000  	NOP
0x0668	0x000000  	NOP
;SensorNivel.c,412 :: 		Ow_Reset(&PORTA, 0);
0x066A	0xEF2016  	CLR	W11
0x066C	0x202C2A  	MOV	#lo_addr(PORTA), W10
0x066E	0x07FE00  	RCALL	_Ow_Reset
;SensorNivel.c,413 :: 		Ow_Write(&PORTA, 0, 0xCC);                                                 //Issue command SKIP_ROM
0x0670	0xB3CCCC  	MOV.B	#204, W12
0x0672	0xEF2016  	CLR	W11
0x0674	0x202C2A  	MOV	#lo_addr(PORTA), W10
0x0676	0x07FDDB  	RCALL	_Ow_Write
;SensorNivel.c,414 :: 		Ow_Write(&PORTA, 0, 0xBE);                                                 //Issue command READ_SCRATCHPAD
0x0678	0xB3CBEC  	MOV.B	#190, W12
0x067A	0xEF2016  	CLR	W11
0x067C	0x202C2A  	MOV	#lo_addr(PORTA), W10
0x067E	0x07FDD7  	RCALL	_Ow_Write
;SensorNivel.c,415 :: 		Delay_us(100);
0x0680	0x205357  	MOV	#1333, W7
L_LeerDS18B2037:
0x0682	0xED200E  	DEC	W7
0x0684	0x3AFFFE  	BRA NZ	L_LeerDS18B2037
0x0686	0x000000  	NOP
;SensorNivel.c,416 :: 		temp = Ow_Read(&PORTA, 0);
0x0688	0xEF2016  	CLR	W11
0x068A	0x202C2A  	MOV	#lo_addr(PORTA), W10
0x068C	0x07FE16  	RCALL	_Ow_Read
; temp start address is: 10 (W5)
0x068E	0xFB8280  	ZE	W0, W5
;SensorNivel.c,417 :: 		temp = (Ow_Read(&PORTA, 0) << 8) + temp;
0x0690	0xEF2016  	CLR	W11
0x0692	0x202C2A  	MOV	#lo_addr(PORTA), W10
0x0694	0x07FE12  	RCALL	_Ow_Read
0x0696	0xFB8000  	ZE	W0, W0
0x0698	0xDD0048  	SL	W0, #8, W0
0x069A	0x400005  	ADD	W0, W5, W0
; temp end address is: 10 (W5)
;SensorNivel.c,419 :: 		LED1 = 0;
0x069C	0xA982C4  	BCLR	LATA4_bit, BitPos(LATA4_bit+0)
;SensorNivel.c,423 :: 		return temperaturaCrudo;
;SensorNivel.c,425 :: 		}
;SensorNivel.c,423 :: 		return temperaturaCrudo;
;SensorNivel.c,425 :: 		}
L_end_LeerDS18B20:
0x069E	0x78064F  	POP	W12
0x06A0	0x7805CF  	POP	W11
0x06A2	0x78054F  	POP	W10
0x06A4	0x060000  	RETURN
; end of _LeerDS18B20
_Ow_Reset:
0x0270	0xFA0000  	LNK	#0
;__Lib_OneWire.c,6 :: 		
;__Lib_OneWire.c,9 :: 		
0x0272	0x200010  	MOV	#1, W0
0x0274	0xDD000B  	SL	W0, W11, W0
; bit_mask_1 start address is: 4 (W2)
0x0276	0x780100  	MOV	W0, W2
;__Lib_OneWire.c,10 :: 		
0x0278	0xEA8080  	COM	W0, W1
; bit_mask_0 start address is: 6 (W3)
0x027A	0x780181  	MOV	W1, W3
;__Lib_OneWire.c,13 :: 		
0x027C	0x450062  	ADD	W10, #2, W0
0x027E	0x608810  	AND	W1, [W0], [W0]
;__Lib_OneWire.c,14 :: 		
0x0280	0x550062  	SUB	W10, #2, W0
0x0282	0x618810  	AND	W3, [W0], [W0]
; bit_mask_0 end address is: 6 (W3)
;__Lib_OneWire.c,16 :: 		
0x0284	0x07FFC3  	RCALL	_Delay_500us
;__Lib_OneWire.c,19 :: 		
0x0286	0x550062  	SUB	W10, #2, W0
0x0288	0x710810  	IOR	W2, [W0], [W0]
;__Lib_OneWire.c,21 :: 		
0x028A	0x07FFBA  	RCALL	_Delay_80us
;__Lib_OneWire.c,24 :: 		
0x028C	0x61001A  	AND	W2, [W10], W0
; bit_mask_1 end address is: 4 (W2)
0x028E	0xE10060  	CP	W0, #0
0x0290	0xEF6000  	CLR.B	W0
0x0292	0x320001  	BRA Z	L__Ow_Reset10
0x0294	0xEC6000  	INC.B	W0
L__Ow_Reset10:
; res start address is: 2 (W1)
0x0296	0xFB8080  	ZE	W0, W1
;__Lib_OneWire.c,26 :: 		
0x0298	0x07FFB9  	RCALL	_Delay_500us
;__Lib_OneWire.c,30 :: 		
0x029A	0x780001  	MOV	W1, W0
; res end address is: 2 (W1)
;__Lib_OneWire.c,31 :: 		
L_end_Ow_Reset:
0x029C	0xFA8000  	ULNK
0x029E	0x060000  	RETURN
; end of _Ow_Reset
_Delay_500us:
;__Lib_Delays.c,510 :: 		void Delay_500us()
;__Lib_Delays.c,512 :: 		Delay_us(500);
0x020C	0x21A0A7  	MOV	#6666, W7
L_Delay_500us21:
0x020E	0xED200E  	DEC	W7
0x0210	0x3AFFFE  	BRA NZ	L_Delay_500us21
0x0212	0x000000  	NOP
0x0214	0x000000  	NOP
;__Lib_Delays.c,513 :: 		}
L_end_Delay_500us:
0x0216	0x060000  	RETURN
; end of _Delay_500us
_Delay_80us:
;__Lib_Delays.c,484 :: 		void Delay_80us()
;__Lib_Delays.c,486 :: 		Delay_us(80);
0x0200	0x2042A7  	MOV	#1066, W7
L_Delay_80us19:
0x0202	0xED200E  	DEC	W7
0x0204	0x3AFFFE  	BRA NZ	L_Delay_80us19
0x0206	0x000000  	NOP
0x0208	0x000000  	NOP
;__Lib_Delays.c,487 :: 		}
L_end_Delay_80us:
0x020A	0x060000  	RETURN
; end of _Delay_80us
_Ow_Write:
0x022E	0xFA0000  	LNK	#0
;__Lib_OneWire.c,68 :: 		
;__Lib_OneWire.c,71 :: 		
0x0230	0x200010  	MOV	#1, W0
0x0232	0xDD000B  	SL	W0, W11, W0
; bit_mask_1 start address is: 4 (W2)
0x0234	0x780100  	MOV	W0, W2
;__Lib_OneWire.c,72 :: 		
; bit_mask_0 start address is: 2 (W1)
0x0236	0xEA8080  	COM	W0, W1
;__Lib_OneWire.c,75 :: 		
; i start address is: 6 (W3)
0x0238	0xEF2006  	CLR	W3
; i end address is: 6 (W3)
L_Ow_Write4:
; i start address is: 6 (W3)
; bit_mask_0 start address is: 2 (W1)
; bit_mask_0 end address is: 2 (W1)
; bit_mask_1 start address is: 4 (W2)
; bit_mask_1 end address is: 4 (W2)
0x023A	0xE11867  	CP	W3, #7
0x023C	0x3E0012  	BRA GTU	L_Ow_Write5
L__Ow_Write15:
; bit_mask_0 end address is: 2 (W1)
; bit_mask_1 end address is: 4 (W2)
;__Lib_OneWire.c,77 :: 		
; bit_mask_1 start address is: 4 (W2)
; bit_mask_0 start address is: 2 (W1)
0x023E	0xFB800C  	ZE	W12, W0
0x0240	0xDE0003  	LSR	W0, W3, W0
; j start address is: 0 (W0)
0x0242	0xFB8000  	ZE	W0, W0
;__Lib_OneWire.c,78 :: 		
; j start address is: 8 (W4)
0x0244	0x600261  	AND	W0, #1, W4
; j end address is: 0 (W0)
;__Lib_OneWire.c,81 :: 		
0x0246	0x450062  	ADD	W10, #2, W0
0x0248	0x608810  	AND	W1, [W0], [W0]
;__Lib_OneWire.c,83 :: 		
0x024A	0x550062  	SUB	W10, #2, W0
0x024C	0x608810  	AND	W1, [W0], [W0]
;__Lib_OneWire.c,85 :: 		
0x024E	0xE20008  	CP0	W4
0x0250	0x320002  	BRA Z	L_Ow_Write7
L__Ow_Write16:
; j end address is: 8 (W4)
;__Lib_OneWire.c,86 :: 		
0x0252	0x550062  	SUB	W10, #2, W0
0x0254	0x710810  	IOR	W2, [W0], [W0]
;__Lib_OneWire.c,87 :: 		
L_Ow_Write7:
;__Lib_OneWire.c,89 :: 		
0x0256	0x07FFD4  	RCALL	_Delay_80us
;__Lib_OneWire.c,92 :: 		
0x0258	0x550062  	SUB	W10, #2, W0
0x025A	0x710810  	IOR	W2, [W0], [W0]
;__Lib_OneWire.c,93 :: 		
0x025C	0x07FFE3  	RCALL	_Delay_1us
;__Lib_OneWire.c,75 :: 		
0x025E	0xEC2006  	INC	W3
;__Lib_OneWire.c,94 :: 		
; bit_mask_0 end address is: 2 (W1)
; bit_mask_1 end address is: 4 (W2)
; i end address is: 6 (W3)
0x0260	0x37FFEC  	BRA	L_Ow_Write4
L_Ow_Write5:
;__Lib_OneWire.c,96 :: 		
0x0262	0x07FFDA  	RCALL	_Delay_50us
;__Lib_OneWire.c,97 :: 		
0x0264	0x07FFD9  	RCALL	_Delay_50us
;__Lib_OneWire.c,98 :: 		
L_end_Ow_Write:
0x0266	0xFA8000  	ULNK
0x0268	0x060000  	RETURN
; end of _Ow_Write
_Delay_1us:
;__Lib_Delays.c,380 :: 		void Delay_1us()
;__Lib_Delays.c,382 :: 		Delay_us(1);
0x0224	0x2000D7  	MOV	#13, W7
L_Delay_1us11:
0x0226	0xED200E  	DEC	W7
0x0228	0x3AFFFE  	BRA NZ	L_Delay_1us11
0x022A	0x000000  	NOP
;__Lib_Delays.c,383 :: 		}
L_end_Delay_1us:
0x022C	0x060000  	RETURN
; end of _Delay_1us
_Delay_50us:
;__Lib_Delays.c,458 :: 		void Delay_50us()
;__Lib_Delays.c,460 :: 		Delay_us(50);
0x0218	0x2029A7  	MOV	#666, W7
L_Delay_50us17:
0x021A	0xED200E  	DEC	W7
0x021C	0x3AFFFE  	BRA NZ	L_Delay_50us17
0x021E	0x000000  	NOP
0x0220	0x000000  	NOP
;__Lib_Delays.c,461 :: 		}
L_end_Delay_50us:
0x0222	0x060000  	RETURN
; end of _Delay_50us
_Ow_Read:
0x02BA	0xFA0000  	LNK	#0
;__Lib_OneWire.c,34 :: 		
;__Lib_OneWire.c,37 :: 		
0x02BC	0x200010  	MOV	#1, W0
0x02BE	0xDD000B  	SL	W0, W11, W0
; bit_mask_1 start address is: 4 (W2)
0x02C0	0x780100  	MOV	W0, W2
;__Lib_OneWire.c,38 :: 		
; bit_mask_0 start address is: 2 (W1)
0x02C2	0xEA8080  	COM	W0, W1
;__Lib_OneWire.c,40 :: 		
; tmp start address is: 8 (W4)
0x02C4	0xEF2008  	CLR	W4
;__Lib_OneWire.c,43 :: 		
; i start address is: 6 (W3)
0x02C6	0xEF2006  	CLR	W3
; tmp end address is: 8 (W4)
; i end address is: 6 (W3)
L_Ow_Read0:
; i start address is: 6 (W3)
; tmp start address is: 8 (W4)
; bit_mask_0 start address is: 2 (W1)
; bit_mask_0 end address is: 2 (W1)
; bit_mask_1 start address is: 4 (W2)
; bit_mask_1 end address is: 4 (W2)
0x02C8	0xE11867  	CP	W3, #7
0x02CA	0x3E0012  	BRA GTU	L_Ow_Read1
L__Ow_Read12:
; bit_mask_0 end address is: 2 (W1)
; bit_mask_1 end address is: 4 (W2)
;__Lib_OneWire.c,46 :: 		
; bit_mask_1 start address is: 4 (W2)
; bit_mask_0 start address is: 2 (W1)
0x02CC	0x450062  	ADD	W10, #2, W0
0x02CE	0x608810  	AND	W1, [W0], [W0]
;__Lib_OneWire.c,48 :: 		
0x02D0	0x550062  	SUB	W10, #2, W0
0x02D2	0x608810  	AND	W1, [W0], [W0]
;__Lib_OneWire.c,50 :: 		
0x02D4	0x07FFA7  	RCALL	_Delay_1us
;__Lib_OneWire.c,53 :: 		
0x02D6	0x550062  	SUB	W10, #2, W0
0x02D8	0x710810  	IOR	W2, [W0], [W0]
;__Lib_OneWire.c,55 :: 		
0x02DA	0x07FFA4  	RCALL	_Delay_1us
;__Lib_OneWire.c,57 :: 		
0x02DC	0x61001A  	AND	W2, [W10], W0
0x02DE	0x320004  	BRA Z	L__Ow_Read8
L__Ow_Read13:
;__Lib_OneWire.c,58 :: 		
0x02E0	0x200010  	MOV	#1, W0
0x02E2	0xDD0003  	SL	W0, W3, W0
0x02E4	0x720200  	IOR	W4, W0, W4
; tmp end address is: 8 (W4)
0x02E6	0x370000  	BRA	L_Ow_Read3
L__Ow_Read8:
;__Lib_OneWire.c,57 :: 		
;__Lib_OneWire.c,58 :: 		
L_Ow_Read3:
;__Lib_OneWire.c,60 :: 		
; tmp start address is: 8 (W4)
0x02E8	0x07FF97  	RCALL	_Delay_50us
;__Lib_OneWire.c,61 :: 		
0x02EA	0x07FF96  	RCALL	_Delay_50us
;__Lib_OneWire.c,43 :: 		
0x02EC	0xEC2006  	INC	W3
;__Lib_OneWire.c,63 :: 		
; bit_mask_0 end address is: 2 (W1)
; bit_mask_1 end address is: 4 (W2)
; i end address is: 6 (W3)
0x02EE	0x37FFEC  	BRA	L_Ow_Read0
L_Ow_Read1:
;__Lib_OneWire.c,64 :: 		
0x02F0	0x784004  	MOV.B	W4, W0
; tmp end address is: 8 (W4)
;__Lib_OneWire.c,65 :: 		
L_end_Ow_Read:
0x02F2	0xFA8000  	ULNK
0x02F4	0x060000  	RETURN
; end of _Ow_Read
_CapturarMuestras:
;SensorNivel.c,466 :: 		void CapturarMuestras(){
;SensorNivel.c,468 :: 		LED1 = 1;
0x06A6	0xA882C4  	BSET	LATA4_bit, BitPos(LATA4_bit+0)
;SensorNivel.c,471 :: 		bm = 0;
0x06A8	0x2083D1  	MOV	#lo_addr(_bm), W1
0x06AA	0xEF2000  	CLR	W0
0x06AC	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,472 :: 		contPulsos = 0;                                                            //Limpia la variable del contador de pulsos
0x06AE	0xEF2000  	CLR	W0
0x06B0	0x8842B0  	MOV	W0, _contPulsos
;SensorNivel.c,473 :: 		RB2_bit = 0;                                                               //Limpia el pin que produce los pulsos de exitacion del transductor
0x06B2	0xA942CA  	BCLR	RB2_bit, BitPos(RB2_bit+0)
;SensorNivel.c,474 :: 		T1CON.TON = 0;                                                             //Apaga el TMR1
0x06B4	0xA9E105  	BCLR	T1CON, #15
;SensorNivel.c,475 :: 		TMR2 = 0;                                                                  //Encera el TMR2
0x06B6	0xEF2106  	CLR	TMR2
;SensorNivel.c,476 :: 		T2CON.TON = 1;                                                             //Enciende el TMR2
0x06B8	0xA8E111  	BSET	T2CON, #15
;SensorNivel.c,477 :: 		i = 0;                                                                     //Limpia las variables asociadas al almacenamiento de la senal muestreada
0x06BA	0xEF2000  	CLR	W0
0x06BC	0x8858A0  	MOV	W0, _i
;SensorNivel.c,478 :: 		while(bm!=1);
L_CapturarMuestras47:
0x06BE	0x2083D0  	MOV	#lo_addr(_bm), W0
0x06C0	0x784010  	MOV.B	[W0], W0
0x06C2	0xE10461  	CP.B	W0, #1
0x06C4	0x320001  	BRA Z	L_CapturarMuestras48
L__CapturarMuestras124:
0x06C6	0x37FFFB  	BRA	L_CapturarMuestras47
L_CapturarMuestras48:
;SensorNivel.c,480 :: 		LED1 = 0;
0x06C8	0xA982C4  	BCLR	LATA4_bit, BitPos(LATA4_bit+0)
;SensorNivel.c,482 :: 		}
L_end_CapturarMuestras:
0x06CA	0x060000  	RETURN
; end of _CapturarMuestras
_ProbarMuestreo:
;SensorNivel.c,449 :: 		void ProbarMuestreo(){
;SensorNivel.c,451 :: 		LED1 = 1;
0x051C	0xA882C4  	BSET	LATA4_bit, BitPos(LATA4_bit+0)
;SensorNivel.c,453 :: 		TMR1 = 0;                                                                  //Encera el TMR1
0x051E	0xEF2100  	CLR	TMR1
;SensorNivel.c,454 :: 		T1CON.TON = 1;                                                             //Enciende el TMR1
0x0520	0xA8E105  	BSET	T1CON, #15
;SensorNivel.c,455 :: 		bm = 0;
0x0522	0x2083D1  	MOV	#lo_addr(_bm), W1
0x0524	0xEF2000  	CLR	W0
0x0526	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,456 :: 		i = 0;
0x0528	0xEF2000  	CLR	W0
0x052A	0x8858A0  	MOV	W0, _i
;SensorNivel.c,457 :: 		while(bm!=1);
L_ProbarMuestreo45:
0x052C	0x2083D0  	MOV	#lo_addr(_bm), W0
0x052E	0x784010  	MOV.B	[W0], W0
0x0530	0xE10461  	CP.B	W0, #1
0x0532	0x320001  	BRA Z	L_ProbarMuestreo46
L__ProbarMuestreo122:
0x0534	0x37FFFB  	BRA	L_ProbarMuestreo45
L_ProbarMuestreo46:
;SensorNivel.c,459 :: 		LED1 = 0;
0x0536	0xA982C4  	BCLR	LATA4_bit, BitPos(LATA4_bit+0)
;SensorNivel.c,461 :: 		}
L_end_ProbarMuestreo:
0x0538	0x060000  	RETURN
; end of _ProbarMuestreo
_ProbarEnvioTrama:
;SensorNivel.c,429 :: 		void ProbarEnvioTrama(){
;SensorNivel.c,431 :: 		LED1 = 1;
0x0404	0xA882C4  	BSET	LATA4_bit, BitPos(LATA4_bit+0)
;SensorNivel.c,433 :: 		i = 0;
0x0406	0xEF2000  	CLR	W0
0x0408	0x8858A0  	MOV	W0, _i
;SensorNivel.c,434 :: 		while (i<numeroMuestras){
L_ProbarEnvioTrama39:
0x040A	0x8058A1  	MOV	_i, W1
0x040C	0x2015E0  	MOV	#350, W0
0x040E	0xE10800  	CP	W1, W0
0x0410	0x31000A  	BRA GEU	L_ProbarEnvioTrama40
L__ProbarEnvioTrama120:
;SensorNivel.c,435 :: 		vectorMuestras[j] = 500;                                           //Almacena el valor actual de la conversion del ADC en el vectorMuestras
0x0412	0x8042A0  	MOV	_j, W0
0x0414	0xDD00C1  	SL	W0, #1, W1
0x0416	0x208580  	MOV	#lo_addr(_vectorMuestras), W0
0x0418	0x400081  	ADD	W0, W1, W1
0x041A	0x201F40  	MOV	#500, W0
0x041C	0x780880  	MOV	W0, [W1]
;SensorNivel.c,436 :: 		i++;                                                                    //Aumenta en 1 el subindice del vector de Muestras
0x041E	0x200011  	MOV	#1, W1
0x0420	0x20B140  	MOV	#lo_addr(_i), W0
0x0422	0x408810  	ADD	W1, [W0], [W0]
;SensorNivel.c,437 :: 		}
0x0424	0x37FFF2  	BRA	L_ProbarEnvioTrama39
L_ProbarEnvioTrama40:
;SensorNivel.c,439 :: 		LED1 = 0;
0x0426	0xA982C4  	BCLR	LATA4_bit, BitPos(LATA4_bit+0)
;SensorNivel.c,440 :: 		delay_ms(200);
0x0428	0x200298  	MOV	#41, W8
0x042A	0x2B0B77  	MOV	#45239, W7
L_ProbarEnvioTrama41:
0x042C	0xED200E  	DEC	W7
0x042E	0x3AFFFE  	BRA NZ	L_ProbarEnvioTrama41
0x0430	0xED2010  	DEC	W8
0x0432	0x3AFFFC  	BRA NZ	L_ProbarEnvioTrama41
;SensorNivel.c,441 :: 		LED1 = 1;
0x0434	0xA882C4  	BSET	LATA4_bit, BitPos(LATA4_bit+0)
;SensorNivel.c,442 :: 		delay_ms(200);
0x0436	0x200298  	MOV	#41, W8
0x0438	0x2B0B77  	MOV	#45239, W7
L_ProbarEnvioTrama43:
0x043A	0xED200E  	DEC	W7
0x043C	0x3AFFFE  	BRA NZ	L_ProbarEnvioTrama43
0x043E	0xED2010  	DEC	W8
0x0440	0x3AFFFC  	BRA NZ	L_ProbarEnvioTrama43
;SensorNivel.c,443 :: 		LED1 = 0;
0x0442	0xA982C4  	BCLR	LATA4_bit, BitPos(LATA4_bit+0)
;SensorNivel.c,445 :: 		}
L_end_ProbarEnvioTrama:
0x0444	0x060000  	RETURN
; end of _ProbarEnvioTrama
_EnviarTramaRS485:
0x04A8	0xFA0002  	LNK	#2
;rs485.c,19 :: 		void EnviarTramaRS485(unsigned char puertoUART, unsigned char *cabecera, unsigned char *payload){
;rs485.c,31 :: 		ptrnumDatos = (unsigned char *) & numDatos;
0x04AA	0x781F8A  	PUSH	W10
0x04AC	0x470160  	ADD	W14, #0, W2
; ptrnumDatos start address is: 6 (W3)
0x04AE	0x780182  	MOV	W2, W3
;rs485.c,34 :: 		direccion = cabecera[0];
; direccion start address is: 8 (W4)
0x04B0	0x78421B  	MOV.B	[W11], W4
;rs485.c,35 :: 		funcion = cabecera[1];
0x04B2	0x458061  	ADD	W11, #1, W0
; funcion start address is: 10 (W5)
0x04B4	0x784290  	MOV.B	[W0], W5
;rs485.c,36 :: 		subfuncion = cabecera[2];
0x04B6	0x458062  	ADD	W11, #2, W0
; subfuncion start address is: 12 (W6)
0x04B8	0x784310  	MOV.B	[W0], W6
;rs485.c,37 :: 		lsbNumDatos = cabecera[3];
0x04BA	0x4580E3  	ADD	W11, #3, W1
; lsbNumDatos start address is: 14 (W7)
0x04BC	0x784391  	MOV.B	[W1], W7
;rs485.c,38 :: 		msbNumDatos = cabecera[4];
0x04BE	0x458064  	ADD	W11, #4, W0
; msbNumDatos start address is: 16 (W8)
0x04C0	0x784410  	MOV.B	[W0], W8
;rs485.c,41 :: 		*(ptrnumDatos) = lsbNumDatos;
0x04C2	0x784911  	MOV.B	[W1], [W2]
;rs485.c,42 :: 		*(ptrnumDatos+1) = msbNumDatos;
0x04C4	0x418061  	ADD	W3, #1, W0
; ptrnumDatos end address is: 6 (W3)
0x04C6	0x784808  	MOV.B	W8, [W0]
;rs485.c,44 :: 		if (puertoUART == 1){
0x04C8	0xE15461  	CP.B	W10, #1
0x04CA	0x3A0025  	BRA NZ	L_EnviarTramaRS4850
L__EnviarTramaRS48596:
;rs485.c,45 :: 		MSRS485 = 1;                                                            //Establece el Max485 en modo escritura
0x04CC	0xA8A2CC  	BSET	MSRS485, BitPos(MSRS485+0)
;rs485.c,46 :: 		UART1_Write(0x3A);                                                      //Envia la cabecera de la trama
0x04CE	0x2003AA  	MOV	#58, W10
0x04D0	0x07FEED  	RCALL	_UART1_Write
;rs485.c,47 :: 		UART1_Write(direccion);                                                 //Envia la direccion del destinatario
0x04D2	0xFB8504  	ZE	W4, W10
; direccion end address is: 8 (W4)
0x04D4	0x07FEEB  	RCALL	_UART1_Write
;rs485.c,48 :: 		UART1_Write(funcion);                                                   //Envia el codigo de la funcion
0x04D6	0xFB8505  	ZE	W5, W10
; funcion end address is: 10 (W5)
0x04D8	0x07FEE9  	RCALL	_UART1_Write
;rs485.c,49 :: 		UART1_Write(subfuncion);                                                //Envia el codigo de la subfuncion
0x04DA	0xFB8506  	ZE	W6, W10
; subfuncion end address is: 12 (W6)
0x04DC	0x07FEE7  	RCALL	_UART1_Write
;rs485.c,50 :: 		UART1_Write(lsbNumDatos);                                               //Envia el LSB del numero de datos
0x04DE	0xFB8507  	ZE	W7, W10
; lsbNumDatos end address is: 14 (W7)
0x04E0	0x07FEE5  	RCALL	_UART1_Write
;rs485.c,51 :: 		UART1_Write(msbNumDatos);                                               //Envia el MSB del numero de datos
0x04E2	0xFB8508  	ZE	W8, W10
; msbNumDatos end address is: 16 (W8)
0x04E4	0x07FEE3  	RCALL	_UART1_Write
;rs485.c,52 :: 		for (iDatos=0;iDatos<numDatos;iDatos++){                                //Envia la carga util de datos
; iDatos start address is: 2 (W1)
0x04E6	0xEF2002  	CLR	W1
; iDatos end address is: 2 (W1)
L_EnviarTramaRS4851:
; iDatos start address is: 2 (W1)
0x04E8	0x470060  	ADD	W14, #0, W0
0x04EA	0xE10810  	CP	W1, [W0]
0x04EC	0x310007  	BRA GEU	L_EnviarTramaRS4852
L__EnviarTramaRS48597:
;rs485.c,53 :: 		UART1_Write(payload[iDatos]);
0x04EE	0x460001  	ADD	W12, W1, W0
0x04F0	0x781F8A  	PUSH	W10
0x04F2	0xFB8510  	ZE	[W0], W10
0x04F4	0x07FEDB  	RCALL	_UART1_Write
0x04F6	0x78054F  	POP	W10
;rs485.c,52 :: 		for (iDatos=0;iDatos<numDatos;iDatos++){                                //Envia la carga util de datos
0x04F8	0xEC2002  	INC	W1
;rs485.c,54 :: 		}
; iDatos end address is: 2 (W1)
0x04FA	0x37FFF6  	BRA	L_EnviarTramaRS4851
L_EnviarTramaRS4852:
;rs485.c,55 :: 		UART1_Write(0x0D);                                                      //Envia el primer delimitador de final de la trama
0x04FC	0x781F8A  	PUSH	W10
0x04FE	0x2000DA  	MOV	#13, W10
0x0500	0x07FED5  	RCALL	_UART1_Write
;rs485.c,56 :: 		UART1_Write(0x0A);                                                      //Envia el segundo delimitador de final de la trama
0x0502	0x2000AA  	MOV	#10, W10
0x0504	0x07FED3  	RCALL	_UART1_Write
;rs485.c,57 :: 		UART1_Write(0x00);                                                      //Envia un byte adicional
0x0506	0xEF2014  	CLR	W10
0x0508	0x07FED1  	RCALL	_UART1_Write
0x050A	0x78054F  	POP	W10
;rs485.c,58 :: 		while(UART1_Tx_Idle()==0);                                              //Espera hasta que se haya terminado de enviar todo el dato por UART antes de continuar
L_EnviarTramaRS4854:
0x050C	0x07FEC9  	RCALL	_UART1_Tx_Idle
0x050E	0xE10060  	CP	W0, #0
0x0510	0x3A0001  	BRA NZ	L_EnviarTramaRS4855
L__EnviarTramaRS48598:
0x0512	0x37FFFC  	BRA	L_EnviarTramaRS4854
L_EnviarTramaRS4855:
;rs485.c,59 :: 		MSRS485 = 0;                                                           //Establece el Max485 en modo lectura
0x0514	0xA9A2CC  	BCLR	MSRS485, BitPos(MSRS485+0)
;rs485.c,60 :: 		}
L_EnviarTramaRS4850:
;rs485.c,62 :: 		}
L_end_EnviarTramaRS485:
0x0516	0x78054F  	POP	W10
0x0518	0xFA8000  	ULNK
0x051A	0x060000  	RETURN
; end of _EnviarTramaRS485
_UART1_Write:
0x02AC	0xFA0000  	LNK	#0
;__Lib_UART_1_p24_p33.c,49 :: 		
;__Lib_UART_1_p24_p33.c,50 :: 		
L_UART1_Write0:
0x02AE	0xAF0223  	BTSC	U1STA, #8
0x02B0	0x370001  	BRA	L_UART1_Write1
0x02B2	0x37FFFD  	BRA	L_UART1_Write0
L_UART1_Write1:
;__Lib_UART_1_p24_p33.c,51 :: 		
0x02B4	0x88112A  	MOV	W10, U1TXREG
;__Lib_UART_1_p24_p33.c,52 :: 		
L_end_UART1_Write:
0x02B6	0xFA8000  	ULNK
0x02B8	0x060000  	RETURN
; end of _UART1_Write
_UART1_Tx_Idle:
0x02A0	0xFA0000  	LNK	#0
;__Lib_UART_1_p24_p33.c,112 :: 		
;__Lib_UART_1_p24_p33.c,113 :: 		
0x02A2	0xEF2000  	CLR	W0
0x02A4	0xAF0223  	BTSC	U1STA, #8
0x02A6	0xEC2000  	INC	W0
;__Lib_UART_1_p24_p33.c,114 :: 		
L_end_UART1_Tx_Idle:
0x02A8	0xFA8000  	ULNK
0x02AA	0x060000  	RETURN
; end of _UART1_Tx_Idle
_EnviarTramaInt:
0x0446	0xFA02C4  	LNK	#708
;SensorNivel.c,598 :: 		void EnviarTramaInt(unsigned char* cabecera, unsigned int temperatura){
;SensorNivel.c,606 :: 		ptrValorInt = (unsigned char *) & valorInt;
0x0448	0x781F8C  	PUSH	W12
0x044A	0x202C20  	MOV	#706, W0
0x044C	0x470000  	ADD	W14, W0, W0
; ptrValorInt start address is: 8 (W4)
0x044E	0x780200  	MOV	W0, W4
;SensorNivel.c,607 :: 		ptrTemperatura = (unsigned char *) & temperatura;
0x0450	0x200160  	MOV	#lo_addr(W11), W0
; ptrTemperatura start address is: 6 (W3)
0x0452	0x780180  	MOV	W0, W3
;SensorNivel.c,610 :: 		for (j=0;j<numeroMuestras;j++){
0x0454	0xEF2000  	CLR	W0
0x0456	0x8842A0  	MOV	W0, _j
; ptrTemperatura end address is: 6 (W3)
L_EnviarTramaInt49:
; ptrTemperatura start address is: 6 (W3)
; ptrValorInt start address is: 8 (W4)
; ptrValorInt end address is: 8 (W4)
0x0458	0x8042A1  	MOV	_j, W1
0x045A	0x2015E0  	MOV	#350, W0
0x045C	0xE10800  	CP	W1, W0
0x045E	0x310013  	BRA GEU	L_EnviarTramaInt50
L__EnviarTramaInt126:
; ptrValorInt end address is: 8 (W4)
;SensorNivel.c,611 :: 		valorInt = vectorMuestras[j];
; ptrValorInt start address is: 8 (W4)
0x0460	0x8042A0  	MOV	_j, W0
0x0462	0xDD0141  	SL	W0, #1, W2
0x0464	0x208580  	MOV	#lo_addr(_vectorMuestras), W0
0x0466	0x400002  	ADD	W0, W2, W0
0x0468	0x780010  	MOV	[W0], W0
0x046A	0x9AA710  	MOV	W0, [W14+706]
;SensorNivel.c,612 :: 		tramaShort[j*2] = *(ptrValorInt);
0x046C	0x4700E0  	ADD	W14, #0, W1
0x046E	0x408002  	ADD	W1, W2, W0
0x0470	0x784814  	MOV.B	[W4], [W0]
;SensorNivel.c,613 :: 		tramaShort[(j*2)+1] = *(ptrValorInt+1);
0x0472	0x8042A0  	MOV	_j, W0
0x0474	0xDD0041  	SL	W0, #1, W0
0x0476	0xEC2000  	INC	W0
0x0478	0x408080  	ADD	W1, W0, W1
0x047A	0x420061  	ADD	W4, #1, W0
0x047C	0x784890  	MOV.B	[W0], [W1]
;SensorNivel.c,610 :: 		for (j=0;j<numeroMuestras;j++){
0x047E	0x200011  	MOV	#1, W1
0x0480	0x208540  	MOV	#lo_addr(_j), W0
0x0482	0x408810  	ADD	W1, [W0], [W0]
;SensorNivel.c,614 :: 		}
; ptrValorInt end address is: 8 (W4)
0x0484	0x37FFE9  	BRA	L_EnviarTramaInt49
L_EnviarTramaInt50:
;SensorNivel.c,617 :: 		tramaShort[700] = *(ptrTemperatura);
0x0486	0x470160  	ADD	W14, #0, W2
0x0488	0x202BC0  	MOV	#700, W0
0x048A	0x410000  	ADD	W2, W0, W0
0x048C	0x784813  	MOV.B	[W3], [W0]
;SensorNivel.c,618 :: 		tramaShort[701] = *(ptrTemperatura+1);
0x048E	0x202BD0  	MOV	#701, W0
0x0490	0x410080  	ADD	W2, W0, W1
0x0492	0x418061  	ADD	W3, #1, W0
; ptrTemperatura end address is: 6 (W3)
0x0494	0x784890  	MOV.B	[W0], [W1]
;SensorNivel.c,621 :: 		EnviarTramaRS485(1, cabecera, tramaShort);
0x0496	0xBE9F8A  	PUSH.D	W10
0x0498	0x780602  	MOV	W2, W12
0x049A	0x78058A  	MOV	W10, W11
0x049C	0xB3C01A  	MOV.B	#1, W10
0x049E	0x070004  	RCALL	_EnviarTramaRS485
0x04A0	0xBE054F  	POP.D	W10
;SensorNivel.c,623 :: 		}
L_end_EnviarTramaInt:
0x04A2	0x78064F  	POP	W12
0x04A4	0xFA8000  	ULNK
0x04A6	0x060000  	RETURN
; end of _EnviarTramaInt
_GenerarTramaPrueba:
0x03C4	0xFA0204  	LNK	#516
;SensorNivel.c,380 :: 		void GenerarTramaPrueba(unsigned int numDatosPrueba, unsigned char *cabeceraPrueba){
;SensorNivel.c,382 :: 		unsigned int contadorMuestras = 0;
0x03C6	0x781F8C  	PUSH	W12
; contadorMuestras start address is: 4 (W2)
0x03C8	0xEF2004  	CLR	W2
;SensorNivel.c,386 :: 		for (j=0;j<numDatosPrueba;j++){
0x03CA	0xEF2000  	CLR	W0
0x03CC	0x8842A0  	MOV	W0, _j
; contadorMuestras end address is: 4 (W2)
L_GenerarTramaPrueba31:
; contadorMuestras start address is: 4 (W2)
0x03CE	0x208540  	MOV	#lo_addr(_j), W0
0x03D0	0xE15010  	CP	W10, [W0]
0x03D2	0x36000F  	BRA LEU	L_GenerarTramaPrueba32
L__GenerarTramaPrueba116:
;SensorNivel.c,387 :: 		outputPyloadRS485[j] = contadorMuestras;
0x03D4	0x4700E0  	ADD	W14, #0, W1
0x03D6	0x208540  	MOV	#lo_addr(_j), W0
0x03D8	0x408010  	ADD	W1, [W0], W0
0x03DA	0x784802  	MOV.B	W2, [W0]
;SensorNivel.c,388 :: 		contadorMuestras++;
0x03DC	0x4100E1  	ADD	W2, #1, W1
0x03DE	0x780101  	MOV	W1, W2
;SensorNivel.c,389 :: 		if (contadorMuestras>255) {
0x03E0	0x200FF0  	MOV	#255, W0
0x03E2	0xE10800  	CP	W1, W0
0x03E4	0x360002  	BRA LEU	L__GenerarTramaPrueba81
L__GenerarTramaPrueba117:
;SensorNivel.c,390 :: 		contadorMuestras = 0;
0x03E6	0xEF2004  	CLR	W2
; contadorMuestras end address is: 4 (W2)
;SensorNivel.c,391 :: 		}
0x03E8	0x370000  	BRA	L_GenerarTramaPrueba34
L__GenerarTramaPrueba81:
;SensorNivel.c,389 :: 		if (contadorMuestras>255) {
;SensorNivel.c,391 :: 		}
L_GenerarTramaPrueba34:
;SensorNivel.c,386 :: 		for (j=0;j<numDatosPrueba;j++){
; contadorMuestras start address is: 4 (W2)
0x03EA	0x200011  	MOV	#1, W1
0x03EC	0x208540  	MOV	#lo_addr(_j), W0
0x03EE	0x408810  	ADD	W1, [W0], [W0]
;SensorNivel.c,392 :: 		}
; contadorMuestras end address is: 4 (W2)
0x03F0	0x37FFEE  	BRA	L_GenerarTramaPrueba31
L_GenerarTramaPrueba32:
;SensorNivel.c,394 :: 		EnviarTramaRS485(1, cabeceraPrueba, outputPyloadRS485);
0x03F2	0x470060  	ADD	W14, #0, W0
0x03F4	0x781F8A  	PUSH	W10
0x03F6	0x780600  	MOV	W0, W12
0x03F8	0xB3C01A  	MOV.B	#1, W10
0x03FA	0x070056  	RCALL	_EnviarTramaRS485
0x03FC	0x78054F  	POP	W10
;SensorNivel.c,396 :: 		}
L_end_GenerarTramaPrueba:
0x03FE	0x78064F  	POP	W12
0x0400	0xFA8000  	ULNK
0x0402	0x060000  	RETURN
; end of _GenerarTramaPrueba
0x0BD8	0x208001  	MOV	#lo_addr(_tramaPruebaRS485), W1
0x0BDA	0x28BCE0  	MOV	#35790, W0
0x0BDC	0x090004  	REPEAT	#4
0x0BDE	0x7818B0  	MOV	[W0++], [W1++]
0x0BE0	0x060000  	RETURN
_UART1Interrupt:
0x0AC6	0xF80034  	PUSH	PSVPAG
0x0AC8	0xF80036  	PUSH	RCOUNT
0x0ACA	0x781F80  	PUSH	W0
0x0ACC	0x200020  	MOV	#2, W0
0x0ACE	0x09000C  	REPEAT	#12
0x0AD0	0x781FB0  	PUSH	[W0++]
;SensorNivel.c,701 :: 		void UART1Interrupt() iv IVT_ADDR_U1RXINTERRUPT {
;SensorNivel.c,703 :: 		U1RXIF_bit = 0;                                                            //Limpia la bandera de interrupcion de UARTRX
0x0AD2	0xA96085  	BCLR	U1RXIF_bit, BitPos(U1RXIF_bit+0)
;SensorNivel.c,704 :: 		byteRS485 = UART1_Read();                                                  //Lee el byte recibido
0x0AD4	0x07FDFB  	RCALL	_UART1_Read
0x0AD6	0x208181  	MOV	#lo_addr(_byteRS485), W1
0x0AD8	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,707 :: 		if (banRSI==2){
0x0ADA	0x2080A0  	MOV	#lo_addr(_banRSI), W0
0x0ADC	0x784010  	MOV.B	[W0], W0
0x0ADE	0xE10462  	CP.B	W0, #2
0x0AE0	0x3A0013  	BRA NZ	L_UART1Interrupt61
L__UART1Interrupt136:
;SensorNivel.c,709 :: 		if (i_rs485<(numDatosRS485)){
0x0AE2	0x8040D1  	MOV	_i_rs485, W1
0x0AE4	0x208160  	MOV	#lo_addr(_numDatosRS485), W0
0x0AE6	0xE10810  	CP	W1, [W0]
0x0AE8	0x310009  	BRA GEU	L_UART1Interrupt62
L__UART1Interrupt137:
;SensorNivel.c,710 :: 		solicitudPyloadRS485[i_rs485] = byteRS485;
0x0AEA	0x208261  	MOV	#lo_addr(_solicitudPyloadRS485), W1
0x0AEC	0x2081A0  	MOV	#lo_addr(_i_rs485), W0
0x0AEE	0x408090  	ADD	W1, [W0], W1
0x0AF0	0x208180  	MOV	#lo_addr(_byteRS485), W0
0x0AF2	0x784890  	MOV.B	[W0], [W1]
;SensorNivel.c,711 :: 		i_rs485++;
0x0AF4	0x200011  	MOV	#1, W1
0x0AF6	0x2081A0  	MOV	#lo_addr(_i_rs485), W0
0x0AF8	0x408810  	ADD	W1, [W0], [W0]
;SensorNivel.c,712 :: 		} else {
0x0AFA	0x370006  	BRA	L_UART1Interrupt63
L_UART1Interrupt62:
;SensorNivel.c,713 :: 		banRSI = 0;                                                      //Limpia la bandera de inicio de trama
0x0AFC	0x2080A1  	MOV	#lo_addr(_banRSI), W1
0x0AFE	0xEF2000  	CLR	W0
0x0B00	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,714 :: 		banRSC = 1;                                                      //Activa la bandera de trama completa
0x0B02	0x2080B1  	MOV	#lo_addr(_banRSC), W1
0x0B04	0xB3C010  	MOV.B	#1, W0
0x0B06	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,715 :: 		}
L_UART1Interrupt63:
;SensorNivel.c,716 :: 		}
L_UART1Interrupt61:
;SensorNivel.c,719 :: 		if ((banRSI==0)&&(banRSC==0)){
0x0B08	0x2080A0  	MOV	#lo_addr(_banRSI), W0
0x0B0A	0x784010  	MOV.B	[W0], W0
0x0B0C	0xE10460  	CP.B	W0, #0
0x0B0E	0x3A000E  	BRA NZ	L__UART1Interrupt87
L__UART1Interrupt138:
0x0B10	0x2080B0  	MOV	#lo_addr(_banRSC), W0
0x0B12	0x784010  	MOV.B	[W0], W0
0x0B14	0xE10460  	CP.B	W0, #0
0x0B16	0x3A000A  	BRA NZ	L__UART1Interrupt86
L__UART1Interrupt139:
L__UART1Interrupt85:
;SensorNivel.c,720 :: 		if (byteRS485==0x3A){                                                 //Verifica si el primer byte recibido sea el byte de inicio de trama
0x0B18	0x208180  	MOV	#lo_addr(_byteRS485), W0
0x0B1A	0x784090  	MOV.B	[W0], W1
0x0B1C	0xB3C3A0  	MOV.B	#58, W0
0x0B1E	0xE10C00  	CP.B	W1, W0
0x0B20	0x3A0005  	BRA NZ	L_UART1Interrupt67
L__UART1Interrupt140:
;SensorNivel.c,721 :: 		banRSI = 1;
0x0B22	0x2080A1  	MOV	#lo_addr(_banRSI), W1
0x0B24	0xB3C010  	MOV.B	#1, W0
0x0B26	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,722 :: 		i_rs485 = 0;
0x0B28	0xEF2000  	CLR	W0
0x0B2A	0x8840D0  	MOV	W0, _i_rs485
;SensorNivel.c,723 :: 		}
L_UART1Interrupt67:
;SensorNivel.c,719 :: 		if ((banRSI==0)&&(banRSC==0)){
L__UART1Interrupt87:
L__UART1Interrupt86:
;SensorNivel.c,725 :: 		if ((banRSI==1)&&(byteRS485!=0x3A)&&(i_rs485<5)){
0x0B2C	0x2080A0  	MOV	#lo_addr(_banRSI), W0
0x0B2E	0x784010  	MOV.B	[W0], W0
0x0B30	0xE10461  	CP.B	W0, #1
0x0B32	0x3A0010  	BRA NZ	L__UART1Interrupt90
L__UART1Interrupt141:
0x0B34	0x208180  	MOV	#lo_addr(_byteRS485), W0
0x0B36	0x784090  	MOV.B	[W0], W1
0x0B38	0xB3C3A0  	MOV.B	#58, W0
0x0B3A	0xE10C00  	CP.B	W1, W0
0x0B3C	0x32000B  	BRA Z	L__UART1Interrupt89
L__UART1Interrupt142:
0x0B3E	0x8040D0  	MOV	_i_rs485, W0
0x0B40	0xE10065  	CP	W0, #5
0x0B42	0x310008  	BRA GEU	L__UART1Interrupt88
L__UART1Interrupt143:
L__UART1Interrupt84:
;SensorNivel.c,726 :: 		solicitudCabeceraRS485[i_rs485] = byteRS485;                          //Recupera los datos de cabecera de la trama UART: [Direccion, Funcion, Subfuncion, NumeroDatos]
0x0B44	0x208381  	MOV	#lo_addr(_solicitudCabeceraRS485), W1
0x0B46	0x2081A0  	MOV	#lo_addr(_i_rs485), W0
0x0B48	0x408090  	ADD	W1, [W0], W1
0x0B4A	0x208180  	MOV	#lo_addr(_byteRS485), W0
0x0B4C	0x784890  	MOV.B	[W0], [W1]
;SensorNivel.c,727 :: 		i_rs485++;
0x0B4E	0x200011  	MOV	#1, W1
0x0B50	0x2081A0  	MOV	#lo_addr(_i_rs485), W0
0x0B52	0x408810  	ADD	W1, [W0], [W0]
;SensorNivel.c,725 :: 		if ((banRSI==1)&&(byteRS485!=0x3A)&&(i_rs485<5)){
L__UART1Interrupt90:
L__UART1Interrupt89:
L__UART1Interrupt88:
;SensorNivel.c,729 :: 		if ((banRSI==1)&&(i_rs485==5)){
0x0B54	0x2080A0  	MOV	#lo_addr(_banRSI), W0
0x0B56	0x784010  	MOV.B	[W0], W0
0x0B58	0xE10461  	CP.B	W0, #1
0x0B5A	0x3A0022  	BRA NZ	L__UART1Interrupt94
L__UART1Interrupt144:
0x0B5C	0x8040D0  	MOV	_i_rs485, W0
0x0B5E	0xE10065  	CP	W0, #5
0x0B60	0x3A001F  	BRA NZ	L__UART1Interrupt93
L__UART1Interrupt145:
L__UART1Interrupt83:
;SensorNivel.c,731 :: 		if ((solicitudCabeceraRS485[0]==IDNODO)||(solicitudCabeceraRS485[0]==255)){
0x0B62	0x208380  	MOV	#lo_addr(_solicitudCabeceraRS485), W0
0x0B64	0x784010  	MOV.B	[W0], W0
0x0B66	0xE10462  	CP.B	W0, #2
0x0B68	0x320006  	BRA Z	L__UART1Interrupt92
L__UART1Interrupt146:
0x0B6A	0x208380  	MOV	#lo_addr(_solicitudCabeceraRS485), W0
0x0B6C	0x784090  	MOV.B	[W0], W1
0x0B6E	0xB3CFF0  	MOV.B	#255, W0
0x0B70	0xE10C00  	CP.B	W1, W0
0x0B72	0x320001  	BRA Z	L__UART1Interrupt91
L__UART1Interrupt147:
0x0B74	0x37000D  	BRA	L_UART1Interrupt76
L__UART1Interrupt92:
L__UART1Interrupt91:
;SensorNivel.c,733 :: 		*(ptrNumDatosRS485) = solicitudCabeceraRS485[3];
0x0B76	0x2083B1  	MOV	#lo_addr(_solicitudCabeceraRS485+3), W1
0x0B78	0x804120  	MOV	_ptrNumDatosRS485, W0
0x0B7A	0x784811  	MOV.B	[W1], [W0]
;SensorNivel.c,734 :: 		*(ptrNumDatosRS485+1) = solicitudCabeceraRS485[4];
0x0B7C	0x804120  	MOV	_ptrNumDatosRS485, W0
0x0B7E	0x4000E1  	ADD	W0, #1, W1
0x0B80	0x2083C0  	MOV	#lo_addr(_solicitudCabeceraRS485+4), W0
0x0B82	0x784890  	MOV.B	[W0], [W1]
;SensorNivel.c,735 :: 		i_rs485 = 0;                                                     //Encera el subindice para almacenar el payload
0x0B84	0xEF2000  	CLR	W0
0x0B86	0x8840D0  	MOV	W0, _i_rs485
;SensorNivel.c,736 :: 		banRSI = 2;                                                      //Cambia el valor de la bandera para salir del bucle
0x0B88	0x2080A1  	MOV	#lo_addr(_banRSI), W1
0x0B8A	0xB3C020  	MOV.B	#2, W0
0x0B8C	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,737 :: 		} else {
0x0B8E	0x370008  	BRA	L_UART1Interrupt77
L_UART1Interrupt76:
;SensorNivel.c,738 :: 		banRSI = 0;
0x0B90	0x2080A1  	MOV	#lo_addr(_banRSI), W1
0x0B92	0xEF2000  	CLR	W0
0x0B94	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,739 :: 		banRSC = 0;
0x0B96	0x2080B1  	MOV	#lo_addr(_banRSC), W1
0x0B98	0xEF2000  	CLR	W0
0x0B9A	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,740 :: 		i_rs485 = 0;
0x0B9C	0xEF2000  	CLR	W0
0x0B9E	0x8840D0  	MOV	W0, _i_rs485
;SensorNivel.c,741 :: 		}
L_UART1Interrupt77:
;SensorNivel.c,729 :: 		if ((banRSI==1)&&(i_rs485==5)){
L__UART1Interrupt94:
L__UART1Interrupt93:
;SensorNivel.c,745 :: 		if (banRSC==1){
0x0BA0	0x2080B0  	MOV	#lo_addr(_banRSC), W0
0x0BA2	0x784010  	MOV.B	[W0], W0
0x0BA4	0xE10461  	CP.B	W0, #1
0x0BA6	0x3A000C  	BRA NZ	L_UART1Interrupt78
L__UART1Interrupt148:
;SensorNivel.c,746 :: 		Delay_ms(100);                                                        //**Ojo: Este retardo es importante para que el Concentrador tenga tiempo de recibir la respuesta
0x0BA8	0x200158  	MOV	#21, W8
0x0BAA	0x2585B7  	MOV	#22619, W7
L_UART1Interrupt79:
0x0BAC	0xED200E  	DEC	W7
0x0BAE	0x3AFFFE  	BRA NZ	L_UART1Interrupt79
0x0BB0	0xED2010  	DEC	W8
0x0BB2	0x3AFFFC  	BRA NZ	L_UART1Interrupt79
;SensorNivel.c,750 :: 		banderaPeticion = 1;
0x0BB4	0x208351  	MOV	#lo_addr(_banderaPeticion), W1
0x0BB6	0xB3C010  	MOV.B	#1, W0
0x0BB8	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,752 :: 		banRSC = 0;
0x0BBA	0x2080B1  	MOV	#lo_addr(_banRSC), W1
0x0BBC	0xEF2000  	CLR	W0
0x0BBE	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,753 :: 		}
L_UART1Interrupt78:
;SensorNivel.c,754 :: 		}
L_end_UART1Interrupt:
0x0BC0	0x2001A0  	MOV	#26, W0
0x0BC2	0x09000C  	REPEAT	#12
0x0BC4	0x78104F  	POP	[W0--]
0x0BC6	0x78004F  	POP	W0
0x0BC8	0xF90036  	POP	RCOUNT
0x0BCA	0xF90034  	POP	PSVPAG
0x0BCC	0x064000  	RETFIE
; end of _UART1Interrupt
_UART1_Read:
0x06CC	0xFA0000  	LNK	#0
;__Lib_UART_1_p24_p33.c,71 :: 		
;__Lib_UART_1_p24_p33.c,72 :: 		
0x06CE	0x000000  	NOP
;__Lib_UART_1_p24_p33.c,73 :: 		
0x06D0	0x000000  	NOP
;__Lib_UART_1_p24_p33.c,74 :: 		
0x06D2	0xBF8226  	MOV	U1RXREG, WREG
;__Lib_UART_1_p24_p33.c,75 :: 		
L_end_UART1_Read:
0x06D4	0xFA8000  	ULNK
0x06D6	0x060000  	RETURN
; end of _UART1_Read
_Timer3Interrupt:
0x09D2	0xF80034  	PUSH	PSVPAG
0x09D4	0xF80036  	PUSH	RCOUNT
0x09D6	0x781F80  	PUSH	W0
0x09D8	0x200020  	MOV	#2, W0
0x09DA	0x09000C  	REPEAT	#12
0x09DC	0x781FB0  	PUSH	[W0++]
;SensorNivel.c,665 :: 		void Timer3Interrupt() iv IVT_ADDR_T3INTERRUPT{
;SensorNivel.c,667 :: 		contTMR3++;                                                                //Incrementa el contador de TMR2
0x09DE	0xB3C011  	MOV.B	#1, W1
0x09E0	0x208220  	MOV	#lo_addr(_contTMR3), W0
0x09E2	0x40C810  	ADD.B	W1, [W0], [W0]
;SensorNivel.c,670 :: 		if (contTMR3==3){
0x09E4	0x208220  	MOV	#lo_addr(_contTMR3), W0
0x09E6	0x784010  	MOV.B	[W0], W0
0x09E8	0xE10463  	CP.B	W0, #3
0x09EA	0x3A0010  	BRA NZ	L_Timer3Interrupt59
L__Timer3Interrupt133:
;SensorNivel.c,671 :: 		TMR3 = 0;                                                              //Encera el TMR3
0x09EC	0xEF210A  	CLR	TMR3
;SensorNivel.c,672 :: 		contTMR3 = 0;
0x09EE	0x208221  	MOV	#lo_addr(_contTMR3), W1
0x09F0	0xEF2000  	CLR	W0
0x09F2	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,674 :: 		banRSI = 0;
0x09F4	0x2080A1  	MOV	#lo_addr(_banRSI), W1
0x09F6	0xEF2000  	CLR	W0
0x09F8	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,675 :: 		banRSC = 0;
0x09FA	0x2080B1  	MOV	#lo_addr(_banRSC), W1
0x09FC	0xEF2000  	CLR	W0
0x09FE	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,676 :: 		i_rs485 = 0;
0x0A00	0xEF2000  	CLR	W0
0x0A02	0x8840D0  	MOV	W0, _i_rs485
;SensorNivel.c,679 :: 		LED1 = ~LED1;
0x0A04	0xAA82C4  	BTG	LATA4_bit, BitPos(LATA4_bit+0)
;SensorNivel.c,680 :: 		contPulsosTMR3++;
0x0A06	0xB3C011  	MOV.B	#1, W1
0x0A08	0x208190  	MOV	#lo_addr(_contPulsosTMR3), W0
0x0A0A	0x40C810  	ADD.B	W1, [W0], [W0]
;SensorNivel.c,686 :: 		}
L_Timer3Interrupt59:
;SensorNivel.c,690 :: 		if (contPulsosTMR3==10){
0x0A0C	0x208190  	MOV	#lo_addr(_contPulsosTMR3), W0
0x0A0E	0x784010  	MOV.B	[W0], W0
0x0A10	0xE1046A  	CP.B	W0, #10
0x0A12	0x3A0001  	BRA NZ	L_Timer3Interrupt60
L__Timer3Interrupt134:
;SensorNivel.c,691 :: 		T3CON.TON = 0;                                                         //Apaga el TMR3
0x0A14	0xA9E113  	BCLR	T3CON, #15
;SensorNivel.c,692 :: 		}
L_Timer3Interrupt60:
;SensorNivel.c,696 :: 		T3IF_bit = 0;                                                              //Limpia la bandera de interrupcion por desbordamiento del Timer2
0x0A16	0xA90085  	BCLR	T3IF_bit, BitPos(T3IF_bit+0)
;SensorNivel.c,698 :: 		}
L_end_Timer3Interrupt:
0x0A18	0x2001A0  	MOV	#26, W0
0x0A1A	0x09000C  	REPEAT	#12
0x0A1C	0x78104F  	POP	[W0--]
0x0A1E	0x78004F  	POP	W0
0x0A20	0xF90036  	POP	RCOUNT
0x0A22	0xF90034  	POP	PSVPAG
0x0A24	0x064000  	RETFIE
; end of _Timer3Interrupt
_Timer2Interrupt:
0x0944	0xF80034  	PUSH	PSVPAG
0x0946	0xF80036  	PUSH	RCOUNT
0x0948	0x781F80  	PUSH	W0
0x094A	0x200020  	MOV	#2, W0
0x094C	0x09000C  	REPEAT	#12
0x094E	0x781FB0  	PUSH	[W0++]
;SensorNivel.c,645 :: 		void Timer2Interrupt() iv IVT_ADDR_T2INTERRUPT{
;SensorNivel.c,647 :: 		if (contPulsos<10){                                                        //Controla el numero total de pulsos de exitacion del transductor ultrasonico. (
0x0950	0x8042B0  	MOV	_contPulsos, W0
0x0952	0xE1006A  	CP	W0, #10
0x0954	0x310002  	BRA GEU	L_Timer2Interrupt56
L__Timer2Interrupt130:
;SensorNivel.c,648 :: 		RB2_bit = ~RB2_bit;                                                   //Conmuta el valor del pin RB14
0x0956	0xAA42CA  	BTG	RB2_bit, BitPos(RB2_bit+0)
;SensorNivel.c,649 :: 		}else {
0x0958	0x37000D  	BRA	L_Timer2Interrupt57
L_Timer2Interrupt56:
;SensorNivel.c,650 :: 		RB2_bit = 0;                                                          //Pone a cero despues de enviar todos los pulsos de exitacion.
0x095A	0xA942CA  	BCLR	RB2_bit, BitPos(RB2_bit+0)
;SensorNivel.c,651 :: 		if (contPulsos==110){
0x095C	0x2006E1  	MOV	#110, W1
0x095E	0x208560  	MOV	#lo_addr(_contPulsos), W0
0x0960	0xE10810  	CP	W1, [W0]
0x0962	0x3A0008  	BRA NZ	L_Timer2Interrupt58
L__Timer2Interrupt131:
;SensorNivel.c,652 :: 		T2CON.TON = 0;                                                    //Apaga el TMR2
0x0964	0xA9E111  	BCLR	T2CON, #15
;SensorNivel.c,653 :: 		TMR1 = 0;                                                         //Encera el TMR1
0x0966	0xEF2100  	CLR	TMR1
;SensorNivel.c,654 :: 		T1CON.TON = 1;                                                    //Enciende el TMR1
0x0968	0xA8E105  	BSET	T1CON, #15
;SensorNivel.c,655 :: 		bm = 0;
0x096A	0x2083D1  	MOV	#lo_addr(_bm), W1
0x096C	0xEF2000  	CLR	W0
0x096E	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,656 :: 		i = 0;
0x0970	0xEF2000  	CLR	W0
0x0972	0x8858A0  	MOV	W0, _i
;SensorNivel.c,657 :: 		}
L_Timer2Interrupt58:
;SensorNivel.c,658 :: 		}
L_Timer2Interrupt57:
;SensorNivel.c,659 :: 		contPulsos++;                                                              //Aumenta el contador en una unidad.
0x0974	0x200011  	MOV	#1, W1
0x0976	0x208560  	MOV	#lo_addr(_contPulsos), W0
0x0978	0x408810  	ADD	W1, [W0], [W0]
;SensorNivel.c,660 :: 		T2IF_bit = 0;                                                              //Limpia la bandera de interrupcion por desbordamiento del TMR2
0x097A	0xA9E084  	BCLR	T2IF_bit, BitPos(T2IF_bit+0)
;SensorNivel.c,662 :: 		}
L_end_Timer2Interrupt:
0x097C	0x2001A0  	MOV	#26, W0
0x097E	0x09000C  	REPEAT	#12
0x0980	0x78104F  	POP	[W0--]
0x0982	0x78004F  	POP	W0
0x0984	0xF90036  	POP	RCOUNT
0x0986	0xF90034  	POP	PSVPAG
0x0988	0x064000  	RETFIE
; end of _Timer2Interrupt
_Timer1Interrupt:
0x098A	0xF80034  	PUSH	PSVPAG
0x098C	0xF80036  	PUSH	RCOUNT
0x098E	0x781F80  	PUSH	W0
0x0990	0x200020  	MOV	#2, W0
0x0992	0x09000C  	REPEAT	#12
0x0994	0x781FB0  	PUSH	[W0++]
;SensorNivel.c,631 :: 		void Timer1Interrupt() iv IVT_ADDR_T1INTERRUPT{
;SensorNivel.c,632 :: 		SAMP_bit = 0;                                                              //Limpia el bit SAMP para iniciar la conversion del ADC
0x0996	0xA92320  	BCLR	SAMP_bit, BitPos(SAMP_bit+0)
;SensorNivel.c,633 :: 		while (!AD1CON1bits.DONE);                                                 //Espera hasta que se complete la conversion
L_Timer1Interrupt52:
0x0998	0xAF0320  	BTSC	AD1CON1bits, #0
0x099A	0x370001  	BRA	L_Timer1Interrupt53
0x099C	0x37FFFD  	BRA	L_Timer1Interrupt52
L_Timer1Interrupt53:
;SensorNivel.c,634 :: 		if (i<numeroMuestras){
0x099E	0x8058A1  	MOV	_i, W1
0x09A0	0x2015E0  	MOV	#350, W0
0x09A2	0xE10800  	CP	W1, W0
0x09A4	0x31000A  	BRA GEU	L_Timer1Interrupt54
L__Timer1Interrupt128:
;SensorNivel.c,635 :: 		vectorMuestras[i] = ADC1BUF0;                                           //Almacena el valor actual de la conversion del ADC en el vectorMuestras
0x09A6	0x8058A0  	MOV	_i, W0
0x09A8	0xDD00C1  	SL	W0, #1, W1
0x09AA	0x208580  	MOV	#lo_addr(_vectorMuestras), W0
0x09AC	0x400081  	ADD	W0, W1, W1
0x09AE	0xBF8300  	MOV	ADC1BUF0, WREG
0x09B0	0x780880  	MOV	W0, [W1]
;SensorNivel.c,636 :: 		i++;                                                                    //Aumenta en 1 el subindice del vector de Muestras
0x09B2	0x200011  	MOV	#1, W1
0x09B4	0x20B140  	MOV	#lo_addr(_i), W0
0x09B6	0x408810  	ADD	W1, [W0], [W0]
;SensorNivel.c,637 :: 		} else {
0x09B8	0x370004  	BRA	L_Timer1Interrupt55
L_Timer1Interrupt54:
;SensorNivel.c,638 :: 		bm = 1;                                                                 //Cambia el valor de la bandera bm para terminar con el muestreo y dar comienzo al procesamiento de la senal
0x09BA	0x2083D1  	MOV	#lo_addr(_bm), W1
0x09BC	0xB3C010  	MOV.B	#1, W0
0x09BE	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,639 :: 		T1CON.TON = 0;                                                          //Apaga el TMR1
0x09C0	0xA9E105  	BCLR	T1CON, #15
;SensorNivel.c,640 :: 		}
L_Timer1Interrupt55:
;SensorNivel.c,641 :: 		T1IF_bit = 0;                                                              //Limpia la bandera de interrupcion por desbordamiento del TMR1
0x09C2	0xA96084  	BCLR	T1IF_bit, BitPos(T1IF_bit+0)
;SensorNivel.c,642 :: 		}
L_end_Timer1Interrupt:
0x09C4	0x2001A0  	MOV	#26, W0
0x09C6	0x09000C  	REPEAT	#12
0x09C8	0x78104F  	POP	[W0--]
0x09CA	0x78004F  	POP	W0
0x09CC	0xF90036  	POP	RCOUNT
0x09CE	0xF90034  	POP	PSVPAG
0x09D0	0x064000  	RETFIE
; end of _Timer1Interrupt
;SensorNivel.c,0 :: ?ICS_tramaPruebaRS485 [10]
0x0BCE	0x0B0B ;?ICS_tramaPruebaRS485+0
0x0BD0	0x0B0B ;?ICS_tramaPruebaRS485+2
0x0BD2	0x0B0B ;?ICS_tramaPruebaRS485+4
0x0BD4	0x0B0B ;?ICS_tramaPruebaRS485+6
0x0BD6	0x020B ;?ICS_tramaPruebaRS485+8
; end of ?ICS_tramaPruebaRS485
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0200      [12]    _Delay_80us
0x020C      [12]    _Delay_500us
0x0218      [12]    _Delay_50us
0x0224      [10]    _Delay_1us
0x022E      [60]    _Ow_Write
0x026A       [6]    _Get_Fosc_kHz
0x0270      [48]    _Ow_Reset
0x02A0      [12]    _UART1_Tx_Idle
0x02AC      [14]    _UART1_Write
0x02BA      [60]    _Ow_Read
0x02F6      [88]    __Modulus_32x32
0x034E      [14]    _Delay_100ms
0x035C      [18]    __Multiply_32x32
0x036E       [4]    _Get_Fosc_Per_Cyc
0x0372      [82]    __Divide_32x32
0x03C4      [64]    _GenerarTramaPrueba
0x0404      [66]    _ProbarEnvioTrama
0x0446      [98]    _EnviarTramaInt
0x04A8     [116]    _EnviarTramaRS485
0x051C      [30]    _ProbarMuestreo
0x053A     [258]    _UART1_Init
0x063C     [106]    _LeerDS18B20
0x06A6      [38]    _CapturarMuestras
0x06CC      [12]    _UART1_Read
0x06D8     [286]    _ProcesarSolicitud
0x07F6     [334]    _ConfiguracionPrincipal
0x0944      [70]    _Timer2Interrupt
0x098A      [72]    _Timer1Interrupt
0x09D2      [84]    _Timer3Interrupt
0x0A26     [160]    _main
0x0AC6     [264]    _UART1Interrupt
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x080A       [1]    _banRSI
0x080B       [1]    _banRSC
0x080C       [4]    _T2
0x0810       [2]    _x
0x0812       [2]    _y
0x0814       [1]    _subFuncionRS485
0x0816       [2]    _numDatosRS485
0x0815       [1]    _funcionRS485
0x0818       [1]    _byteRS485
0x081A       [2]    _i_rs485
0x00A8       [2]    IPC2bits
0x0084       [0]    T3IF_bit
0x010E       [2]    PR3
0x0112       [2]    T3CON
0x0084       [0]    T2IF_bit
0x010C       [2]    PR2
0x00A4       [2]    IPC0bits
0x00A6       [2]    IPC1bits
0x0084       [0]    U1RXIF_bit
0x06A4       [2]    RPINR18bits
0x06C6       [2]    RPOR3bits
0x0222       [2]    U1STA
0x0228       [2]    U1BRG
0x0220       [2]    U1MODE
0x081C       [2]    _UART_Rdy_Ptr
0x081E       [2]    _UART_Tx_Idle_Ptr
0x0320       [0]    SAMP_bit
0x0300       [2]    ADC1BUF0
0x010A       [2]    TMR3
0x0224       [2]    U1TXREG
0x0226       [2]    U1RXREG
0x0820       [2]    _UART_Rd_Ptr
0x0819       [1]    _contPulsosTMR3
0x02CC       [0]    LED2
0x0822       [1]    _contTMR3
0x0824       [2]    _ptrNumDatosRS485
0x02CC       [0]    MSRS485
0x0826      [15]    _solicitudPyloadRS485
0x0836       [2]    _UART_Wr_Ptr
0x0838       [5]    _solicitudCabeceraRS485
0x02CC       [0]    LATB4_bit
0x0823       [1]    _ip
0x0102       [2]    PR1
0x083E       [2]    _temperaturaRaw
0x0840       [4]    _TOF
0x02C2       [2]    PORTA
0x0106       [2]    TMR2
0x0110       [2]    T2CON
0x0744       [2]    CLKDIVbits
0x0746       [2]    PLLFBD
0x0835       [1]    _banderaPeticion
0x0844      [15]    _respuestaPyloadRS485
0x02CA       [0]    RB2_bit
0x0100       [2]    TMR1
0x0104       [2]    T1CON
0x02C4       [0]    LATA4_bit
0x02CC       [0]    LATB5_bit
0x02C4       [0]    LED1
0x0854       [2]    _j
0x0856       [2]    _contPulsos
0x0858     [700]    _vectorMuestras
0x083D       [1]    _bm
0x0B14       [2]    _i
0x0324       [2]    AD1CON3bits
0x0328       [2]    AD1CHS0
0x0324       [2]    AD1CON3
0x0322       [2]    AD1CON2bits
0x0322       [2]    AD1CON2
0x0094       [2]    IEC0
0x0084       [0]    T1IF_bit
0x0330       [2]    AD1CSSL
0x0328       [2]    AD1CHS0bits
0x0326       [2]    AD1CHS123
0x0320       [2]    AD1CON1bits
0x02C8       [0]    MSRS485_Direction
0x02C8       [0]    TRISB5_bit
0x02C8       [2]    TRISB
0x032C       [2]    AD1PCFGL
0x02C0       [0]    TRISA1_bit
0x02C8       [0]    TRISB4_bit
0x0320       [2]    AD1CON1
0x02C8       [0]    LED2_Direction
0x02C0       [0]    LED1_Direction
0x02C0       [0]    TRISA4_bit
0x0800      [10]    _tramaPruebaRS485
0x0094       [2]    IEC0
0x0100       [2]    TMR1
0x0102       [2]    PR1
0x0104       [2]    T1CON
0x0106       [2]    TMR2
0x010A       [2]    TMR3
0x010C       [2]    PR2
0x010E       [2]    PR3
0x0110       [2]    T2CON
0x0112       [2]    T3CON
0x0220       [2]    U1MODE
0x0222       [2]    U1STA
0x0224       [2]    U1TXREG
0x0226       [2]    U1RXREG
0x0228       [2]    U1BRG
0x0014       [2]    FARG_Ow_Write_port
0x0016       [2]    FARG_Ow_Write_pin
0x0018       [1]    FARG_Ow_Write_data_
0x0014       [2]    FARG_Ow_Reset_port
0x0016       [2]    FARG_Ow_Reset_pin
0x0014       [2]    FARG_UART1_Write__data
0x0014       [2]    FARG_Ow_Read_port
0x0016       [2]    FARG_Ow_Read_pin
0x02C2       [2]    PORTA
0x02C8       [2]    TRISB
0x0300       [2]    ADC1BUF0
0x0320       [2]    AD1CON1
0x0322       [2]    AD1CON2
0x0324       [2]    AD1CON3
0x0326       [2]    AD1CHS123
0x0328       [2]    AD1CHS0
0x032C       [2]    AD1PCFGL
0x0330       [2]    AD1CSSL
0x0014       [2]    FARG_GenerarTramaPrueba_numDatosPrueba
0x0016       [2]    FARG_GenerarTramaPrueba_cabeceraPrueba
0x0014       [2]    FARG_EnviarTramaInt_cabecera
0x0016       [2]    FARG_EnviarTramaInt_temperatura
0x0014       [1]    FARG_EnviarTramaRS485_puertoUART
0x0016       [2]    FARG_EnviarTramaRS485_cabecera
0x0018       [2]    FARG_EnviarTramaRS485_payload
0x0014       [4]    FARG_UART1_Init_baud_rate
0x0014       [2]    FARG_ProcesarSolicitud_cabeceraSolicitud
0x0016       [2]    FARG_ProcesarSolicitud_payloadSolicitud
0x0746       [2]    PLLFBD
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x0BCE      [10]    ?ICS_tramaPruebaRS485
//** Label List: ** 
//----------------------------------------------
  L_EnviarTramaRS4850
  L_EnviarTramaRS4851
  L_EnviarTramaRS4852
  L_EnviarTramaRS4853
  L_EnviarTramaRS4854
  L_EnviarTramaRS4855
  L_main6
  L_main7
  L_main8
  L_ConfiguracionPrincipal9
  L_ProcesarSolicitud11
  L_ProcesarSolicitud12
  L_ProcesarSolicitud13
  L_ProcesarSolicitud14
  L_ProcesarSolicitud15
  L_ProcesarSolicitud16
  L_ProcesarSolicitud17
  L_ProcesarSolicitud18
  L_ProcesarSolicitud19
  L_ProcesarSolicitud20
  L_ProcesarSolicitud21
  L_ProcesarSolicitud22
  L_ProcesarSolicitud23
  L_ProcesarSolicitud24
  L_ProcesarSolicitud25
  L_ProcesarSolicitud26
  L_ProcesarSolicitud27
  L_ProcesarSolicitud28
  L_ProcesarSolicitud29
  L_ProcesarSolicitud30
  L_GenerarTramaPrueba31
  L_GenerarTramaPrueba32
  L_GenerarTramaPrueba33
  L_GenerarTramaPrueba34
  L_LeerDS18B2035
  L_LeerDS18B2037
  L_ProbarEnvioTrama39
  L_ProbarEnvioTrama40
  L_ProbarEnvioTrama41
  L_ProbarEnvioTrama43
  L_ProbarMuestreo45
  L_ProbarMuestreo46
  L_CapturarMuestras47
  L_CapturarMuestras48
  L_EnviarTramaInt49
  L_EnviarTramaInt50
  L_EnviarTramaInt51
  L_Timer1Interrupt52
  L_Timer1Interrupt53
  L_Timer1Interrupt54
  L_Timer1Interrupt55
  L_Timer2Interrupt56
  L_Timer2Interrupt57
  L_Timer2Interrupt58
  L_Timer3Interrupt59
  L_Timer3Interrupt60
  L_UART1Interrupt61
  L_UART1Interrupt62
  L_UART1Interrupt63
  L_UART1Interrupt64
  L_UART1Interrupt65
  L_UART1Interrupt66
  L_UART1Interrupt67
  L_UART1Interrupt68
  L_UART1Interrupt69
  L_UART1Interrupt70
  L_UART1Interrupt71
  L_UART1Interrupt72
  L_UART1Interrupt73
  L_UART1Interrupt74
  L_UART1Interrupt75
  L_UART1Interrupt76
  L_UART1Interrupt77
  L_UART1Interrupt78
  L_UART1Interrupt79
  L__GenerarTramaPrueba81
  L__UART1Interrupt82
  L__UART1Interrupt83
  L__UART1Interrupt84
  L__UART1Interrupt85
  L__UART1Interrupt86
  L__UART1Interrupt87
  L__UART1Interrupt88
  L__UART1Interrupt89
  L__UART1Interrupt90
  L__UART1Interrupt91
  L__UART1Interrupt92
  L__UART1Interrupt93
  L__UART1Interrupt94
  L_end_EnviarTramaRS485
  _EnviarTramaRS485
  L__EnviarTramaRS48596
  L__EnviarTramaRS48597
  L__EnviarTramaRS48598
  L_end_main
  _main
  L__main100
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_ProcesarSolicitud
  _ProcesarSolicitud
  L__ProcesarSolicitud104
  L__ProcesarSolicitud105
  L__ProcesarSolicitud106
  L__ProcesarSolicitud107
  L__ProcesarSolicitud108
  L__ProcesarSolicitud109
  L__ProcesarSolicitud110
  L__ProcesarSolicitud111
  L__ProcesarSolicitud112
  L__ProcesarSolicitud113
  L__ProcesarSolicitud114
  L_end_GenerarTramaPrueba
  _GenerarTramaPrueba
  L__GenerarTramaPrueba116
  L__GenerarTramaPrueba117
  L_end_LeerDS18B20
  _LeerDS18B20
  L_end_ProbarEnvioTrama
  _ProbarEnvioTrama
  L__ProbarEnvioTrama120
  L_end_ProbarMuestreo
  _ProbarMuestreo
  L__ProbarMuestreo122
  L_end_CapturarMuestras
  _CapturarMuestras
  L__CapturarMuestras124
  L_end_EnviarTramaInt
  _EnviarTramaInt
  L__EnviarTramaInt126
  L_end_Timer1Interrupt
  _Timer1Interrupt
  L__Timer1Interrupt128
  L_end_Timer2Interrupt
  _Timer2Interrupt
  L__Timer2Interrupt130
  L__Timer2Interrupt131
  L_end_Timer3Interrupt
  _Timer3Interrupt
  L__Timer3Interrupt133
  L__Timer3Interrupt134
  L_end_UART1Interrupt
  _UART1Interrupt
  L__UART1Interrupt136
  L__UART1Interrupt137
  L__UART1Interrupt138
  L__UART1Interrupt139
  L__UART1Interrupt140
  L__UART1Interrupt141
  L__UART1Interrupt142
  L__UART1Interrupt143
  L__UART1Interrupt144
  L__UART1Interrupt145
  L__UART1Interrupt146
  L__UART1Interrupt147
  L__UART1Interrupt148
  Delay_Cyc_loop
  Delay_Cyc_rez
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_VDelay_ms3
  L_VDelay_ms4
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_VDelay_Advanced_ms7
  L_VDelay_Advanced_ms8
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_Delay_1us11
  L_Delay_10us13
  L_Delay_22us15
  L_Delay_50us17
  L_Delay_80us19
  L_Delay_500us21
  L_Delay_5500us23
  L_Delay_1ms25
  L_Delay_5ms27
  L_Delay_8ms29
  L_Delay_10ms31
  L_Delay_100ms33
  L_Delay_1sec35
  L_end_Get_Fosc_kHz
  _Get_Fosc_kHz
  L_end_Get_Fosc_Per_Cyc
  _Get_Fosc_Per_Cyc
  L_end_Delay_Cyc
  _Delay_Cyc
  L_end_Delay_Cyc_Long
  _Delay_Cyc_Long
  L_end_VDelay_ms
  _VDelay_ms
  L_end_VDelay_Advanced_ms
  _VDelay_Advanced_ms
  L_end_Delay_W0
  _Delay_W0
  L_end_Delay_1us
  _Delay_1us
  L_end_Delay_10us
  _Delay_10us
  L_end_Delay_22us
  _Delay_22us
  L_end_Delay_50us
  _Delay_50us
  L_end_Delay_80us
  _Delay_80us
  L_end_Delay_500us
  _Delay_500us
  L_end_Delay_5500us
  _Delay_5500us
  L_end_Delay_1ms
  _Delay_1ms
  L_end_Delay_5ms
  _Delay_5ms
  L_end_Delay_8ms
  _Delay_8ms
  L_end_Delay_10ms
  _Delay_10ms
  L_end_Delay_100ms
  _Delay_100ms
  L_end_Delay_1sec
  _Delay_1sec
  Divide_32x32___testsus
  the_end_Divide_32x32
  Divide_32x32___divsi3
  Divide_32x32___udivsi3
  Divide_32x32_divtestb
  Divide_32x32_calcquot
  Divide_32x32_returnq
  Divide_32x32_nextbit
  Divide_32x32_iterate
  Modulus_32x32___testsus
  the_end_Modulus_32x32
  Modulus_32x32___modsi3
  Modulus_32x32___umodsi3
  Modulus_32x32_modtestb
  Modulus_32x32_calcrem
  Modulus_32x32_exitr
  Modulus_32x32___udivsi3
  Modulus_32x32_nextbit
  Modulus_32x32_iterate
  L_end__Multiply_32x32
  __Multiply_32x32
  L_end__Divide_32x32
  __Divide_32x32
  L_end__Modulus_32x32
  __Modulus_32x32
  L_Ow_Read0
  L_Ow_Read1
  L_Ow_Read2
  L_Ow_Read3
  L_Ow_Write4
  L_Ow_Write5
  L_Ow_Write6
  L_Ow_Write7
  L__Ow_Read8
  L_end_Ow_Reset
  _Ow_Reset
  L__Ow_Reset10
  L_end_Ow_Read
  _Ow_Read
  L__Ow_Read12
  L__Ow_Read13
  L_end_Ow_Write
  _Ow_Write
  L__Ow_Write15
  L__Ow_Write16
  L_UART1_Write0
  L_UART1_Write1
  L_UART1_Write_Text2
  L_UART1_Write_Text3
  L_UART1_Read_Text4
  L_UART1_Read_Text5
  L_UART1_Read_Text6
  L_UART1_Read_Text7
  L_UART1_Read_Text8
  L_UART1_Read_Text9
  L_UART1_Read_Text10
  L_UART1_Read_Text11
  L_UART1_Read_Text12
  L_UART1_Init13
  L_UART1_Init14
  L_UART1_Init15
  L_UART1_Init_Advanced16
  L_UART1_Init_Advanced17
  L_UART1_Init_Advanced18
  L_UART1_Init_Advanced19
  L_UART1_Init_Advanced20
  L_UART1_Init_Advanced21
  L_UART1_Init_Advanced22
  L_UART1_Init_Advanced23
  L_UART1_Init_Advanced24
  L_UART_Write_Text25
  L_UART_Write_Text26
  L_UART_Read_Text27
  L_UART_Read_Text28
  L_UART_Read_Text29
  L_UART_Read_Text30
  L_UART_Read_Text31
  L_UART_Read_Text32
  L_UART_Read_Text33
  L_UART_Read_Text34
  L_UART_Read_Text35
  L__UART1_Read_Text36
  L__UART1_Init37
  L__UART1_Init38
  L__UART1_Init39
  L_end_UART1_Write
  _UART1_Write
  L_end_UART1_Write_Text
  _UART1_Write_Text
  L__UART1_Write_Text42
  L_end_UART1_Data_Ready
  _UART1_Data_Ready
  L_end_UART1_Read
  _UART1_Read
  L_end_UART1_Read_Text
  _UART1_Read_Text
  L__UART1_Read_Text46
  L__UART1_Read_Text47
  L__UART1_Read_Text48
  L__UART1_Read_Text49
  L__UART1_Read_Text50
  L__UART1_Read_Text51
  L_end_UART1_Tx_Idle
  _UART1_Tx_Idle
  L_end_UART1_Init
  _UART1_Init
  L__UART1_Init54
  L__UART1_Init55
  L__UART1_Init56
  L__UART1_Init57
  L__UART1_Init58
  L__UART1_Init59
  L__UART1_Init60
  L_end_UART1_Init_Advanced
  _UART1_Init_Advanced
  L__UART1_Init_Advanced62
  L__UART1_Init_Advanced63
  L__UART1_Init_Advanced64
  L__UART1_Init_Advanced65
  L__UART1_Init_Advanced66
  L__UART1_Init_Advanced67
  L__UART1_Init_Advanced68
  L__UART1_Init_Advanced69
  L__UART1_Init_Advanced70
  L__UART1_Init_Advanced71
  L__UART1_Init_Advanced72
  L__UART1_Init_Advanced73
  L__UART1_Init_Advanced74
  L__UART1_Init_Advanced75
  L__UART1_Init_Advanced76
  L_end_UART_Set_Active
  _UART_Set_Active
  L_end_UART_Write
  _UART_Write
  L_end_UART_Write_Text
  _UART_Write_Text
  L__UART_Write_Text80
  L_end_UART_Read
  _UART_Read
  L_end_UART_Data_Ready
  _UART_Data_Ready
  L_end_UART_Read_Text
  _UART_Read_Text
  L__UART_Read_Text84
  L__UART_Read_Text85
  L__UART_Read_Text86
  L__UART_Read_Text87
  L__UART_Read_Text88
  L__UART_Read_Text89
  L_end_UART_Tx_Idle
  _UART_Tx_Idle
  L_EnviarTramaRS4850
  L_EnviarTramaRS4851
  L_EnviarTramaRS4852
  L_EnviarTramaRS4853
  L_EnviarTramaRS4854
  L_EnviarTramaRS4855
  L_main6
  L_main7
  L_main8
  L_ConfiguracionPrincipal9
  L_ProcesarSolicitud11
  L_ProcesarSolicitud12
  L_ProcesarSolicitud13
  L_ProcesarSolicitud14
  L_ProcesarSolicitud15
  L_ProcesarSolicitud16
  L_ProcesarSolicitud17
  L_ProcesarSolicitud18
  L_ProcesarSolicitud19
  L_ProcesarSolicitud20
  L_ProcesarSolicitud21
  L_ProcesarSolicitud22
  L_ProcesarSolicitud23
  L_ProcesarSolicitud24
  L_ProcesarSolicitud25
  L_ProcesarSolicitud26
  L_ProcesarSolicitud27
  L_ProcesarSolicitud28
  L_ProcesarSolicitud29
  L_ProcesarSolicitud30
  L_GenerarTramaPrueba31
  L_GenerarTramaPrueba32
  L_GenerarTramaPrueba33
  L_GenerarTramaPrueba34
  L_LeerDS18B2035
  L_LeerDS18B2037
  L_ProbarEnvioTrama39
  L_ProbarEnvioTrama40
  L_ProbarEnvioTrama41
  L_ProbarEnvioTrama43
  L_ProbarMuestreo45
  L_ProbarMuestreo46
  L_CapturarMuestras47
  L_CapturarMuestras48
  L_EnviarTramaInt49
  L_EnviarTramaInt50
  L_EnviarTramaInt51
  L_Timer1Interrupt52
  L_Timer1Interrupt53
  L_Timer1Interrupt54
  L_Timer1Interrupt55
  L_Timer2Interrupt56
  L_Timer2Interrupt57
  L_Timer2Interrupt58
  L_Timer3Interrupt59
  L_Timer3Interrupt60
  L_UART1Interrupt61
  L_UART1Interrupt62
  L_UART1Interrupt63
  L_UART1Interrupt64
  L_UART1Interrupt65
  L_UART1Interrupt66
  L_UART1Interrupt67
  L_UART1Interrupt68
  L_UART1Interrupt69
  L_UART1Interrupt70
  L_UART1Interrupt71
  L_UART1Interrupt72
  L_UART1Interrupt73
  L_UART1Interrupt74
  L_UART1Interrupt75
  L_UART1Interrupt76
  L_UART1Interrupt77
  L_UART1Interrupt78
  L_UART1Interrupt79
  L__GenerarTramaPrueba81
  L__UART1Interrupt82
  L__UART1Interrupt83
  L__UART1Interrupt84
  L__UART1Interrupt85
  L__UART1Interrupt86
  L__UART1Interrupt87
  L__UART1Interrupt88
  L__UART1Interrupt89
  L__UART1Interrupt90
  L__UART1Interrupt91
  L__UART1Interrupt92
  L__UART1Interrupt93
  L__UART1Interrupt94
  L_end_EnviarTramaRS485
  _EnviarTramaRS485
  L__EnviarTramaRS48596
  L__EnviarTramaRS48597
  L__EnviarTramaRS48598
  L_end_main
  _main
  L__main100
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_ProcesarSolicitud
  _ProcesarSolicitud
  L__ProcesarSolicitud104
  L__ProcesarSolicitud105
  L__ProcesarSolicitud106
  L__ProcesarSolicitud107
  L__ProcesarSolicitud108
  L__ProcesarSolicitud109
  L__ProcesarSolicitud110
  L__ProcesarSolicitud111
  L__ProcesarSolicitud112
  L__ProcesarSolicitud113
  L__ProcesarSolicitud114
  L_end_GenerarTramaPrueba
  _GenerarTramaPrueba
  L__GenerarTramaPrueba116
  L__GenerarTramaPrueba117
  L_end_LeerDS18B20
  _LeerDS18B20
  L_end_ProbarEnvioTrama
  _ProbarEnvioTrama
  L__ProbarEnvioTrama120
  L_end_ProbarMuestreo
  _ProbarMuestreo
  L__ProbarMuestreo122
  L_end_CapturarMuestras
  _CapturarMuestras
  L__CapturarMuestras124
  L_end_EnviarTramaInt
  _EnviarTramaInt
  L__EnviarTramaInt126
  L_end_Timer1Interrupt
  _Timer1Interrupt
  L__Timer1Interrupt128
  L_end_Timer2Interrupt
  _Timer2Interrupt
  L__Timer2Interrupt130
  L__Timer2Interrupt131
  L_end_Timer3Interrupt
  _Timer3Interrupt
  L__Timer3Interrupt133
  L__Timer3Interrupt134
  L_end_UART1Interrupt
  _UART1Interrupt
  L__UART1Interrupt136
  L__UART1Interrupt137
  L__UART1Interrupt138
  L__UART1Interrupt139
  L__UART1Interrupt140
  L__UART1Interrupt141
  L__UART1Interrupt142
  L__UART1Interrupt143
  L__UART1Interrupt144
  L__UART1Interrupt145
  L__UART1Interrupt146
  L__UART1Interrupt147
  L__UART1Interrupt148
  L_UART1_Write0
  L_UART1_Write1
  L_UART1_Write_Text2
  L_UART1_Write_Text3
  L_UART1_Read_Text4
  L_UART1_Read_Text5
  L_UART1_Read_Text6
  L_UART1_Read_Text7
  L_UART1_Read_Text8
  L_UART1_Read_Text9
  L_UART1_Read_Text10
  L_UART1_Read_Text11
  L_UART1_Read_Text12
  L_UART1_Init13
  L_UART1_Init14
  L_UART1_Init15
  L_UART1_Init_Advanced16
  L_UART1_Init_Advanced17
  L_UART1_Init_Advanced18
  L_UART1_Init_Advanced19
  L_UART1_Init_Advanced20
  L_UART1_Init_Advanced21
  L_UART1_Init_Advanced22
  L_UART1_Init_Advanced23
  L_UART1_Init_Advanced24
  L_UART_Write_Text25
  L_UART_Write_Text26
  L_UART_Read_Text27
  L_UART_Read_Text28
  L_UART_Read_Text29
  L_UART_Read_Text30
  L_UART_Read_Text31
  L_UART_Read_Text32
  L_UART_Read_Text33
  L_UART_Read_Text34
  L_UART_Read_Text35
  L__UART1_Read_Text36
  L__UART1_Init37
  L__UART1_Init38
  L__UART1_Init39
  L_end_UART1_Write
  _UART1_Write
  L_end_UART1_Write_Text
  _UART1_Write_Text
  L__UART1_Write_Text42
  L_end_UART1_Data_Ready
  _UART1_Data_Ready
  L_end_UART1_Read
  _UART1_Read
  L_end_UART1_Read_Text
  _UART1_Read_Text
  L__UART1_Read_Text46
  L__UART1_Read_Text47
  L__UART1_Read_Text48
  L__UART1_Read_Text49
  L__UART1_Read_Text50
  L__UART1_Read_Text51
  L_end_UART1_Tx_Idle
  _UART1_Tx_Idle
  L_end_UART1_Init
  _UART1_Init
  L__UART1_Init54
  L__UART1_Init55
  L__UART1_Init56
  L__UART1_Init57
  L__UART1_Init58
  L__UART1_Init59
  L__UART1_Init60
  L_end_UART1_Init_Advanced
  _UART1_Init_Advanced
  L__UART1_Init_Advanced62
  L__UART1_Init_Advanced63
  L__UART1_Init_Advanced64
  L__UART1_Init_Advanced65
  L__UART1_Init_Advanced66
  L__UART1_Init_Advanced67
  L__UART1_Init_Advanced68
  L__UART1_Init_Advanced69
  L__UART1_Init_Advanced70
  L__UART1_Init_Advanced71
  L__UART1_Init_Advanced72
  L__UART1_Init_Advanced73
  L__UART1_Init_Advanced74
  L__UART1_Init_Advanced75
  L__UART1_Init_Advanced76
  L_end_UART_Set_Active
  _UART_Set_Active
  L_end_UART_Write
  _UART_Write
  L_end_UART_Write_Text
  _UART_Write_Text
  L__UART_Write_Text80
  L_end_UART_Read
  _UART_Read
  L_end_UART_Data_Ready
  _UART_Data_Ready
  L_end_UART_Read_Text
  _UART_Read_Text
  L__UART_Read_Text84
  L__UART_Read_Text85
  L__UART_Read_Text86
  L__UART_Read_Text87
  L__UART_Read_Text88
  L__UART_Read_Text89
  L_end_UART_Tx_Idle
  _UART_Tx_Idle
  L_EnviarTramaRS4850
  L_EnviarTramaRS4851
  L_EnviarTramaRS4852
  L_EnviarTramaRS4853
  L_EnviarTramaRS4854
  L_EnviarTramaRS4855
  L_main6
  L_main7
  L_main8
  L_ConfiguracionPrincipal9
  L_ProcesarSolicitud11
  L_ProcesarSolicitud12
  L_ProcesarSolicitud13
  L_ProcesarSolicitud14
  L_ProcesarSolicitud15
  L_ProcesarSolicitud16
  L_ProcesarSolicitud17
  L_ProcesarSolicitud18
  L_ProcesarSolicitud19
  L_ProcesarSolicitud20
  L_ProcesarSolicitud21
  L_ProcesarSolicitud22
  L_ProcesarSolicitud23
  L_ProcesarSolicitud24
  L_ProcesarSolicitud25
  L_ProcesarSolicitud26
  L_ProcesarSolicitud27
  L_ProcesarSolicitud28
  L_ProcesarSolicitud29
  L_ProcesarSolicitud30
  L_GenerarTramaPrueba31
  L_GenerarTramaPrueba32
  L_GenerarTramaPrueba33
  L_GenerarTramaPrueba34
  L_LeerDS18B2035
  L_LeerDS18B2037
  L_ProbarEnvioTrama39
  L_ProbarEnvioTrama40
  L_ProbarEnvioTrama41
  L_ProbarEnvioTrama43
  L_ProbarMuestreo45
  L_ProbarMuestreo46
  L_CapturarMuestras47
  L_CapturarMuestras48
  L_EnviarTramaInt49
  L_EnviarTramaInt50
  L_EnviarTramaInt51
  L_Timer1Interrupt52
  L_Timer1Interrupt53
  L_Timer1Interrupt54
  L_Timer1Interrupt55
  L_Timer2Interrupt56
  L_Timer2Interrupt57
  L_Timer2Interrupt58
  L_Timer3Interrupt59
  L_Timer3Interrupt60
  L_UART1Interrupt61
  L_UART1Interrupt62
  L_UART1Interrupt63
  L_UART1Interrupt64
  L_UART1Interrupt65
  L_UART1Interrupt66
  L_UART1Interrupt67
  L_UART1Interrupt68
  L_UART1Interrupt69
  L_UART1Interrupt70
  L_UART1Interrupt71
  L_UART1Interrupt72
  L_UART1Interrupt73
  L_UART1Interrupt74
  L_UART1Interrupt75
  L_UART1Interrupt76
  L_UART1Interrupt77
  L_UART1Interrupt78
  L_UART1Interrupt79
  L__GenerarTramaPrueba81
  L__UART1Interrupt82
  L__UART1Interrupt83
  L__UART1Interrupt84
  L__UART1Interrupt85
  L__UART1Interrupt86
  L__UART1Interrupt87
  L__UART1Interrupt88
  L__UART1Interrupt89
  L__UART1Interrupt90
  L__UART1Interrupt91
  L__UART1Interrupt92
  L__UART1Interrupt93
  L__UART1Interrupt94
  L_end_EnviarTramaRS485
  _EnviarTramaRS485
  L__EnviarTramaRS48596
  L__EnviarTramaRS48597
  L__EnviarTramaRS48598
  L_end_main
  _main
  L__main100
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_ProcesarSolicitud
  _ProcesarSolicitud
  L__ProcesarSolicitud104
  L__ProcesarSolicitud105
  L__ProcesarSolicitud106
  L__ProcesarSolicitud107
  L__ProcesarSolicitud108
  L__ProcesarSolicitud109
  L__ProcesarSolicitud110
  L__ProcesarSolicitud111
  L__ProcesarSolicitud112
  L__ProcesarSolicitud113
  L__ProcesarSolicitud114
  L_end_GenerarTramaPrueba
  _GenerarTramaPrueba
  L__GenerarTramaPrueba116
  L__GenerarTramaPrueba117
  L_end_LeerDS18B20
  _LeerDS18B20
  L_end_ProbarEnvioTrama
  _ProbarEnvioTrama
  L__ProbarEnvioTrama120
  L_end_ProbarMuestreo
  _ProbarMuestreo
  L__ProbarMuestreo122
  L_end_CapturarMuestras
  _CapturarMuestras
  L__CapturarMuestras124
  L_end_EnviarTramaInt
  _EnviarTramaInt
  L__EnviarTramaInt126
  L_end_Timer1Interrupt
  _Timer1Interrupt
  L__Timer1Interrupt128
  L_end_Timer2Interrupt
  _Timer2Interrupt
  L__Timer2Interrupt130
  L__Timer2Interrupt131
  L_end_Timer3Interrupt
  _Timer3Interrupt
  L__Timer3Interrupt133
  L__Timer3Interrupt134
  L_end_UART1Interrupt
  _UART1Interrupt
  L__UART1Interrupt136
  L__UART1Interrupt137
  L__UART1Interrupt138
  L__UART1Interrupt139
  L__UART1Interrupt140
  L__UART1Interrupt141
  L__UART1Interrupt142
  L__UART1Interrupt143
  L__UART1Interrupt144
  L__UART1Interrupt145
  L__UART1Interrupt146
  L__UART1Interrupt147
  L__UART1Interrupt148
  L_EnviarTramaRS4850
  L_EnviarTramaRS4851
  L_EnviarTramaRS4852
  L_EnviarTramaRS4853
  L_EnviarTramaRS4854
  L_EnviarTramaRS4855
  L_main6
  L_main7
  L_main8
  L_ConfiguracionPrincipal9
  L_ProcesarSolicitud11
  L_ProcesarSolicitud12
  L_ProcesarSolicitud13
  L_ProcesarSolicitud14
  L_ProcesarSolicitud15
  L_ProcesarSolicitud16
  L_ProcesarSolicitud17
  L_ProcesarSolicitud18
  L_ProcesarSolicitud19
  L_ProcesarSolicitud20
  L_ProcesarSolicitud21
  L_ProcesarSolicitud22
  L_ProcesarSolicitud23
  L_ProcesarSolicitud24
  L_ProcesarSolicitud25
  L_ProcesarSolicitud26
  L_ProcesarSolicitud27
  L_ProcesarSolicitud28
  L_ProcesarSolicitud29
  L_ProcesarSolicitud30
  L_GenerarTramaPrueba31
  L_GenerarTramaPrueba32
  L_GenerarTramaPrueba33
  L_GenerarTramaPrueba34
  L_LeerDS18B2035
  L_LeerDS18B2037
  L_ProbarEnvioTrama39
  L_ProbarEnvioTrama40
  L_ProbarEnvioTrama41
  L_ProbarEnvioTrama43
  L_ProbarMuestreo45
  L_ProbarMuestreo46
  L_CapturarMuestras47
  L_CapturarMuestras48
  L_EnviarTramaInt49
  L_EnviarTramaInt50
  L_EnviarTramaInt51
  L_Timer1Interrupt52
  L_Timer1Interrupt53
  L_Timer1Interrupt54
  L_Timer1Interrupt55
  L_Timer2Interrupt56
  L_Timer2Interrupt57
  L_Timer2Interrupt58
  L_Timer3Interrupt59
  L_Timer3Interrupt60
  L_UART1Interrupt61
  L_UART1Interrupt62
  L_UART1Interrupt63
  L_UART1Interrupt64
  L_UART1Interrupt65
  L_UART1Interrupt66
  L_UART1Interrupt67
  L_UART1Interrupt68
  L_UART1Interrupt69
  L_UART1Interrupt70
  L_UART1Interrupt71
  L_UART1Interrupt72
  L_UART1Interrupt73
  L_UART1Interrupt74
  L_UART1Interrupt75
  L_UART1Interrupt76
  L_UART1Interrupt77
  L_UART1Interrupt78
  L_UART1Interrupt79
  L__GenerarTramaPrueba81
  L__UART1Interrupt82
  L__UART1Interrupt83
  L__UART1Interrupt84
  L__UART1Interrupt85
  L__UART1Interrupt86
  L__UART1Interrupt87
  L__UART1Interrupt88
  L__UART1Interrupt89
  L__UART1Interrupt90
  L__UART1Interrupt91
  L__UART1Interrupt92
  L__UART1Interrupt93
  L__UART1Interrupt94
  L_end_EnviarTramaRS485
  _EnviarTramaRS485
  L__EnviarTramaRS48596
  L__EnviarTramaRS48597
  L__EnviarTramaRS48598
  L_end_main
  _main
  L__main100
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_ProcesarSolicitud
  _ProcesarSolicitud
  L__ProcesarSolicitud104
  L__ProcesarSolicitud105
  L__ProcesarSolicitud106
  L__ProcesarSolicitud107
  L__ProcesarSolicitud108
  L__ProcesarSolicitud109
  L__ProcesarSolicitud110
  L__ProcesarSolicitud111
  L__ProcesarSolicitud112
  L__ProcesarSolicitud113
  L__ProcesarSolicitud114
  L_end_GenerarTramaPrueba
  _GenerarTramaPrueba
  L__GenerarTramaPrueba116
  L__GenerarTramaPrueba117
  L_end_LeerDS18B20
  _LeerDS18B20
  L_end_ProbarEnvioTrama
  _ProbarEnvioTrama
  L__ProbarEnvioTrama120
  L_end_ProbarMuestreo
  _ProbarMuestreo
  L__ProbarMuestreo122
  L_end_CapturarMuestras
  _CapturarMuestras
  L__CapturarMuestras124
  L_end_EnviarTramaInt
  _EnviarTramaInt
  L__EnviarTramaInt126
  L_end_Timer1Interrupt
  _Timer1Interrupt
  L__Timer1Interrupt128
  L_end_Timer2Interrupt
  _Timer2Interrupt
  L__Timer2Interrupt130
  L__Timer2Interrupt131
  L_end_Timer3Interrupt
  _Timer3Interrupt
  L__Timer3Interrupt133
  L__Timer3Interrupt134
  L_end_UART1Interrupt
  _UART1Interrupt
  L__UART1Interrupt136
  L__UART1Interrupt137
  L__UART1Interrupt138
  L__UART1Interrupt139
  L__UART1Interrupt140
  L__UART1Interrupt141
  L__UART1Interrupt142
  L__UART1Interrupt143
  L__UART1Interrupt144
  L__UART1Interrupt145
  L__UART1Interrupt146
  L__UART1Interrupt147
  L__UART1Interrupt148
  L_EnviarTramaRS4850
  L_EnviarTramaRS4851
  L_EnviarTramaRS4852
  L_EnviarTramaRS4853
  L_EnviarTramaRS4854
  L_EnviarTramaRS4855
  L_main6
  L_main7
  L_main8
  L_ConfiguracionPrincipal9
  L_ProcesarSolicitud11
  L_ProcesarSolicitud12
  L_ProcesarSolicitud13
  L_ProcesarSolicitud14
  L_ProcesarSolicitud15
  L_ProcesarSolicitud16
  L_ProcesarSolicitud17
  L_ProcesarSolicitud18
  L_ProcesarSolicitud19
  L_ProcesarSolicitud20
  L_ProcesarSolicitud21
  L_ProcesarSolicitud22
  L_ProcesarSolicitud23
  L_ProcesarSolicitud24
  L_ProcesarSolicitud25
  L_ProcesarSolicitud26
  L_ProcesarSolicitud27
  L_ProcesarSolicitud28
  L_ProcesarSolicitud29
  L_ProcesarSolicitud30
  L_GenerarTramaPrueba31
  L_GenerarTramaPrueba32
  L_GenerarTramaPrueba33
  L_GenerarTramaPrueba34
  L_LeerDS18B2035
  L_LeerDS18B2037
  L_ProbarEnvioTrama39
  L_ProbarEnvioTrama40
  L_ProbarEnvioTrama41
  L_ProbarEnvioTrama43
  L_ProbarMuestreo45
  L_ProbarMuestreo46
  L_CapturarMuestras47
  L_CapturarMuestras48
  L_EnviarTramaInt49
  L_EnviarTramaInt50
  L_EnviarTramaInt51
  L_Timer1Interrupt52
  L_Timer1Interrupt53
  L_Timer1Interrupt54
  L_Timer1Interrupt55
  L_Timer2Interrupt56
  L_Timer2Interrupt57
  L_Timer2Interrupt58
  L_Timer3Interrupt59
  L_Timer3Interrupt60
  L_UART1Interrupt61
  L_UART1Interrupt62
  L_UART1Interrupt63
  L_UART1Interrupt64
  L_UART1Interrupt65
  L_UART1Interrupt66
  L_UART1Interrupt67
  L_UART1Interrupt68
  L_UART1Interrupt69
  L_UART1Interrupt70
  L_UART1Interrupt71
  L_UART1Interrupt72
  L_UART1Interrupt73
  L_UART1Interrupt74
  L_UART1Interrupt75
  L_UART1Interrupt76
  L_UART1Interrupt77
  L_UART1Interrupt78
  L_UART1Interrupt79
  L__GenerarTramaPrueba81
  L__UART1Interrupt82
  L__UART1Interrupt83
  L__UART1Interrupt84
  L__UART1Interrupt85
  L__UART1Interrupt86
  L__UART1Interrupt87
  L__UART1Interrupt88
  L__UART1Interrupt89
  L__UART1Interrupt90
  L__UART1Interrupt91
  L__UART1Interrupt92
  L__UART1Interrupt93
  L__UART1Interrupt94
  L_end_EnviarTramaRS485
  _EnviarTramaRS485
  L__EnviarTramaRS48596
  L__EnviarTramaRS48597
  L__EnviarTramaRS48598
  L_end_main
  _main
  L__main100
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_ProcesarSolicitud
  _ProcesarSolicitud
  L__ProcesarSolicitud104
  L__ProcesarSolicitud105
  L__ProcesarSolicitud106
  L__ProcesarSolicitud107
  L__ProcesarSolicitud108
  L__ProcesarSolicitud109
  L__ProcesarSolicitud110
  L__ProcesarSolicitud111
  L__ProcesarSolicitud112
  L__ProcesarSolicitud113
  L__ProcesarSolicitud114
  L_end_GenerarTramaPrueba
  _GenerarTramaPrueba
  L__GenerarTramaPrueba116
  L__GenerarTramaPrueba117
  L_end_LeerDS18B20
  _LeerDS18B20
  L_end_ProbarEnvioTrama
  _ProbarEnvioTrama
  L__ProbarEnvioTrama120
  L_end_ProbarMuestreo
  _ProbarMuestreo
  L__ProbarMuestreo122
  L_end_CapturarMuestras
  _CapturarMuestras
  L__CapturarMuestras124
  L_end_EnviarTramaInt
  _EnviarTramaInt
  L__EnviarTramaInt126
  L_end_Timer1Interrupt
  _Timer1Interrupt
  L__Timer1Interrupt128
  L_end_Timer2Interrupt
  _Timer2Interrupt
  L__Timer2Interrupt130
  L__Timer2Interrupt131
  L_end_Timer3Interrupt
  _Timer3Interrupt
  L__Timer3Interrupt133
  L__Timer3Interrupt134
  L_end_UART1Interrupt
  _UART1Interrupt
  L__UART1Interrupt136
  L__UART1Interrupt137
  L__UART1Interrupt138
  L__UART1Interrupt139
  L__UART1Interrupt140
  L__UART1Interrupt141
  L__UART1Interrupt142
  L__UART1Interrupt143
  L__UART1Interrupt144
  L__UART1Interrupt145
  L__UART1Interrupt146
  L__UART1Interrupt147
  L__UART1Interrupt148
