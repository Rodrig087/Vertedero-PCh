;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 16/5/2022 16:56:13
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x000000041230  	GOTO	_main
0x0004	0x000000  	0
0x0006	0x000000  	0
0x0008	0x000000  	0
0x000A	0x000000  	0
0x000C	0x000000  	0
0x000E	0x000000  	0
0x0010	0x000000  	0
0x0012	0x000000  	0
0x0014	0x000000  	0
0x0016	0x000000  	0
0x0018	0x000000  	0
0x001A	0x0011A0  	4512
0x001C	0x000000  	0
0x001E	0x000000  	0
0x0020	0x000000  	0
0x0022	0x0011E8  	4584
0x0024	0x000000  	0
0x0026	0x000000  	0
0x0028	0x000000  	0
0x002A	0x0012D6  	4822
0x002C	0x000000  	0
0x002E	0x000000  	0
0x0030	0x000000  	0
0x0032	0x000000  	0
0x0034	0x000000  	0
0x0036	0x000000  	0
0x0038	0x000000  	0
0x003A	0x000000  	0
0x003C	0x000000  	0
0x003E	0x000000  	0
0x0040	0x000000  	0
0x0042	0x000000  	0
0x0044	0x000000  	0
0x0046	0x000000  	0
0x0048	0x000000  	0
0x004A	0x000000  	0
0x004C	0x000000  	0
0x004E	0x000000  	0
0x0050	0x000000  	0
0x0052	0x000000  	0
0x0054	0x000000  	0
0x0056	0x000000  	0
0x0058	0x000000  	0
0x005A	0x000000  	0
0x005C	0x000000  	0
0x005E	0x000000  	0
0x0060	0x000000  	0
0x0062	0x000000  	0
0x0064	0x000000  	0
0x0066	0x000000  	0
0x0068	0x000000  	0
0x006A	0x000000  	0
0x006C	0x000000  	0
0x006E	0x000000  	0
0x0070	0x000000  	0
0x0072	0x000000  	0
0x0074	0x000000  	0
0x0076	0x000000  	0
0x0078	0x000000  	0
0x007A	0x000000  	0
0x007C	0x000000  	0
0x007E	0x000000  	0
0x0080	0x000000  	0
0x0082	0x000000  	0
0x0084	0x000000  	0
0x0086	0x000000  	0
0x0088	0x000000  	0
0x008A	0x000000  	0
0x008C	0x000000  	0
0x008E	0x000000  	0
0x0090	0x000000  	0
0x0092	0x000000  	0
0x0094	0x000000  	0
0x0096	0x000000  	0
0x0098	0x000000  	0
0x009A	0x000000  	0
0x009C	0x000000  	0
0x009E	0x000000  	0
0x00A0	0x000000  	0
0x00A2	0x000000  	0
0x00A4	0x000000  	0
0x00A6	0x000000  	0
0x00A8	0x000000  	0
0x00AA	0x000000  	0
0x00AC	0x000000  	0
0x00AE	0x000000  	0
0x00B0	0x000000  	0
0x00B2	0x000000  	0
0x00B4	0x000000  	0
0x00B6	0x000000  	0
0x00B8	0x000000  	0
0x00BA	0x000000  	0
0x00BC	0x000000  	0
0x00BE	0x000000  	0
0x00C0	0x000000  	0
0x00C2	0x000000  	0
0x00C4	0x000000  	0
0x00C6	0x000000  	0
0x00C8	0x000000  	0
0x00CA	0x000000  	0
0x00CC	0x000000  	0
0x00CE	0x000000  	0
0x00D0	0x000000  	0
0x00D2	0x000000  	0
0x00D4	0x000000  	0
0x00D6	0x000000  	0
0x00D8	0x000000  	0
0x00DA	0x000000  	0
0x00DC	0x000000  	0
0x00DE	0x000000  	0
0x00E0	0x000000  	0
0x00E2	0x000000  	0
0x00E4	0x000000  	0
0x00E6	0x000000  	0
0x00E8	0x000000  	0
0x00EA	0x000000  	0
0x00EC	0x000000  	0
0x00EE	0x000000  	0
0x00F0	0x000000  	0
0x00F2	0x000000  	0
0x00F4	0x000000  	0
0x00F6	0x000000  	0
0x00F8	0x000000  	0
0x00FA	0x000000  	0
0x00FC	0x000000  	0
0x00FE	0x000000  	0
0x0100	0x000000  	0
0x0102	0x000000  	0
0x0104	0x000000  	0
0x0106	0x000000  	0
0x0108	0x000000  	0
0x010A	0x000000  	0
0x010C	0x000000  	0
0x010E	0x000000  	0
0x0110	0x000000  	0
0x0112	0x000000  	0
0x0114	0x000000  	0
0x0116	0x000000  	0
0x0118	0x000000  	0
0x011A	0x000000  	0
0x011C	0x000000  	0
0x011E	0x000000  	0
0x0120	0x000000  	0
0x0122	0x000000  	0
0x0124	0x000000  	0
0x0126	0x000000  	0
0x0128	0x000000  	0
0x012A	0x000000  	0
0x012C	0x000000  	0
0x012E	0x000000  	0
0x0130	0x000000  	0
0x0132	0x000000  	0
0x0134	0x000000  	0
0x0136	0x000000  	0
0x0138	0x000000  	0
0x013A	0x000000  	0
0x013C	0x000000  	0
0x013E	0x000000  	0
0x0140	0x000000  	0
0x0142	0x000000  	0
0x0144	0x000000  	0
0x0146	0x000000  	0
0x0148	0x000000  	0
0x014A	0x000000  	0
0x014C	0x000000  	0
0x014E	0x000000  	0
0x0150	0x000000  	0
0x0152	0x000000  	0
0x0154	0x000000  	0
0x0156	0x000000  	0
0x0158	0x000000  	0
0x015A	0x000000  	0
0x015C	0x000000  	0
0x015E	0x000000  	0
0x0160	0x000000  	0
0x0162	0x000000  	0
0x0164	0x000000  	0
0x0166	0x000000  	0
0x0168	0x000000  	0
0x016A	0x000000  	0
0x016C	0x000000  	0
0x016E	0x000000  	0
0x0170	0x000000  	0
0x0172	0x000000  	0
0x0174	0x000000  	0
0x0176	0x000000  	0
0x0178	0x000000  	0
0x017A	0x000000  	0
0x017C	0x000000  	0
0x017E	0x000000  	0
0x0180	0x000000  	0
0x0182	0x000000  	0
0x0184	0x000000  	0
0x0186	0x000000  	0
0x0188	0x000000  	0
0x018A	0x000000  	0
0x018C	0x000000  	0
0x018E	0x000000  	0
0x0190	0x000000  	0
0x0192	0x000000  	0
0x0194	0x000000  	0
0x0196	0x000000  	0
0x0198	0x000000  	0
0x019A	0x000000  	0
0x019C	0x000000  	0
0x019E	0x000000  	0
0x01A0	0x000000  	0
0x01A2	0x000000  	0
0x01A4	0x000000  	0
0x01A6	0x000000  	0
0x01A8	0x000000  	0
0x01AA	0x000000  	0
0x01AC	0x000000  	0
0x01AE	0x000000  	0
0x01B0	0x000000  	0
0x01B2	0x000000  	0
0x01B4	0x000000  	0
0x01B6	0x000000  	0
0x01B8	0x000000  	0
0x01BA	0x000000  	0
0x01BC	0x000000  	0
0x01BE	0x000000  	0
0x01C0	0x000000  	0
0x01C2	0x000000  	0
0x01C4	0x000000  	0
0x01C6	0x000000  	0
0x01C8	0x000000  	0
0x01CA	0x000000  	0
0x01CC	0x000000  	0
0x01CE	0x000000  	0
0x01D0	0x000000  	0
0x01D2	0x000000  	0
0x01D4	0x000000  	0
0x01D6	0x000000  	0
0x01D8	0x000000  	0
0x01DA	0x000000  	0
0x01DC	0x000000  	0
0x01DE	0x000000  	0
0x01E0	0x000000  	0
0x01E2	0x000000  	0
0x01E4	0x000000  	0
0x01E6	0x000000  	0
0x01E8	0x000000  	0
0x01EA	0x000000  	0
0x01EC	0x000000  	0
0x01EE	0x000000  	0
0x01F0	0x000000  	0
0x01F2	0x000000  	0
0x01F4	0x000000  	0
0x01F6	0x000000  	0
0x01F8	0x000000  	0
0x01FA	0x000000  	0
0x01FC	0x000000  	0
0x01FE	0x000000  	0
_main:
0x1230	0x20BB4F  	MOV	#2996, W15
0x1232	0x20FFF0  	MOV	#4095, W0
0x1234	0xB7A020  	MOV	WREG, SPLIM
0x1236	0x200000  	MOV	#0, W0
0x1238	0xB7A034  	MOV	WREG, PSVPAG
0x123A	0x200040  	MOV	#4, W0
0x123C	0xB72044  	IOR	CORCON
0x123E	0x000000021444  	CALL	5188
;SensorNivel.c,157 :: 		void main() {
;SensorNivel.c,160 :: 		ConfiguracionPrincipal();
0x1242	0x781F8A  	PUSH	W10
0x1244	0x781F8B  	PUSH	W11
0x1246	0x07FF06  	RCALL	_ConfiguracionPrincipal
;SensorNivel.c,164 :: 		i = 0;
0x1248	0xEF2000  	CLR	W0
0x124A	0x885B60  	MOV	W0, _i
;SensorNivel.c,165 :: 		j = 0;
0x124C	0xEF2000  	CLR	W0
0x124E	0x885C40  	MOV	W0, _j
;SensorNivel.c,166 :: 		x = 0;
0x1250	0xEF2000  	CLR	W0
0x1252	0x884090  	MOV	W0, _x
;SensorNivel.c,167 :: 		y = 0;
0x1254	0xEF2000  	CLR	W0
0x1256	0x8841B0  	MOV	W0, _y
;SensorNivel.c,170 :: 		T2 = 0;
0x1258	0xEF2000  	CLR	W0
0x125A	0xEF2002  	CLR	W1
0x125C	0x885C90  	MOV	W0, _T2
0x125E	0x885CA1  	MOV	W1, _T2+2
;SensorNivel.c,171 :: 		bm = 0;
0x1260	0x20B641  	MOV	#lo_addr(_bm), W1
0x1262	0xEF2000  	CLR	W0
0x1264	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,172 :: 		TOF = 0;
0x1266	0xEF2000  	CLR	W0
0x1268	0xEF2002  	CLR	W1
0x126A	0x885C20  	MOV	W0, _TOF
0x126C	0x885C31  	MOV	W1, _TOF+2
;SensorNivel.c,173 :: 		temperaturaRaw = 0;
0x126E	0xEF2000  	CLR	W0
0x1270	0x885C10  	MOV	W0, _temperaturaRaw
;SensorNivel.c,174 :: 		pulsosDistancia = 110;
0x1272	0x20B651  	MOV	#lo_addr(_pulsosDistancia), W1
0x1274	0xB3C6E0  	MOV.B	#110, W0
0x1276	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,177 :: 		banRSI = 0;
0x1278	0x208351  	MOV	#lo_addr(_banRSI), W1
0x127A	0xEF2000  	CLR	W0
0x127C	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,178 :: 		banRSC = 0;
0x127E	0x208381  	MOV	#lo_addr(_banRSC), W1
0x1280	0xEF2000  	CLR	W0
0x1282	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,179 :: 		byteRS485 = 0;
0x1284	0x208311  	MOV	#lo_addr(_byteRS485), W1
0x1286	0xEF2000  	CLR	W0
0x1288	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,180 :: 		i_rs485 = 0;
0x128A	0xEF2000  	CLR	W0
0x128C	0x884190  	MOV	W0, _i_rs485
;SensorNivel.c,181 :: 		funcionRS485 = 0;
0x128E	0x208341  	MOV	#lo_addr(_funcionRS485), W1
0x1290	0xEF2000  	CLR	W0
0x1292	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,182 :: 		subFuncionRS485 = 0;
0x1294	0x208391  	MOV	#lo_addr(_subFuncionRS485), W1
0x1296	0xEF2000  	CLR	W0
0x1298	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,183 :: 		numDatosRS485 = 0;
0x129A	0xEF2000  	CLR	W0
0x129C	0x8841E0  	MOV	W0, _numDatosRS485
;SensorNivel.c,184 :: 		ptrNumDatosRS485 = (unsigned char *) & numDatosRS485;
0x129E	0x2083C0  	MOV	#lo_addr(_numDatosRS485), W0
0x12A0	0x8841F0  	MOV	W0, _ptrNumDatosRS485
;SensorNivel.c,185 :: 		MSRS485 = 0;
0x12A2	0xA9A2CC  	BCLR	LATB5_bit, BitPos(LATB5_bit+0)
;SensorNivel.c,186 :: 		contTMR3 = 0;
0x12A4	0x2083B1  	MOV	#lo_addr(_contTMR3), W1
0x12A6	0xEF2000  	CLR	W0
0x12A8	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,189 :: 		banderaPeticion = 0;
0x12AA	0x20B811  	MOV	#lo_addr(_banderaPeticion), W1
0x12AC	0xEF2000  	CLR	W0
0x12AE	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,190 :: 		banderaUART = 0;
0x12B0	0x2083A1  	MOV	#lo_addr(_banderaUART), W1
0x12B2	0xEF2000  	CLR	W0
0x12B4	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,193 :: 		LED1 = 0;
0x12B6	0xA982C4  	BCLR	LATA4_bit, BitPos(LATA4_bit+0)
;SensorNivel.c,194 :: 		LED2 = 1;
0x12B8	0xA882CC  	BSET	LATB4_bit, BitPos(LATB4_bit+0)
;SensorNivel.c,196 :: 		ip=0;
0x12BA	0x208301  	MOV	#lo_addr(_ip), W1
0x12BC	0xEF2000  	CLR	W0
0x12BE	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,199 :: 		while(1){
L_main6:
;SensorNivel.c,200 :: 		if (banderaPeticion==1){
0x12C0	0x20B810  	MOV	#lo_addr(_banderaPeticion), W0
0x12C2	0x784010  	MOV.B	[W0], W0
0x12C4	0xE10461  	CP.B	W0, #1
0x12C6	0x3A0003  	BRA NZ	L_main8
L__main123:
;SensorNivel.c,202 :: 		ProcesarSolicitud(solicitudCabeceraRS485, solicitudPyloadRS485);
0x12C8	0x2081FB  	MOV	#lo_addr(_solicitudPyloadRS485), W11
0x12CA	0x2081AA  	MOV	#lo_addr(_solicitudCabeceraRS485), W10
0x12CC	0x07FE1B  	RCALL	_ProcesarSolicitud
;SensorNivel.c,204 :: 		}
L_main8:
;SensorNivel.c,205 :: 		}
0x12CE	0x37FFF8  	BRA	L_main6
;SensorNivel.c,208 :: 		}
L_end_main:
0x12D0	0x7805CF  	POP	W11
0x12D2	0x78054F  	POP	W10
L__main_end_loop:
0x12D4	0x37FFFF  	BRA	L__main_end_loop
; end of _main
_ConfiguracionPrincipal:
;SensorNivel.c,216 :: 		void ConfiguracionPrincipal(){
;SensorNivel.c,219 :: 		CLKDIVbits.PLLPRE = 0;                                                     //PLLPRE<4:0> = 0  ->  N1 = 2    8MHz / 2 = 4MHz
0x1054	0x781F8A  	PUSH	W10
0x1056	0x781F8B  	PUSH	W11
0x1058	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x105A	0x784090  	MOV.B	[W0], W1
0x105C	0xB3CE00  	MOV.B	#224, W0
0x105E	0x60C080  	AND.B	W1, W0, W1
0x1060	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x1062	0x784801  	MOV.B	W1, [W0]
;SensorNivel.c,220 :: 		PLLFBD = 38;                                                               //PLLDIV<8:0> = 38 ->  M = 40    4MHz * 40 = 160MHz
0x1064	0x200260  	MOV	#38, W0
0x1066	0xB7A746  	MOV	WREG, PLLFBD
;SensorNivel.c,221 :: 		CLKDIVbits.PLLPOST = 0;                                                    //PLLPOST<1:0> = 0 ->  N2 = 2    160MHz / 2 = 80MHz
0x1068	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x106A	0x784090  	MOV.B	[W0], W1
0x106C	0xB3C3F0  	MOV.B	#63, W0
0x106E	0x60C080  	AND.B	W1, W0, W1
0x1070	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x1072	0x784801  	MOV.B	W1, [W0]
;SensorNivel.c,224 :: 		AD1PCFGL = 0xFFFD;                                                         //Configura el puerto AN1 como entrada analogica y todas las demas como digitales
0x1074	0x2FFFD0  	MOV	#65533, W0
0x1076	0xB7A32C  	MOV	WREG, AD1PCFGL
;SensorNivel.c,225 :: 		TRISA1_bit = 1;                                                            //Establece el pin RA1 como entrada
0x1078	0xA822C0  	BSET	TRISA1_bit, BitPos(TRISA1_bit+0)
;SensorNivel.c,226 :: 		TRISB = 0xFF40;                                                            //TRISB = 11111111 01000000
0x107A	0x2FF400  	MOV	#65344, W0
0x107C	0xB7A2C8  	MOV	WREG, TRISB
;SensorNivel.c,227 :: 		MSRS485_Direction = 0;                                                     //MSRS485 out
0x107E	0xA9A2C8  	BCLR	TRISB5_bit, BitPos(TRISB5_bit+0)
;SensorNivel.c,228 :: 		LED1_Direction = 0;                                                        //LED1 out
0x1080	0xA982C0  	BCLR	TRISA4_bit, BitPos(TRISA4_bit+0)
;SensorNivel.c,230 :: 		AD1CON1.AD12B = 0;                                                         //Configura el ADC en modo de 10 bits
0x1082	0xA94321  	BCLR	AD1CON1, #10
;SensorNivel.c,231 :: 		AD1CON1bits.FORM = 0x00;                                                   //Formato de la canversion: 00->(0_1023)|01->(-512_511)|02->(0_0.999)|03->(-1_0.999)
0x1084	0x801901  	MOV	AD1CON1bits, W1
0x1086	0x2FCFF0  	MOV	#64767, W0
0x1088	0x608000  	AND	W1, W0, W0
0x108A	0xB7A320  	MOV	WREG, AD1CON1bits
;SensorNivel.c,232 :: 		AD1CON1.SIMSAM = 0;                                                        //0 -> Muestrea multiples canales individualmente en secuencia
0x108C	0xA96320  	BCLR	AD1CON1, #3
;SensorNivel.c,233 :: 		AD1CON1.ADSIDL = 0;                                                        //Continua con la operacion del modulo durante el modo desocupado
0x108E	0xA9A321  	BCLR	AD1CON1, #13
;SensorNivel.c,234 :: 		AD1CON1.ASAM = 1;                                                          //Muestreo automatico
0x1090	0xA84320  	BSET	AD1CON1, #2
;SensorNivel.c,235 :: 		AD1CON1bits.SSRC = 0x00;                                                   //Conversion manual
0x1092	0x203200  	MOV	#lo_addr(AD1CON1bits), W0
0x1094	0x784090  	MOV.B	[W0], W1
0x1096	0xB3C1F0  	MOV.B	#31, W0
0x1098	0x60C080  	AND.B	W1, W0, W1
0x109A	0x203200  	MOV	#lo_addr(AD1CON1bits), W0
0x109C	0x784801  	MOV.B	W1, [W0]
;SensorNivel.c,236 :: 		AD1CON2bits.VCFG = 0;                                                      //Selecciona AVDD y AVSS como fuentes de voltaje de referencia
0x109E	0x801911  	MOV	AD1CON2bits, W1
0x10A0	0x21FFF0  	MOV	#8191, W0
0x10A2	0x608000  	AND	W1, W0, W0
0x10A4	0xB7A322  	MOV	WREG, AD1CON2bits
;SensorNivel.c,237 :: 		AD1CON2bits.CHPS = 0;                                                      //Selecciona unicamente el canal CH0
0x10A6	0x801911  	MOV	AD1CON2bits, W1
0x10A8	0x2FCFF0  	MOV	#64767, W0
0x10AA	0x608000  	AND	W1, W0, W0
0x10AC	0xB7A322  	MOV	WREG, AD1CON2bits
;SensorNivel.c,238 :: 		AD1CON2.CSCNA = 0;                                                         //No escanea las entradas de CH0 durante la Muestra A
0x10AE	0xA94323  	BCLR	AD1CON2, #10
;SensorNivel.c,239 :: 		AD1CON2.BUFM = 0;                                                          //Bit de seleccion del modo de relleno del bufer, 0 -> Siempre comienza a llenar el buffer desde el principio
0x10B0	0xA92322  	BCLR	AD1CON2, #1
;SensorNivel.c,240 :: 		AD1CON2.ALTS = 0x00;                                                       //Utiliza siempre la seleccion de entrada de canal para la muestra A
0x10B2	0xA90322  	BCLR	AD1CON2, #0
;SensorNivel.c,241 :: 		AD1CON3.ADRC = 0;                                                          //Selecciona el reloj de conversion del ADC derivado del reloj del sistema
0x10B4	0xA9E325  	BCLR	AD1CON3, #15
;SensorNivel.c,242 :: 		AD1CON3bits.ADCS = 0x02;                                                   //Configura el periodo del reloj del ADC fijando el valor de los bits ADCS segun la formula: TAD = TCY*(ADCS+1) = 75ns  -> ADCS = 2
0x10B6	0xB3C020  	MOV.B	#2, W0
0x10B8	0x784080  	MOV.B	W0, W1
0x10BA	0x203240  	MOV	#lo_addr(AD1CON3bits), W0
0x10BC	0x68C090  	XOR.B	W1, [W0], W1
0x10BE	0xB3CFF0  	MOV.B	#255, W0
0x10C0	0x60C080  	AND.B	W1, W0, W1
0x10C2	0x203240  	MOV	#lo_addr(AD1CON3bits), W0
0x10C4	0x68C090  	XOR.B	W1, [W0], W1
0x10C6	0x203240  	MOV	#lo_addr(AD1CON3bits), W0
0x10C8	0x784801  	MOV.B	W1, [W0]
;SensorNivel.c,243 :: 		AD1CON3bits.SAMC = 0x02;                                                   //Auto Sample Time bits, 2 -> 2*TAD (minimo periodo de muestreo para 10 bits)
0x10CA	0x202000  	MOV	#512, W0
0x10CC	0x780080  	MOV	W0, W1
0x10CE	0x203240  	MOV	#lo_addr(AD1CON3bits), W0
0x10D0	0x688090  	XOR	W1, [W0], W1
0x10D2	0x21F000  	MOV	#7936, W0
0x10D4	0x608080  	AND	W1, W0, W1
0x10D6	0x203240  	MOV	#lo_addr(AD1CON3bits), W0
0x10D8	0x688090  	XOR	W1, [W0], W1
0x10DA	0x881921  	MOV	W1, AD1CON3bits
;SensorNivel.c,244 :: 		AD1CHS0.CH0NB = 0;                                                         //Channel 0 negative input is VREF-
0x10DC	0xA9E329  	BCLR	AD1CHS0, #15
;SensorNivel.c,245 :: 		AD1CHS0bits.CH0SB = 0x01;                                                  //Channel 0 positive input is AN1
0x10DE	0x201000  	MOV	#256, W0
0x10E0	0x780080  	MOV	W0, W1
0x10E2	0x203280  	MOV	#lo_addr(AD1CHS0bits), W0
0x10E4	0x688090  	XOR	W1, [W0], W1
0x10E6	0x21F000  	MOV	#7936, W0
0x10E8	0x608080  	AND	W1, W0, W1
0x10EA	0x203280  	MOV	#lo_addr(AD1CHS0bits), W0
0x10EC	0x688090  	XOR	W1, [W0], W1
0x10EE	0x881941  	MOV	W1, AD1CHS0bits
;SensorNivel.c,246 :: 		AD1CHS0.CH0NA = 0;                                                         //Channel 0 negative input is VREF-
0x10F0	0xA9E328  	BCLR	AD1CHS0, #7
;SensorNivel.c,247 :: 		AD1CHS0bits.CH0SA = 0x01;                                                  //Channel 0 positive input is AN1
0x10F2	0xB3C010  	MOV.B	#1, W0
0x10F4	0x784080  	MOV.B	W0, W1
0x10F6	0x203280  	MOV	#lo_addr(AD1CHS0bits), W0
0x10F8	0x68C090  	XOR.B	W1, [W0], W1
0x10FA	0x60C0FF  	AND.B	W1, #31, W1
0x10FC	0x203280  	MOV	#lo_addr(AD1CHS0bits), W0
0x10FE	0x68C090  	XOR.B	W1, [W0], W1
0x1100	0x203280  	MOV	#lo_addr(AD1CHS0bits), W0
0x1102	0x784801  	MOV.B	W1, [W0]
;SensorNivel.c,248 :: 		AD1CHS123 = 0;                                                             //AD1CHS123: ADC1 INPUT CHANNEL 1, 2, 3 SELECT REGISTER
0x1104	0xEF2326  	CLR	AD1CHS123
;SensorNivel.c,249 :: 		AD1CSSL = 0x00;                                                            //Se salta todos los puertos ANx para los escaneos de entrada
0x1106	0xEF2330  	CLR	AD1CSSL
;SensorNivel.c,250 :: 		AD1CON1.ADON = 1;                                                          //Enciende el modulo ADC
0x1108	0xA8E321  	BSET	AD1CON1, #15
;SensorNivel.c,253 :: 		T1CON = 0x8000;                                                            //Habilita el TMR1, selecciona el reloj interno, desabilita el modo Gated Timer, selecciona el preescalador 1:1,
0x110A	0x280000  	MOV	#32768, W0
0x110C	0xB7A104  	MOV	WREG, T1CON
;SensorNivel.c,254 :: 		IEC0.T1IE = 1;                                                             //Habilita la interrupcion por desborde de TMR1
0x110E	0xA86094  	BSET	IEC0, #3
;SensorNivel.c,255 :: 		T1IF_bit = 0;                                                              //Limpia la bandera de interrupcion
0x1110	0xA96084  	BCLR	T1IF_bit, BitPos(T1IF_bit+0)
;SensorNivel.c,256 :: 		PR1 = 200;                                                                 //Genera una interrupcion cada 5us (Fs=200KHz)
0x1112	0x200C80  	MOV	#200, W0
0x1114	0xB7A102  	MOV	WREG, PR1
;SensorNivel.c,257 :: 		T1CON.TON = 0;                                                             //Apaga la interrupcion
0x1116	0xA9E105  	BCLR	T1CON, #15
;SensorNivel.c,260 :: 		T2CON = 0x8000;                                                            //Habilita el TMR2, selecciona el reloj interno, desabilita el modo Gated Timer, selecciona el preescalador 1:1,
0x1118	0x280000  	MOV	#32768, W0
0x111A	0xB7A110  	MOV	WREG, T2CON
;SensorNivel.c,261 :: 		IEC0.T2IE = 1;                                                             //Habilita la interrupcion por desborde de TMR2
0x111C	0xA8E094  	BSET	IEC0, #7
;SensorNivel.c,262 :: 		T2IF_bit = 0;                                                              //Limpia la bandera de interrupcion
0x111E	0xA9E084  	BCLR	T2IF_bit, BitPos(T2IF_bit+0)
;SensorNivel.c,263 :: 		PR2 = 500;                                                                 //Genera una interrupcion cada 12.5us
0x1120	0x201F40  	MOV	#500, W0
0x1122	0xB7A10C  	MOV	WREG, PR2
;SensorNivel.c,264 :: 		T2CON.TON = 0;                                                             //Apaga la interrupcion
0x1124	0xA9E111  	BCLR	T2CON, #15
;SensorNivel.c,268 :: 		T3CON = 0x8030;                                                            //Habilita el TMR3
0x1126	0x280300  	MOV	#32816, W0
0x1128	0xB7A112  	MOV	WREG, T3CON
;SensorNivel.c,269 :: 		IEC0.T3IE = 1;                                                             //Habilita la interrupcion por desborde de TMR3
0x112A	0xA80095  	BSET	IEC0, #8
;SensorNivel.c,270 :: 		T3IF_bit = 0;                                                              //Limpia la bandera de interrupcion
0x112C	0xA90085  	BCLR	T3IF_bit, BitPos(T3IF_bit+0)
;SensorNivel.c,271 :: 		PR3 = 46875;                                                               //Genera una interrupcion cada 300ms
0x112E	0x2B71B0  	MOV	#46875, W0
0x1130	0xB7A10E  	MOV	WREG, PR3
;SensorNivel.c,272 :: 		T3CON.TON = 0;                                                             //Apaga la interrupcion
0x1132	0xA9E113  	BCLR	T3CON, #15
;SensorNivel.c,276 :: 		RPINR18bits.U1RXR = 0x06;                                                  //Asisgna Rx a RP6
0x1134	0xB3C060  	MOV.B	#6, W0
0x1136	0x784080  	MOV.B	W0, W1
0x1138	0x206A40  	MOV	#lo_addr(RPINR18bits), W0
0x113A	0x68C090  	XOR.B	W1, [W0], W1
0x113C	0x60C0FF  	AND.B	W1, #31, W1
0x113E	0x206A40  	MOV	#lo_addr(RPINR18bits), W0
0x1140	0x68C090  	XOR.B	W1, [W0], W1
0x1142	0x206A40  	MOV	#lo_addr(RPINR18bits), W0
0x1144	0x784801  	MOV.B	W1, [W0]
;SensorNivel.c,277 :: 		RPOR3bits.RP7R = 0x03;                                                     //Asigna Tx a RP7
0x1146	0x203000  	MOV	#768, W0
0x1148	0x780080  	MOV	W0, W1
0x114A	0x206C60  	MOV	#lo_addr(RPOR3bits), W0
0x114C	0x688090  	XOR	W1, [W0], W1
0x114E	0x21F000  	MOV	#7936, W0
0x1150	0x608080  	AND	W1, W0, W1
0x1152	0x206C60  	MOV	#lo_addr(RPOR3bits), W0
0x1154	0x688090  	XOR	W1, [W0], W1
0x1156	0x883631  	MOV	W1, RPOR3bits
;SensorNivel.c,278 :: 		IEC0.U1RXIE = 1;                                                           //Habilita la interrupcion por recepcion de dato por UART
0x1158	0xA86095  	BSET	IEC0, #11
;SensorNivel.c,279 :: 		U1RXIF_bit = 0;                                                            //Limpia la bandera de interrupcion de UARTRX
0x115A	0xA96085  	BCLR	U1RXIF_bit, BitPos(U1RXIF_bit+0)
;SensorNivel.c,280 :: 		UART1_Init(19200);                                                         //Inicializa el modulo UART a 9600 bps
0x115C	0x24B00A  	MOV	#19200, W10
0x115E	0x20000B  	MOV	#0, W11
0x1160	0x07FDD8  	RCALL	_UART1_Init
;SensorNivel.c,283 :: 		IPC0bits.T1IP = 0x07;                                                      //Nivel de prioridad de la interrupcion por desbordamiento del TMR1
0x1162	0x800521  	MOV	IPC0bits, W1
0x1164	0x270000  	MOV	#28672, W0
0x1166	0x708000  	IOR	W1, W0, W0
0x1168	0xB7A0A4  	MOV	WREG, IPC0bits
;SensorNivel.c,284 :: 		IPC1bits.T2IP = 0x06;                                                      //Nivel de prioridad de la interrupcion por desbordamiento del TMR2
0x116A	0x260000  	MOV	#24576, W0
0x116C	0x780080  	MOV	W0, W1
0x116E	0x200A60  	MOV	#lo_addr(IPC1bits), W0
0x1170	0x688090  	XOR	W1, [W0], W1
0x1172	0x270000  	MOV	#28672, W0
0x1174	0x608080  	AND	W1, W0, W1
0x1176	0x200A60  	MOV	#lo_addr(IPC1bits), W0
0x1178	0x688090  	XOR	W1, [W0], W1
0x117A	0x880531  	MOV	W1, IPC1bits
;SensorNivel.c,286 :: 		IPC2bits.U1RXIP = 0x05;                                                    //Nivel de prioridad de la interrupcion UARTRX
0x117C	0x250000  	MOV	#20480, W0
0x117E	0x780080  	MOV	W0, W1
0x1180	0x200A80  	MOV	#lo_addr(IPC2bits), W0
0x1182	0x688090  	XOR	W1, [W0], W1
0x1184	0x270000  	MOV	#28672, W0
0x1186	0x608080  	AND	W1, W0, W1
0x1188	0x200A80  	MOV	#lo_addr(IPC2bits), W0
0x118A	0x688090  	XOR	W1, [W0], W1
0x118C	0x880541  	MOV	W1, IPC2bits
;SensorNivel.c,288 :: 		Delay_ms(100);                                                             //Espera hasta que se estabilicen los cambios
0x118E	0x200158  	MOV	#21, W8
0x1190	0x2585B7  	MOV	#22619, W7
L_ConfiguracionPrincipal9:
0x1192	0xED200E  	DEC	W7
0x1194	0x3AFFFE  	BRA NZ	L_ConfiguracionPrincipal9
0x1196	0xED2010  	DEC	W8
0x1198	0x3AFFFC  	BRA NZ	L_ConfiguracionPrincipal9
;SensorNivel.c,290 :: 		}
L_end_ConfiguracionPrincipal:
0x119A	0x7805CF  	POP	W11
0x119C	0x78054F  	POP	W10
0x119E	0x060000  	RETURN
; end of _ConfiguracionPrincipal
_UART1_Init:
0x0D12	0xFA0008  	LNK	#8
;__Lib_UART_1_p24_p33.c,118 :: 		
;__Lib_UART_1_p24_p33.c,121 :: 		
0x0D14	0x208340  	MOV	#lo_addr(_UART1_Write), W0
0x0D16	0x8840A0  	MOV	W0, _UART_Wr_Ptr
;__Lib_UART_1_p24_p33.c,122 :: 		
0x0D18	0x20EF80  	MOV	#lo_addr(_UART1_Read), W0
0x0D1A	0x8840B0  	MOV	W0, _UART_Rd_Ptr
;__Lib_UART_1_p24_p33.c,123 :: 		
0x0D1C	0x2FFFF0  	MOV	#lo_addr(_UART1_Data_Ready), W0
0x0D1E	0x8840C0  	MOV	W0, _UART_Rdy_Ptr
;__Lib_UART_1_p24_p33.c,124 :: 		
0x0D20	0x208420  	MOV	#lo_addr(_UART1_Tx_Idle), W0
0x0D22	0x884170  	MOV	W0, _UART_Tx_Idle_Ptr
;__Lib_UART_1_p24_p33.c,129 :: 		
0x0D24	0xEF2220  	CLR	U1MODE
;__Lib_UART_1_p24_p33.c,130 :: 		
0x0D26	0x280000  	MOV	#32768, W0
0x0D28	0xB7A222  	MOV	WREG, U1STA
;__Lib_UART_1_p24_p33.c,134 :: 		
0x0D2A	0xA96220  	BCLR	U1MODE, #3
;__Lib_UART_1_p24_p33.c,135 :: 		
0x0D2C	0x07FD90  	RCALL	_Get_Fosc_kHz
; tmp start address is: 4 (W2)
0x0D2E	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_1_p24_p33.c,137 :: 		
0x0D30	0x203E80  	MOV	#1000, W0
0x0D32	0x200001  	MOV	#0, W1
0x0D34	0x07FD76  	RCALL	__Multiply_32x32
0x0D36	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_1_p24_p33.c,139 :: 		
0x0D38	0x07FD46  	RCALL	_Get_Fosc_Per_Cyc
0x0D3A	0xDE0041  	LSR	W0, #1, W0
0x0D3C	0x400064  	ADD	W0, #4, W0
0x0D3E	0x780080  	MOV	W0, W1
0x0D40	0x470060  	ADD	W14, #0, W0
0x0D42	0xBE880A  	MOV.D	W10, [W0]
L__UART1_Init54:
0x0D44	0xE90081  	DEC	W1, W1
0x0D46	0x350003  	BRA LT	L__UART1_Init55
0x0D48	0xD01810  	SL	[W0], [W0++]
0x0D4A	0xD29010  	RLC	[W0], [W0--]
0x0D4C	0x37FFFB  	BRA	L__UART1_Init54
L__UART1_Init55:
;__Lib_UART_1_p24_p33.c,141 :: 		
0x0D4E	0xBE9F82  	PUSH.D	W2
0x0D50	0xBE9F8A  	PUSH.D	W10
0x0D52	0xBE0002  	MOV.D	W2, W0
0x0D54	0x90010E  	MOV	[W14+0], W2
0x0D56	0x90019E  	MOV	[W14+2], W3
0x0D58	0xEB0200  	CLR	W4
0x0D5A	0x07FD37  	RCALL	__Modulus_32x32
0x0D5C	0xBE054F  	POP.D	W10
0x0D5E	0xBE014F  	POP.D	W2
0x0D60	0x980720  	MOV	W0, [W14+4]
0x0D62	0x980731  	MOV	W1, [W14+6]
;__Lib_UART_1_p24_p33.c,142 :: 		
0x0D64	0xBE9F8A  	PUSH.D	W10
; tmp end address is: 4 (W2)
0x0D66	0xBE0002  	MOV.D	W2, W0
0x0D68	0x90010E  	MOV	[W14+0], W2
0x0D6A	0x90019E  	MOV	[W14+2], W3
0x0D6C	0xEB0200  	CLR	W4
0x0D6E	0x07FD77  	RCALL	__Divide_32x32
0x0D70	0xBE054F  	POP.D	W10
; tmp start address is: 6 (W3)
0x0D72	0x780180  	MOV	W0, W3
0x0D74	0x780201  	MOV	W1, W4
;__Lib_UART_1_p24_p33.c,144 :: 		
0x0D76	0x470060  	ADD	W14, #0, W0
0x0D78	0xD10150  	LSR	[++W0], W2
0x0D7A	0xD380C0  	RRC	[--W0], W1
0x0D7C	0x470064  	ADD	W14, #4, W0
0x0D7E	0xE10830  	CP	W1, [W0++]
0x0D80	0xE19020  	CPB	W2, [W0--]
0x0D82	0x310007  	BRA GEU	L__UART1_Init37
L__UART1_Init56:
;__Lib_UART_1_p24_p33.c,145 :: 		
0x0D84	0x418061  	ADD	W3, #1, W0
0x0D86	0x4A00E0  	ADDC	W4, #0, W1
; tmp end address is: 6 (W3)
; tmp start address is: 10 (W5)
0x0D88	0x780280  	MOV	W0, W5
0x0D8A	0x780301  	MOV	W1, W6
; tmp end address is: 10 (W5)
0x0D8C	0x780105  	MOV	W5, W2
0x0D8E	0x780186  	MOV	W6, W3
0x0D90	0x370002  	BRA	L_UART1_Init13
L__UART1_Init37:
;__Lib_UART_1_p24_p33.c,144 :: 		
0x0D92	0x780103  	MOV	W3, W2
0x0D94	0x780184  	MOV	W4, W3
;__Lib_UART_1_p24_p33.c,145 :: 		
L_UART1_Init13:
;__Lib_UART_1_p24_p33.c,148 :: 		
; tmp start address is: 4 (W2)
0x0D96	0x718002  	IOR	W3, W2, W0
0x0D98	0x3A0033  	BRA NZ	L__UART1_Init39
L__UART1_Init57:
; tmp end address is: 4 (W2)
;__Lib_UART_1_p24_p33.c,150 :: 		
0x0D9A	0x07FD59  	RCALL	_Get_Fosc_kHz
; tmp start address is: 4 (W2)
0x0D9C	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_1_p24_p33.c,152 :: 		
0x0D9E	0x203E80  	MOV	#1000, W0
0x0DA0	0x200001  	MOV	#0, W1
0x0DA2	0x07FD3F  	RCALL	__Multiply_32x32
0x0DA4	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_1_p24_p33.c,154 :: 		
0x0DA6	0x07FD0F  	RCALL	_Get_Fosc_Per_Cyc
0x0DA8	0xDE0041  	LSR	W0, #1, W0
0x0DAA	0xECA000  	INC2	W0
0x0DAC	0x780080  	MOV	W0, W1
0x0DAE	0x470060  	ADD	W14, #0, W0
0x0DB0	0xBE880A  	MOV.D	W10, [W0]
L__UART1_Init58:
0x0DB2	0xE90081  	DEC	W1, W1
0x0DB4	0x350003  	BRA LT	L__UART1_Init59
0x0DB6	0xD01810  	SL	[W0], [W0++]
0x0DB8	0xD29010  	RLC	[W0], [W0--]
0x0DBA	0x37FFFB  	BRA	L__UART1_Init58
L__UART1_Init59:
;__Lib_UART_1_p24_p33.c,156 :: 		
0x0DBC	0xBE9F82  	PUSH.D	W2
0x0DBE	0xBE0002  	MOV.D	W2, W0
0x0DC0	0x90010E  	MOV	[W14+0], W2
0x0DC2	0x90019E  	MOV	[W14+2], W3
0x0DC4	0xEB0200  	CLR	W4
0x0DC6	0x07FD01  	RCALL	__Modulus_32x32
0x0DC8	0xBE014F  	POP.D	W2
0x0DCA	0x980720  	MOV	W0, [W14+4]
0x0DCC	0x980731  	MOV	W1, [W14+6]
;__Lib_UART_1_p24_p33.c,157 :: 		
0x0DCE	0xBE0002  	MOV.D	W2, W0
0x0DD0	0x90010E  	MOV	[W14+0], W2
0x0DD2	0x90019E  	MOV	[W14+2], W3
0x0DD4	0xEB0200  	CLR	W4
0x0DD6	0x07FD43  	RCALL	__Divide_32x32
; tmp end address is: 4 (W2)
; tmp start address is: 6 (W3)
0x0DD8	0x780180  	MOV	W0, W3
0x0DDA	0x780201  	MOV	W1, W4
;__Lib_UART_1_p24_p33.c,159 :: 		
0x0DDC	0x470060  	ADD	W14, #0, W0
0x0DDE	0xD10150  	LSR	[++W0], W2
0x0DE0	0xD380C0  	RRC	[--W0], W1
0x0DE2	0x470064  	ADD	W14, #4, W0
0x0DE4	0xE10830  	CP	W1, [W0++]
0x0DE6	0xE19020  	CPB	W2, [W0--]
0x0DE8	0x310007  	BRA GEU	L__UART1_Init38
L__UART1_Init60:
;__Lib_UART_1_p24_p33.c,160 :: 		
0x0DEA	0x418061  	ADD	W3, #1, W0
0x0DEC	0x4A00E0  	ADDC	W4, #0, W1
; tmp end address is: 6 (W3)
; tmp start address is: 10 (W5)
0x0DEE	0x780280  	MOV	W0, W5
0x0DF0	0x780301  	MOV	W1, W6
; tmp end address is: 10 (W5)
0x0DF2	0x780105  	MOV	W5, W2
0x0DF4	0x780186  	MOV	W6, W3
0x0DF6	0x370002  	BRA	L_UART1_Init15
L__UART1_Init38:
;__Lib_UART_1_p24_p33.c,159 :: 		
0x0DF8	0x780103  	MOV	W3, W2
0x0DFA	0x780184  	MOV	W4, W3
;__Lib_UART_1_p24_p33.c,160 :: 		
L_UART1_Init15:
;__Lib_UART_1_p24_p33.c,162 :: 		
; tmp start address is: 4 (W2)
0x0DFC	0xA86220  	BSET	U1MODE, #3
; tmp end address is: 4 (W2)
;__Lib_UART_1_p24_p33.c,163 :: 		
0x0DFE	0x370000  	BRA	L_UART1_Init14
L__UART1_Init39:
;__Lib_UART_1_p24_p33.c,148 :: 		
;__Lib_UART_1_p24_p33.c,163 :: 		
L_UART1_Init14:
;__Lib_UART_1_p24_p33.c,165 :: 		
; tmp start address is: 4 (W2)
0x0E00	0x510061  	SUB	W2, #1, W0
0x0E02	0x5980E0  	SUBB	W3, #0, W1
; tmp end address is: 4 (W2)
; tmp start address is: 0 (W0)
0x0E04	0x881140  	MOV	W0, U1BRG
; tmp end address is: 0 (W0)
;__Lib_UART_1_p24_p33.c,168 :: 		
0x0E06	0xA92222  	BCLR	U1STA, #1
;__Lib_UART_1_p24_p33.c,170 :: 		
0x0E08	0xA8E221  	BSET	U1MODE, #15
;__Lib_UART_1_p24_p33.c,171 :: 		
0x0E0A	0xA84223  	BSET	U1STA, #10
;__Lib_UART_1_p24_p33.c,173 :: 		
0x0E0C	0x07FCD5  	RCALL	_Delay_100ms
0x0E0E	0x07FCD4  	RCALL	_Delay_100ms
;__Lib_UART_1_p24_p33.c,175 :: 		
L_end_UART1_Init:
0x0E10	0xFA8000  	ULNK
0x0E12	0x060000  	RETURN
; end of _UART1_Init
_Get_Fosc_kHz:
;__Lib_Delays.c,38 :: 		unsigned long Get_Fosc_kHz() {
;__Lib_Delays.c,39 :: 		return Clock_kHz();
0x084E	0x238800  	MOV	#14464, W0
0x0850	0x200011  	MOV	#1, W1
;__Lib_Delays.c,40 :: 		}
L_end_Get_Fosc_kHz:
0x0852	0x060000  	RETURN
; end of _Get_Fosc_kHz
_Get_Fosc_Per_Cyc:
;__Lib_Delays.c,63 :: 		unsigned int Get_Fosc_Per_Cyc() {
;__Lib_Delays.c,64 :: 		return __FOSC_PER_CYC;
0x07C6	0x200020  	MOV	#2, W0
;__Lib_Delays.c,65 :: 		}
L_end_Get_Fosc_Per_Cyc:
0x07C8	0x060000  	RETURN
; end of _Get_Fosc_Per_Cyc
_Delay_100ms:
;__Lib_Delays.c,666 :: 		void Delay_100ms()
;__Lib_Delays.c,668 :: 		Delay_ms(100);
0x07B8	0x200158  	MOV	#21, W8
0x07BA	0x2585B7  	MOV	#22619, W7
L_Delay_100ms33:
0x07BC	0xED200E  	DEC	W7
0x07BE	0x3AFFFE  	BRA NZ	L_Delay_100ms33
0x07C0	0xED2010  	DEC	W8
0x07C2	0x3AFFFC  	BRA NZ	L_Delay_100ms33
;__Lib_Delays.c,669 :: 		}
L_end_Delay_100ms:
0x07C4	0x060000  	RETURN
; end of _Delay_100ms
__Multiply_32x32:
0x0822	0xFA0000  	LNK	#0
;__Lib_Math.c,43 :: 		
;__Lib_Math.c,46 :: 		
0x0824	0xB80A02  	MUL.UU	W1, W2, W4
;__Lib_Math.c,47 :: 		
0x0826	0x880050  	MOV	W0, W5
;__Lib_Math.c,48 :: 		
0x0828	0xB80002  	MUL.UU	W0, W2, W0
;__Lib_Math.c,49 :: 		
0x082A	0x420081  	ADD	W4, W1, W1
;__Lib_Math.c,50 :: 		
0x082C	0xB82A03  	MUL.UU	W5, W3, W4
;__Lib_Math.c,51 :: 		
0x082E	0x420081  	ADD	W4, W1, W1
;__Lib_Math.c,54 :: 		
L_end__Multiply_32x32:
0x0830	0xFA8000  	ULNK
0x0832	0x060000  	RETURN
; end of __Multiply_32x32
__Modulus_32x32:
0x07CA	0xFA0000  	LNK	#0
;__Lib_Math.c,162 :: 		
;__Lib_Math.c,164 :: 		
0x07CC	0x070002  	RCALL	Modulus_32x32___testsus
;__Lib_Math.c,166 :: 		
0x07CE	0x00000004081E  	GOTO	the_end_Modulus_32x32
;__Lib_Math.c,171 :: 		
Modulus_32x32___testsus:
;__Lib_Math.c,172 :: 		
0x07D2	0xE20008  	CP0	W4
;__Lib_Math.c,173 :: 		
0x07D4	0x3A0002  	BRA NZ	Modulus_32x32___modsi3
;__Lib_Math.c,175 :: 		
0x07D6	0x070010  	RCALL	Modulus_32x32___umodsi3
;__Lib_Math.c,176 :: 		
0x07D8	0x060000  	RETURN
;__Lib_Math.c,178 :: 		
Modulus_32x32___modsi3:
;__Lib_Math.c,179 :: 		
0x07DA	0x781F81  	MOV	W1, [W15++]
;__Lib_Math.c,180 :: 		
0x07DC	0xE20002  	CP0	W1
;__Lib_Math.c,181 :: 		
0x07DE	0x3D0002  	BRA GE	Modulus_32x32_modtestb
;__Lib_Math.c,182 :: 		
0x07E0	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,183 :: 		
0x07E2	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,184 :: 		
Modulus_32x32_modtestb:
;__Lib_Math.c,185 :: 		
0x07E4	0xE20006  	CP0	W3
;__Lib_Math.c,186 :: 		
0x07E6	0x3D0002  	BRA GE	Modulus_32x32_calcrem
;__Lib_Math.c,187 :: 		
0x07E8	0x110160  	SUBR	W2, #0, W2
;__Lib_Math.c,188 :: 		
0x07EA	0x1981E0  	SUBBR	W3, #0, W3
;__Lib_Math.c,189 :: 		
Modulus_32x32_calcrem:
;__Lib_Math.c,190 :: 		
0x07EC	0x070005  	RCALL	Modulus_32x32___umodsi3
;__Lib_Math.c,191 :: 		
0x07EE	0xE0004F  	CP0	[--W15]
;__Lib_Math.c,192 :: 		
0x07F0	0x3B0002  	BRA NN	Modulus_32x32_exitr
;__Lib_Math.c,193 :: 		
0x07F2	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,194 :: 		
0x07F4	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,195 :: 		
Modulus_32x32_exitr:
;__Lib_Math.c,196 :: 		
0x07F6	0x060000  	RETURN
;__Lib_Math.c,197 :: 		
Modulus_32x32___umodsi3:
;__Lib_Math.c,198 :: 		
0x07F8	0x070002  	RCALL	Modulus_32x32___udivsi3
;__Lib_Math.c,199 :: 		
0x07FA	0xBE8004  	MOV.D	W4, W0
;__Lib_Math.c,200 :: 		
0x07FC	0x060000  	RETURN
;__Lib_Math.c,201 :: 		
Modulus_32x32___udivsi3:
;__Lib_Math.c,202 :: 		
0x07FE	0xB82260  	MUL.UU	W4, #0, W4
;__Lib_Math.c,203 :: 		
0x0800	0x200206  	MOV	#32, W6
;__Lib_Math.c,204 :: 		
Modulus_32x32_nextbit:
;__Lib_Math.c,205 :: 		
0x0802	0xD00000  	SL	W0, W0
;__Lib_Math.c,206 :: 		
0x0804	0xD28081  	RLC	W1, W1
;__Lib_Math.c,207 :: 		
0x0806	0xD28204  	RLC	W4, W4
;__Lib_Math.c,208 :: 		
0x0808	0xD28285  	RLC	W5, W5
;__Lib_Math.c,209 :: 		
0x080A	0xA80000  	BSET	W0, #0
;__Lib_Math.c,210 :: 		
0x080C	0x520202  	SUB	W4, W2, W4
;__Lib_Math.c,211 :: 		
0x080E	0x5A8283  	SUBB	W5, W3, W5
;__Lib_Math.c,212 :: 		
0x0810	0x3B0003  	BRA NN	Modulus_32x32_iterate
;__Lib_Math.c,213 :: 		
0x0812	0x420202  	ADD	W4, W2, W4
;__Lib_Math.c,214 :: 		
0x0814	0x4A8283  	ADDC	W5, W3, W5
;__Lib_Math.c,215 :: 		
0x0816	0xA10000  	BCLR	W0, #0
;__Lib_Math.c,216 :: 		
Modulus_32x32_iterate:
;__Lib_Math.c,217 :: 		
0x0818	0xE90306  	DEC	W6, W6
;__Lib_Math.c,218 :: 		
0x081A	0x3AFFF3  	BRA NZ	Modulus_32x32_nextbit
;__Lib_Math.c,219 :: 		
0x081C	0x060000  	RETURN
;__Lib_Math.c,222 :: 		
the_end_Modulus_32x32:
;__Lib_Math.c,225 :: 		
L_end__Modulus_32x32:
0x081E	0xFA8000  	ULNK
0x0820	0x060000  	RETURN
; end of __Modulus_32x32
__Divide_32x32:
0x085E	0xFA0000  	LNK	#0
;__Lib_Math.c,78 :: 		
;__Lib_Math.c,81 :: 		
0x0860	0x070002  	RCALL	Divide_32x32___testsus
;__Lib_Math.c,83 :: 		
0x0862	0x0000000408AC  	GOTO	the_end_Divide_32x32
;__Lib_Math.c,88 :: 		
Divide_32x32___testsus:
;__Lib_Math.c,89 :: 		
0x0866	0xE20008  	CP0	W4
;__Lib_Math.c,90 :: 		
0x0868	0x3A0002  	BRA NZ	Divide_32x32___divsi3
;__Lib_Math.c,92 :: 		
0x086A	0x070010  	RCALL	Divide_32x32___udivsi3
;__Lib_Math.c,93 :: 		
0x086C	0x060000  	RETURN
;__Lib_Math.c,95 :: 		
Divide_32x32___divsi3:
;__Lib_Math.c,96 :: 		
0x086E	0x689F83  	XOR	W1, W3, [W15++]
;__Lib_Math.c,97 :: 		
0x0870	0xE20002  	CP0	W1
;__Lib_Math.c,98 :: 		
0x0872	0x3D0002  	BRA GE	Divide_32x32_divtestb
;__Lib_Math.c,99 :: 		
0x0874	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,100 :: 		
0x0876	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,101 :: 		
Divide_32x32_divtestb:
;__Lib_Math.c,102 :: 		
0x0878	0xE20006  	CP0	W3
;__Lib_Math.c,103 :: 		
0x087A	0x3D0002  	BRA GE	Divide_32x32_calcquot
;__Lib_Math.c,104 :: 		
0x087C	0x110160  	SUBR	W2, #0, W2
;__Lib_Math.c,105 :: 		
0x087E	0x1981E0  	SUBBR	W3, #0, W3
;__Lib_Math.c,106 :: 		
Divide_32x32_calcquot:
;__Lib_Math.c,107 :: 		
0x0880	0x070005  	RCALL	Divide_32x32___udivsi3
;__Lib_Math.c,108 :: 		
0x0882	0xE0004F  	CP0	[--W15]
;__Lib_Math.c,109 :: 		
0x0884	0x3B0002  	BRA NN	Divide_32x32_returnq
;__Lib_Math.c,110 :: 		
0x0886	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,111 :: 		
0x0888	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,112 :: 		
Divide_32x32_returnq:
;__Lib_Math.c,113 :: 		
0x088A	0x060000  	RETURN
;__Lib_Math.c,114 :: 		
Divide_32x32___udivsi3:
;__Lib_Math.c,115 :: 		
0x088C	0xB82260  	MUL.UU	W4, #0, W4
;__Lib_Math.c,116 :: 		
0x088E	0x200206  	MOV	#32, W6
;__Lib_Math.c,117 :: 		
Divide_32x32_nextbit:
;__Lib_Math.c,118 :: 		
0x0890	0xD00000  	SL	W0, W0
;__Lib_Math.c,119 :: 		
0x0892	0xD28081  	RLC	W1, W1
;__Lib_Math.c,120 :: 		
0x0894	0xD28204  	RLC	W4, W4
;__Lib_Math.c,121 :: 		
0x0896	0xD28285  	RLC	W5, W5
;__Lib_Math.c,122 :: 		
0x0898	0xA80000  	BSET	W0, #0
;__Lib_Math.c,123 :: 		
0x089A	0x520202  	SUB	W4, W2, W4
;__Lib_Math.c,124 :: 		
0x089C	0x5A8283  	SUBB	W5, W3, W5
;__Lib_Math.c,125 :: 		
0x089E	0x3B0003  	BRA NN	Divide_32x32_iterate
;__Lib_Math.c,126 :: 		
0x08A0	0x420202  	ADD	W4, W2, W4
;__Lib_Math.c,127 :: 		
0x08A2	0x4A8283  	ADDC	W5, W3, W5
;__Lib_Math.c,128 :: 		
0x08A4	0xA10000  	BCLR	W0, #0
;__Lib_Math.c,129 :: 		
Divide_32x32_iterate:
;__Lib_Math.c,130 :: 		
0x08A6	0xE90306  	DEC	W6, W6
;__Lib_Math.c,131 :: 		
0x08A8	0x3AFFF3  	BRA NZ	Divide_32x32_nextbit
;__Lib_Math.c,132 :: 		
0x08AA	0x060000  	RETURN
;__Lib_Math.c,135 :: 		
the_end_Divide_32x32:
;__Lib_Math.c,138 :: 		
L_end__Divide_32x32:
0x08AC	0xFA8000  	ULNK
0x08AE	0x060000  	RETURN
; end of __Divide_32x32
_ProcesarSolicitud:
0x0F04	0xFA0008  	LNK	#8
;SensorNivel.c,295 :: 		void ProcesarSolicitud(unsigned char *cabeceraSolicitud, unsigned char *payloadSolicitud){
;SensorNivel.c,305 :: 		ptrNumDatosResp = (unsigned char *) & numDatosResp;
0x0F06	0x781F8A  	PUSH	W10
0x0F08	0x781F8B  	PUSH	W11
0x0F0A	0x781F8C  	PUSH	W12
0x0F0C	0x470062  	ADD	W14, #2, W0
; ptrNumDatosResp start address is: 18 (W9)
0x0F0E	0x780480  	MOV	W0, W9
;SensorNivel.c,306 :: 		ptrDatoInt = (unsigned char *) & datoInt;
0x0F10	0x470060  	ADD	W14, #0, W0
; ptrDatoInt start address is: 4 (W2)
0x0F12	0x780100  	MOV	W0, W2
;SensorNivel.c,307 :: 		ptrDatoFloat = (unsigned char *) & datoFloat;
0x0F14	0x470064  	ADD	W14, #4, W0
; ptrDatoFloat start address is: 6 (W3)
0x0F16	0x780180  	MOV	W0, W3
;SensorNivel.c,310 :: 		funcionSolicitud = cabeceraSolicitud[1];
0x0F18	0x450061  	ADD	W10, #1, W0
; funcionSolicitud start address is: 2 (W1)
0x0F1A	0x784090  	MOV.B	[W0], W1
;SensorNivel.c,311 :: 		subFuncionSolicitud = cabeceraSolicitud[2];
0x0F1C	0x450062  	ADD	W10, #2, W0
; subFuncionSolicitud start address is: 0 (W0)
0x0F1E	0x784010  	MOV.B	[W0], W0
;SensorNivel.c,313 :: 		switch (funcionSolicitud){
0x0F20	0x370089  	BRA	L_ProcesarSolicitud11
; ptrNumDatosResp end address is: 18 (W9)
; ptrDatoInt end address is: 4 (W2)
; ptrDatoFloat end address is: 6 (W3)
; funcionSolicitud end address is: 2 (W1)
;SensorNivel.c,314 :: 		case 1:
L_ProcesarSolicitud13:
;SensorNivel.c,315 :: 		switch (subFuncionSolicitud){
0x0F22	0x370018  	BRA	L_ProcesarSolicitud14
; subFuncionSolicitud end address is: 0 (W0)
;SensorNivel.c,316 :: 		case 1:
L_ProcesarSolicitud16:
;SensorNivel.c,318 :: 		temperaturaRaw = LeerDS18B20();
0x0F24	0x07FE54  	RCALL	_LeerDS18B20
0x0F26	0x885C10  	MOV	W0, _temperaturaRaw
;SensorNivel.c,319 :: 		TOF = CalcularTOF();
0x0F28	0x07FFA6  	RCALL	_CalcularTOF
0x0F2A	0x885C20  	MOV	W0, _TOF
0x0F2C	0x885C31  	MOV	W1, _TOF+2
;SensorNivel.c,320 :: 		break;
0x0F2E	0x37001B  	BRA	L_ProcesarSolicitud15
;SensorNivel.c,321 :: 		case 2:
L_ProcesarSolicitud17:
;SensorNivel.c,323 :: 		temperaturaRaw = LeerDS18B20();
0x0F30	0x07FE4E  	RCALL	_LeerDS18B20
0x0F32	0x885C10  	MOV	W0, _temperaturaRaw
;SensorNivel.c,324 :: 		CapturarMuestras();
0x0F34	0x07FEBB  	RCALL	_CapturarMuestras
;SensorNivel.c,325 :: 		break;
0x0F36	0x370017  	BRA	L_ProcesarSolicitud15
;SensorNivel.c,326 :: 		case 3:
L_ProcesarSolicitud18:
;SensorNivel.c,328 :: 		temperaturaRaw = LeerDS18B20();
0x0F38	0x07FE4A  	RCALL	_LeerDS18B20
0x0F3A	0x885C10  	MOV	W0, _temperaturaRaw
;SensorNivel.c,329 :: 		ProbarMuestreo();
0x0F3C	0x07FE39  	RCALL	_ProbarMuestreo
;SensorNivel.c,330 :: 		break;
0x0F3E	0x370013  	BRA	L_ProcesarSolicitud15
;SensorNivel.c,332 :: 		case 4:
L_ProcesarSolicitud19:
;SensorNivel.c,334 :: 		temperaturaRaw = LeerDS18B20();
0x0F40	0x07FE46  	RCALL	_LeerDS18B20
0x0F42	0x885C10  	MOV	W0, _temperaturaRaw
;SensorNivel.c,335 :: 		ProbarEnvioTrama();
0x0F44	0x07FE14  	RCALL	_ProbarEnvioTrama
;SensorNivel.c,336 :: 		break;
0x0F46	0x37000F  	BRA	L_ProcesarSolicitud15
;SensorNivel.c,337 :: 		default:
L_ProcesarSolicitud20:
;SensorNivel.c,339 :: 		temperaturaRaw = LeerDS18B20();
0x0F48	0x07FE42  	RCALL	_LeerDS18B20
0x0F4A	0x885C10  	MOV	W0, _temperaturaRaw
;SensorNivel.c,340 :: 		TOF = CalcularTOF();
0x0F4C	0x07FF94  	RCALL	_CalcularTOF
0x0F4E	0x885C20  	MOV	W0, _TOF
0x0F50	0x885C31  	MOV	W1, _TOF+2
;SensorNivel.c,341 :: 		break;
0x0F52	0x370009  	BRA	L_ProcesarSolicitud15
;SensorNivel.c,342 :: 		}
L_ProcesarSolicitud14:
; subFuncionSolicitud start address is: 0 (W0)
0x0F54	0xE10461  	CP.B	W0, #1
0x0F56	0x32FFE6  	BRA Z	L_ProcesarSolicitud16
L__ProcesarSolicitud127:
0x0F58	0xE10462  	CP.B	W0, #2
0x0F5A	0x32FFEA  	BRA Z	L_ProcesarSolicitud17
L__ProcesarSolicitud128:
0x0F5C	0xE10463  	CP.B	W0, #3
0x0F5E	0x32FFEC  	BRA Z	L_ProcesarSolicitud18
L__ProcesarSolicitud129:
0x0F60	0xE10464  	CP.B	W0, #4
0x0F62	0x32FFEE  	BRA Z	L_ProcesarSolicitud19
L__ProcesarSolicitud130:
; subFuncionSolicitud end address is: 0 (W0)
0x0F64	0x37FFF1  	BRA	L_ProcesarSolicitud20
L_ProcesarSolicitud15:
;SensorNivel.c,343 :: 		break;
0x0F66	0x37006E  	BRA	L_ProcesarSolicitud12
;SensorNivel.c,344 :: 		case 2:
L_ProcesarSolicitud21:
;SensorNivel.c,347 :: 		switch (subFuncionSolicitud){
; subFuncionSolicitud start address is: 0 (W0)
; ptrDatoFloat start address is: 6 (W3)
; ptrDatoInt start address is: 4 (W2)
; ptrNumDatosResp start address is: 18 (W9)
0x0F68	0x370032  	BRA	L_ProcesarSolicitud22
; subFuncionSolicitud end address is: 0 (W0)
;SensorNivel.c,348 :: 		case 1:
L_ProcesarSolicitud24:
;SensorNivel.c,351 :: 		datoInt = temperaturaRaw;
0x0F6A	0x805C10  	MOV	_temperaturaRaw, W0
0x0F6C	0x980700  	MOV	W0, [W14+0]
;SensorNivel.c,352 :: 		datoFloat = TOF;
0x0F6E	0x805C20  	MOV	_TOF, W0
0x0F70	0x805C31  	MOV	_TOF+2, W1
0x0F72	0x980720  	MOV	W0, [W14+4]
0x0F74	0x980731  	MOV	W1, [W14+6]
;SensorNivel.c,353 :: 		respuestaPyloadRS485[0] = *(ptrDatoFloat);
0x0F76	0x784093  	MOV.B	[W3], W1
0x0F78	0x20B720  	MOV	#lo_addr(_respuestaPyloadRS485), W0
0x0F7A	0x784801  	MOV.B	W1, [W0]
;SensorNivel.c,354 :: 		respuestaPyloadRS485[1] = *(ptrDatoFloat+1);
0x0F7C	0x418061  	ADD	W3, #1, W0
0x0F7E	0x784090  	MOV.B	[W0], W1
0x0F80	0x20B730  	MOV	#lo_addr(_respuestaPyloadRS485+1), W0
0x0F82	0x784801  	MOV.B	W1, [W0]
;SensorNivel.c,355 :: 		respuestaPyloadRS485[2] = *(ptrDatoFloat+2);
0x0F84	0x418062  	ADD	W3, #2, W0
0x0F86	0x784090  	MOV.B	[W0], W1
0x0F88	0x20B740  	MOV	#lo_addr(_respuestaPyloadRS485+2), W0
0x0F8A	0x784801  	MOV.B	W1, [W0]
;SensorNivel.c,356 :: 		respuestaPyloadRS485[3] = *(ptrDatoFloat+3);
0x0F8C	0x418063  	ADD	W3, #3, W0
; ptrDatoFloat end address is: 6 (W3)
0x0F8E	0x784090  	MOV.B	[W0], W1
0x0F90	0x20B750  	MOV	#lo_addr(_respuestaPyloadRS485+3), W0
0x0F92	0x784801  	MOV.B	W1, [W0]
;SensorNivel.c,357 :: 		respuestaPyloadRS485[4] = *(ptrDatoInt);
0x0F94	0x784092  	MOV.B	[W2], W1
0x0F96	0x20B760  	MOV	#lo_addr(_respuestaPyloadRS485+4), W0
0x0F98	0x784801  	MOV.B	W1, [W0]
;SensorNivel.c,358 :: 		respuestaPyloadRS485[5] = *(ptrDatoInt+1);
0x0F9A	0x410061  	ADD	W2, #1, W0
; ptrDatoInt end address is: 4 (W2)
0x0F9C	0x784090  	MOV.B	[W0], W1
0x0F9E	0x20B770  	MOV	#lo_addr(_respuestaPyloadRS485+5), W0
0x0FA0	0x784801  	MOV.B	W1, [W0]
;SensorNivel.c,360 :: 		numDatosResp = 6;
0x0FA2	0x200060  	MOV	#6, W0
0x0FA4	0x980710  	MOV	W0, [W14+2]
;SensorNivel.c,361 :: 		cabeceraSolicitud[3] = *(ptrNumDatosResp);
0x0FA6	0x450063  	ADD	W10, #3, W0
0x0FA8	0x784819  	MOV.B	[W9], [W0]
;SensorNivel.c,362 :: 		cabeceraSolicitud[4] = *(ptrNumDatosResp+1);
0x0FAA	0x4500E4  	ADD	W10, #4, W1
0x0FAC	0x448061  	ADD	W9, #1, W0
; ptrNumDatosResp end address is: 18 (W9)
0x0FAE	0x784890  	MOV.B	[W0], [W1]
;SensorNivel.c,363 :: 		EnviarTramaRS485(1, cabeceraSolicitud, respuestaPyloadRS485);
0x0FB0	0x20B72C  	MOV	#lo_addr(_respuestaPyloadRS485), W12
0x0FB2	0x78058A  	MOV	W10, W11
0x0FB4	0xB3C01A  	MOV.B	#1, W10
0x0FB6	0x07FE40  	RCALL	_EnviarTramaRS485
;SensorNivel.c,364 :: 		break;
0x0FB8	0x37000E  	BRA	L_ProcesarSolicitud23
;SensorNivel.c,365 :: 		case 2:
L_ProcesarSolicitud25:
;SensorNivel.c,368 :: 		numDatosResp = 702;
; ptrNumDatosResp start address is: 18 (W9)
0x0FBA	0x202BE0  	MOV	#702, W0
0x0FBC	0x980710  	MOV	W0, [W14+2]
;SensorNivel.c,369 :: 		cabeceraSolicitud[3] = *(ptrNumDatosResp);
0x0FBE	0x450063  	ADD	W10, #3, W0
0x0FC0	0x784819  	MOV.B	[W9], [W0]
;SensorNivel.c,370 :: 		cabeceraSolicitud[4] = *(ptrNumDatosResp+1);
0x0FC2	0x4500E4  	ADD	W10, #4, W1
0x0FC4	0x448061  	ADD	W9, #1, W0
; ptrNumDatosResp end address is: 18 (W9)
0x0FC6	0x784890  	MOV.B	[W0], [W1]
;SensorNivel.c,371 :: 		EnviarTramaInt(cabeceraSolicitud, temperaturaRaw);
0x0FC8	0x805C1B  	MOV	_temperaturaRaw, W11
0x0FCA	0x07FF24  	RCALL	_EnviarTramaInt
;SensorNivel.c,372 :: 		break;
0x0FCC	0x370004  	BRA	L_ProcesarSolicitud23
;SensorNivel.c,373 :: 		}
L_ProcesarSolicitud22:
; subFuncionSolicitud start address is: 0 (W0)
; ptrDatoFloat start address is: 6 (W3)
; ptrDatoInt start address is: 4 (W2)
; ptrNumDatosResp start address is: 18 (W9)
0x0FCE	0xE10461  	CP.B	W0, #1
0x0FD0	0x32FFCC  	BRA Z	L_ProcesarSolicitud24
L__ProcesarSolicitud131:
; ptrDatoInt end address is: 4 (W2)
; ptrDatoFloat end address is: 6 (W3)
0x0FD2	0xE10462  	CP.B	W0, #2
0x0FD4	0x32FFF2  	BRA Z	L_ProcesarSolicitud25
L__ProcesarSolicitud132:
; ptrNumDatosResp end address is: 18 (W9)
; subFuncionSolicitud end address is: 0 (W0)
L_ProcesarSolicitud23:
;SensorNivel.c,374 :: 		break;
0x0FD6	0x370036  	BRA	L_ProcesarSolicitud12
;SensorNivel.c,375 :: 		case 3:
L_ProcesarSolicitud26:
;SensorNivel.c,377 :: 		switch (subFuncionSolicitud){
; subFuncionSolicitud start address is: 0 (W0)
0x0FD8	0x37000C  	BRA	L_ProcesarSolicitud27
; subFuncionSolicitud end address is: 0 (W0)
;SensorNivel.c,378 :: 		case 1:
L_ProcesarSolicitud29:
;SensorNivel.c,380 :: 		pulsosDistancia = payloadSolicitud[0];
0x0FDA	0x78409B  	MOV.B	[W11], W1
0x0FDC	0x20B650  	MOV	#lo_addr(_pulsosDistancia), W0
0x0FDE	0x784801  	MOV.B	W1, [W0]
;SensorNivel.c,381 :: 		LED1 = ~LED1;
0x0FE0	0xAA82C4  	BTG	LATA4_bit, BitPos(LATA4_bit+0)
;SensorNivel.c,382 :: 		Delay_ms(250);
0x0FE2	0x200338  	MOV	#51, W8
0x0FE4	0x2DCE57  	MOV	#56549, W7
L_ProcesarSolicitud30:
0x0FE6	0xED200E  	DEC	W7
0x0FE8	0x3AFFFE  	BRA NZ	L_ProcesarSolicitud30
0x0FEA	0xED2010  	DEC	W8
0x0FEC	0x3AFFFC  	BRA NZ	L_ProcesarSolicitud30
;SensorNivel.c,383 :: 		LED1 = ~LED1;
0x0FEE	0xAA82C4  	BTG	LATA4_bit, BitPos(LATA4_bit+0)
;SensorNivel.c,384 :: 		break;
0x0FF0	0x370002  	BRA	L_ProcesarSolicitud28
;SensorNivel.c,385 :: 		}
L_ProcesarSolicitud27:
; subFuncionSolicitud start address is: 0 (W0)
0x0FF2	0xE10461  	CP.B	W0, #1
0x0FF4	0x32FFF2  	BRA Z	L_ProcesarSolicitud29
L__ProcesarSolicitud133:
; subFuncionSolicitud end address is: 0 (W0)
L_ProcesarSolicitud28:
;SensorNivel.c,386 :: 		break;
0x0FF6	0x370026  	BRA	L_ProcesarSolicitud12
;SensorNivel.c,387 :: 		case 4:
L_ProcesarSolicitud32:
;SensorNivel.c,389 :: 		switch (subFuncionSolicitud){
; subFuncionSolicitud start address is: 0 (W0)
; ptrNumDatosResp start address is: 18 (W9)
0x0FF8	0x370018  	BRA	L_ProcesarSolicitud33
; subFuncionSolicitud end address is: 0 (W0)
;SensorNivel.c,390 :: 		case 1:
L_ProcesarSolicitud35:
;SensorNivel.c,393 :: 		numDatosResp = 10;
0x0FFA	0x2000A0  	MOV	#10, W0
0x0FFC	0x980710  	MOV	W0, [W14+2]
;SensorNivel.c,394 :: 		cabeceraSolicitud[3] = *(ptrNumDatosResp);
0x0FFE	0x450063  	ADD	W10, #3, W0
0x1000	0x784819  	MOV.B	[W9], [W0]
;SensorNivel.c,395 :: 		cabeceraSolicitud[4] = *(ptrNumDatosResp+1);
0x1002	0x4500E4  	ADD	W10, #4, W1
0x1004	0x448061  	ADD	W9, #1, W0
; ptrNumDatosResp end address is: 18 (W9)
0x1006	0x784890  	MOV.B	[W0], [W1]
;SensorNivel.c,396 :: 		EnviarTramaRS485(1, cabeceraSolicitud, tramaPruebaRS485);
0x1008	0x20802C  	MOV	#lo_addr(_tramaPruebaRS485), W12
0x100A	0x78058A  	MOV	W10, W11
0x100C	0xB3C01A  	MOV.B	#1, W10
0x100E	0x07FE14  	RCALL	_EnviarTramaRS485
;SensorNivel.c,397 :: 		LED1 = ~LED1;
0x1010	0xAA82C4  	BTG	LATA4_bit, BitPos(LATA4_bit+0)
;SensorNivel.c,398 :: 		break;
0x1012	0x37000F  	BRA	L_ProcesarSolicitud34
;SensorNivel.c,399 :: 		case 2:
L_ProcesarSolicitud36:
;SensorNivel.c,402 :: 		numDatosResp = 512;
; ptrNumDatosResp start address is: 18 (W9)
0x1014	0x202000  	MOV	#512, W0
0x1016	0x980710  	MOV	W0, [W14+2]
;SensorNivel.c,403 :: 		cabeceraSolicitud[3] = *(ptrNumDatosResp);
0x1018	0x450063  	ADD	W10, #3, W0
0x101A	0x784819  	MOV.B	[W9], [W0]
;SensorNivel.c,404 :: 		cabeceraSolicitud[4] = *(ptrNumDatosResp+1);
0x101C	0x4500E4  	ADD	W10, #4, W1
0x101E	0x448061  	ADD	W9, #1, W0
; ptrNumDatosResp end address is: 18 (W9)
0x1020	0x784890  	MOV.B	[W0], [W1]
;SensorNivel.c,405 :: 		GenerarTramaPrueba(numDatosResp, cabeceraSolicitud);
0x1022	0x78058A  	MOV	W10, W11
0x1024	0x90051E  	MOV	[W14+2], W10
0x1026	0x07FE55  	RCALL	_GenerarTramaPrueba
;SensorNivel.c,406 :: 		break;
0x1028	0x370004  	BRA	L_ProcesarSolicitud34
;SensorNivel.c,407 :: 		}
L_ProcesarSolicitud33:
; subFuncionSolicitud start address is: 0 (W0)
; ptrNumDatosResp start address is: 18 (W9)
0x102A	0xE10461  	CP.B	W0, #1
0x102C	0x32FFE6  	BRA Z	L_ProcesarSolicitud35
L__ProcesarSolicitud134:
0x102E	0xE10462  	CP.B	W0, #2
0x1030	0x32FFF1  	BRA Z	L_ProcesarSolicitud36
L__ProcesarSolicitud135:
; ptrNumDatosResp end address is: 18 (W9)
; subFuncionSolicitud end address is: 0 (W0)
L_ProcesarSolicitud34:
;SensorNivel.c,408 :: 		break;
0x1032	0x370008  	BRA	L_ProcesarSolicitud12
;SensorNivel.c,409 :: 		}
L_ProcesarSolicitud11:
; subFuncionSolicitud start address is: 0 (W0)
; funcionSolicitud start address is: 2 (W1)
; ptrDatoFloat start address is: 6 (W3)
; ptrDatoInt start address is: 4 (W2)
; ptrNumDatosResp start address is: 18 (W9)
0x1034	0xE10C61  	CP.B	W1, #1
0x1036	0x32FF75  	BRA Z	L_ProcesarSolicitud13
L__ProcesarSolicitud136:
0x1038	0xE10C62  	CP.B	W1, #2
0x103A	0x32FF96  	BRA Z	L_ProcesarSolicitud21
L__ProcesarSolicitud137:
; ptrDatoInt end address is: 4 (W2)
; ptrDatoFloat end address is: 6 (W3)
0x103C	0xE10C63  	CP.B	W1, #3
0x103E	0x32FFCC  	BRA Z	L_ProcesarSolicitud26
L__ProcesarSolicitud138:
0x1040	0xE10C64  	CP.B	W1, #4
0x1042	0x32FFDA  	BRA Z	L_ProcesarSolicitud32
L__ProcesarSolicitud139:
; ptrNumDatosResp end address is: 18 (W9)
; funcionSolicitud end address is: 2 (W1)
; subFuncionSolicitud end address is: 0 (W0)
L_ProcesarSolicitud12:
;SensorNivel.c,411 :: 		banderaPeticion = 0;
0x1044	0x20B811  	MOV	#lo_addr(_banderaPeticion), W1
0x1046	0xEF2000  	CLR	W0
0x1048	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,413 :: 		}
L_end_ProcesarSolicitud:
0x104A	0x78064F  	POP	W12
0x104C	0x7805CF  	POP	W11
0x104E	0x78054F  	POP	W10
0x1050	0xFA8000  	ULNK
0x1052	0x060000  	RETURN
; end of _ProcesarSolicitud
_LeerDS18B20:
;SensorNivel.c,439 :: 		unsigned int LeerDS18B20(){
;SensorNivel.c,443 :: 		LED1 = 1;
0x0BCE	0x781F8A  	PUSH	W10
0x0BD0	0x781F8B  	PUSH	W11
0x0BD2	0x781F8C  	PUSH	W12
0x0BD4	0xA882C4  	BSET	LATA4_bit, BitPos(LATA4_bit+0)
;SensorNivel.c,446 :: 		Ow_Reset(&PORTA, 0);                                                       //Onewire reset signal
0x0BD6	0xEF2016  	CLR	W11
0x0BD8	0x202C2A  	MOV	#lo_addr(PORTA), W10
0x0BDA	0x07FE88  	RCALL	_Ow_Reset
;SensorNivel.c,447 :: 		Ow_Write(&PORTA, 0, 0xCC);                                                 //Issue command SKIP_ROM
0x0BDC	0xB3CCCC  	MOV.B	#204, W12
0x0BDE	0xEF2016  	CLR	W11
0x0BE0	0x202C2A  	MOV	#lo_addr(PORTA), W10
0x0BE2	0x07FE66  	RCALL	_Ow_Write
;SensorNivel.c,448 :: 		Ow_Write(&PORTA, 0, 0x44);                                                 //Issue command CONVERT_T
0x0BE4	0xB3C44C  	MOV.B	#68, W12
0x0BE6	0xEF2016  	CLR	W11
0x0BE8	0x202C2A  	MOV	#lo_addr(PORTA), W10
0x0BEA	0x07FE62  	RCALL	_Ow_Write
;SensorNivel.c,449 :: 		Delay_ms(750);
0x0BEC	0x200998  	MOV	#153, W8
0x0BEE	0x296B17  	MOV	#38577, W7
L_LeerDS18B2041:
0x0BF0	0xED200E  	DEC	W7
0x0BF2	0x3AFFFE  	BRA NZ	L_LeerDS18B2041
0x0BF4	0xED2010  	DEC	W8
0x0BF6	0x3AFFFC  	BRA NZ	L_LeerDS18B2041
0x0BF8	0x000000  	NOP
0x0BFA	0x000000  	NOP
;SensorNivel.c,450 :: 		Ow_Reset(&PORTA, 0);
0x0BFC	0xEF2016  	CLR	W11
0x0BFE	0x202C2A  	MOV	#lo_addr(PORTA), W10
0x0C00	0x07FE75  	RCALL	_Ow_Reset
;SensorNivel.c,451 :: 		Ow_Write(&PORTA, 0, 0xCC);                                                 //Issue command SKIP_ROM
0x0C02	0xB3CCCC  	MOV.B	#204, W12
0x0C04	0xEF2016  	CLR	W11
0x0C06	0x202C2A  	MOV	#lo_addr(PORTA), W10
0x0C08	0x07FE53  	RCALL	_Ow_Write
;SensorNivel.c,452 :: 		Ow_Write(&PORTA, 0, 0xBE);                                                 //Issue command READ_SCRATCHPAD
0x0C0A	0xB3CBEC  	MOV.B	#190, W12
0x0C0C	0xEF2016  	CLR	W11
0x0C0E	0x202C2A  	MOV	#lo_addr(PORTA), W10
0x0C10	0x07FE4F  	RCALL	_Ow_Write
;SensorNivel.c,453 :: 		Delay_us(100);
0x0C12	0x205357  	MOV	#1333, W7
L_LeerDS18B2043:
0x0C14	0xED200E  	DEC	W7
0x0C16	0x3AFFFE  	BRA NZ	L_LeerDS18B2043
0x0C18	0x000000  	NOP
;SensorNivel.c,454 :: 		temp = Ow_Read(&PORTA, 0);
0x0C1A	0xEF2016  	CLR	W11
0x0C1C	0x202C2A  	MOV	#lo_addr(PORTA), W10
0x0C1E	0x07FF89  	RCALL	_Ow_Read
; temp start address is: 10 (W5)
0x0C20	0xFB8280  	ZE	W0, W5
;SensorNivel.c,455 :: 		temp = (Ow_Read(&PORTA, 0) << 8) + temp;
0x0C22	0xEF2016  	CLR	W11
0x0C24	0x202C2A  	MOV	#lo_addr(PORTA), W10
0x0C26	0x07FF85  	RCALL	_Ow_Read
0x0C28	0xFB8000  	ZE	W0, W0
0x0C2A	0xDD0048  	SL	W0, #8, W0
0x0C2C	0x400005  	ADD	W0, W5, W0
; temp end address is: 10 (W5)
;SensorNivel.c,457 :: 		LED1 = 0;
0x0C2E	0xA982C4  	BCLR	LATA4_bit, BitPos(LATA4_bit+0)
;SensorNivel.c,461 :: 		return temperaturaCrudo;
;SensorNivel.c,463 :: 		}
;SensorNivel.c,461 :: 		return temperaturaCrudo;
;SensorNivel.c,463 :: 		}
L_end_LeerDS18B20:
0x0C30	0x78064F  	POP	W12
0x0C32	0x7805CF  	POP	W11
0x0C34	0x78054F  	POP	W10
0x0C36	0x060000  	RETURN
; end of _LeerDS18B20
_Ow_Reset:
0x08EC	0xFA0000  	LNK	#0
;__Lib_OneWire.c,6 :: 		
;__Lib_OneWire.c,9 :: 		
0x08EE	0x200010  	MOV	#1, W0
0x08F0	0xDD000B  	SL	W0, W11, W0
; bit_mask_1 start address is: 4 (W2)
0x08F2	0x780100  	MOV	W0, W2
;__Lib_OneWire.c,10 :: 		
0x08F4	0xEA8080  	COM	W0, W1
; bit_mask_0 start address is: 6 (W3)
0x08F6	0x780181  	MOV	W1, W3
;__Lib_OneWire.c,13 :: 		
0x08F8	0x450062  	ADD	W10, #2, W0
0x08FA	0x608810  	AND	W1, [W0], [W0]
;__Lib_OneWire.c,14 :: 		
0x08FC	0x550062  	SUB	W10, #2, W0
0x08FE	0x618810  	AND	W3, [W0], [W0]
; bit_mask_0 end address is: 6 (W3)
;__Lib_OneWire.c,16 :: 		
0x0900	0x07FD4D  	RCALL	_Delay_500us
;__Lib_OneWire.c,19 :: 		
0x0902	0x550062  	SUB	W10, #2, W0
0x0904	0x710810  	IOR	W2, [W0], [W0]
;__Lib_OneWire.c,21 :: 		
0x0906	0x07FD50  	RCALL	_Delay_80us
;__Lib_OneWire.c,24 :: 		
0x0908	0x61001A  	AND	W2, [W10], W0
; bit_mask_1 end address is: 4 (W2)
0x090A	0xE10060  	CP	W0, #0
0x090C	0xEF6000  	CLR.B	W0
0x090E	0x320001  	BRA Z	L__Ow_Reset10
0x0910	0xEC6000  	INC.B	W0
L__Ow_Reset10:
; res start address is: 2 (W1)
0x0912	0xFB8080  	ZE	W0, W1
;__Lib_OneWire.c,26 :: 		
0x0914	0x07FD43  	RCALL	_Delay_500us
;__Lib_OneWire.c,30 :: 		
0x0916	0x780001  	MOV	W1, W0
; res end address is: 2 (W1)
;__Lib_OneWire.c,31 :: 		
L_end_Ow_Reset:
0x0918	0xFA8000  	ULNK
0x091A	0x060000  	RETURN
; end of _Ow_Reset
_Delay_500us:
;__Lib_Delays.c,510 :: 		void Delay_500us()
;__Lib_Delays.c,512 :: 		Delay_us(500);
0x039C	0x21A0A7  	MOV	#6666, W7
L_Delay_500us21:
0x039E	0xED200E  	DEC	W7
0x03A0	0x3AFFFE  	BRA NZ	L_Delay_500us21
0x03A2	0x000000  	NOP
0x03A4	0x000000  	NOP
;__Lib_Delays.c,513 :: 		}
L_end_Delay_500us:
0x03A6	0x060000  	RETURN
; end of _Delay_500us
_Delay_80us:
;__Lib_Delays.c,484 :: 		void Delay_80us()
;__Lib_Delays.c,486 :: 		Delay_us(80);
0x03A8	0x2042A7  	MOV	#1066, W7
L_Delay_80us19:
0x03AA	0xED200E  	DEC	W7
0x03AC	0x3AFFFE  	BRA NZ	L_Delay_80us19
0x03AE	0x000000  	NOP
0x03B0	0x000000  	NOP
;__Lib_Delays.c,487 :: 		}
L_end_Delay_80us:
0x03B2	0x060000  	RETURN
; end of _Delay_80us
_Ow_Write:
0x08B0	0xFA0000  	LNK	#0
;__Lib_OneWire.c,68 :: 		
;__Lib_OneWire.c,71 :: 		
0x08B2	0x200010  	MOV	#1, W0
0x08B4	0xDD000B  	SL	W0, W11, W0
; bit_mask_1 start address is: 4 (W2)
0x08B6	0x780100  	MOV	W0, W2
;__Lib_OneWire.c,72 :: 		
; bit_mask_0 start address is: 2 (W1)
0x08B8	0xEA8080  	COM	W0, W1
;__Lib_OneWire.c,75 :: 		
; i start address is: 6 (W3)
0x08BA	0xEF2006  	CLR	W3
; i end address is: 6 (W3)
L_Ow_Write4:
; i start address is: 6 (W3)
; bit_mask_0 start address is: 2 (W1)
; bit_mask_0 end address is: 2 (W1)
; bit_mask_1 start address is: 4 (W2)
; bit_mask_1 end address is: 4 (W2)
0x08BC	0xE11867  	CP	W3, #7
0x08BE	0x3E0012  	BRA GTU	L_Ow_Write5
L__Ow_Write15:
; bit_mask_0 end address is: 2 (W1)
; bit_mask_1 end address is: 4 (W2)
;__Lib_OneWire.c,77 :: 		
; bit_mask_1 start address is: 4 (W2)
; bit_mask_0 start address is: 2 (W1)
0x08C0	0xFB800C  	ZE	W12, W0
0x08C2	0xDE0003  	LSR	W0, W3, W0
; j start address is: 0 (W0)
0x08C4	0xFB8000  	ZE	W0, W0
;__Lib_OneWire.c,78 :: 		
; j start address is: 8 (W4)
0x08C6	0x600261  	AND	W0, #1, W4
; j end address is: 0 (W0)
;__Lib_OneWire.c,81 :: 		
0x08C8	0x450062  	ADD	W10, #2, W0
0x08CA	0x608810  	AND	W1, [W0], [W0]
;__Lib_OneWire.c,83 :: 		
0x08CC	0x550062  	SUB	W10, #2, W0
0x08CE	0x608810  	AND	W1, [W0], [W0]
;__Lib_OneWire.c,85 :: 		
0x08D0	0xE20008  	CP0	W4
0x08D2	0x320002  	BRA Z	L_Ow_Write7
L__Ow_Write16:
; j end address is: 8 (W4)
;__Lib_OneWire.c,86 :: 		
0x08D4	0x550062  	SUB	W10, #2, W0
0x08D6	0x710810  	IOR	W2, [W0], [W0]
;__Lib_OneWire.c,87 :: 		
L_Ow_Write7:
;__Lib_OneWire.c,89 :: 		
0x08D8	0x07FD67  	RCALL	_Delay_80us
;__Lib_OneWire.c,92 :: 		
0x08DA	0x550062  	SUB	W10, #2, W0
0x08DC	0x710810  	IOR	W2, [W0], [W0]
;__Lib_OneWire.c,93 :: 		
0x08DE	0x07FD6A  	RCALL	_Delay_1us
;__Lib_OneWire.c,75 :: 		
0x08E0	0xEC2006  	INC	W3
;__Lib_OneWire.c,94 :: 		
; bit_mask_0 end address is: 2 (W1)
; bit_mask_1 end address is: 4 (W2)
; i end address is: 6 (W3)
0x08E2	0x37FFEC  	BRA	L_Ow_Write4
L_Ow_Write5:
;__Lib_OneWire.c,96 :: 		
0x08E4	0x07FD43  	RCALL	_Delay_50us
;__Lib_OneWire.c,97 :: 		
0x08E6	0x07FD42  	RCALL	_Delay_50us
;__Lib_OneWire.c,98 :: 		
L_end_Ow_Write:
0x08E8	0xFA8000  	ULNK
0x08EA	0x060000  	RETURN
; end of _Ow_Write
_Delay_1us:
;__Lib_Delays.c,380 :: 		void Delay_1us()
;__Lib_Delays.c,382 :: 		Delay_us(1);
0x03B4	0x2000D7  	MOV	#13, W7
L_Delay_1us11:
0x03B6	0xED200E  	DEC	W7
0x03B8	0x3AFFFE  	BRA NZ	L_Delay_1us11
0x03BA	0x000000  	NOP
;__Lib_Delays.c,383 :: 		}
L_end_Delay_1us:
0x03BC	0x060000  	RETURN
; end of _Delay_1us
_Delay_50us:
;__Lib_Delays.c,458 :: 		void Delay_50us()
;__Lib_Delays.c,460 :: 		Delay_us(50);
0x036C	0x2029A7  	MOV	#666, W7
L_Delay_50us17:
0x036E	0xED200E  	DEC	W7
0x0370	0x3AFFFE  	BRA NZ	L_Delay_50us17
0x0372	0x000000  	NOP
0x0374	0x000000  	NOP
;__Lib_Delays.c,461 :: 		}
L_end_Delay_50us:
0x0376	0x060000  	RETURN
; end of _Delay_50us
_Ow_Read:
0x0B32	0xFA0000  	LNK	#0
;__Lib_OneWire.c,34 :: 		
;__Lib_OneWire.c,37 :: 		
0x0B34	0x200010  	MOV	#1, W0
0x0B36	0xDD000B  	SL	W0, W11, W0
; bit_mask_1 start address is: 4 (W2)
0x0B38	0x780100  	MOV	W0, W2
;__Lib_OneWire.c,38 :: 		
; bit_mask_0 start address is: 2 (W1)
0x0B3A	0xEA8080  	COM	W0, W1
;__Lib_OneWire.c,40 :: 		
; tmp start address is: 8 (W4)
0x0B3C	0xEF2008  	CLR	W4
;__Lib_OneWire.c,43 :: 		
; i start address is: 6 (W3)
0x0B3E	0xEF2006  	CLR	W3
; tmp end address is: 8 (W4)
; i end address is: 6 (W3)
L_Ow_Read0:
; i start address is: 6 (W3)
; tmp start address is: 8 (W4)
; bit_mask_0 start address is: 2 (W1)
; bit_mask_0 end address is: 2 (W1)
; bit_mask_1 start address is: 4 (W2)
; bit_mask_1 end address is: 4 (W2)
0x0B40	0xE11867  	CP	W3, #7
0x0B42	0x3E0012  	BRA GTU	L_Ow_Read1
L__Ow_Read12:
; bit_mask_0 end address is: 2 (W1)
; bit_mask_1 end address is: 4 (W2)
;__Lib_OneWire.c,46 :: 		
; bit_mask_1 start address is: 4 (W2)
; bit_mask_0 start address is: 2 (W1)
0x0B44	0x450062  	ADD	W10, #2, W0
0x0B46	0x608810  	AND	W1, [W0], [W0]
;__Lib_OneWire.c,48 :: 		
0x0B48	0x550062  	SUB	W10, #2, W0
0x0B4A	0x608810  	AND	W1, [W0], [W0]
;__Lib_OneWire.c,50 :: 		
0x0B4C	0x07FC33  	RCALL	_Delay_1us
;__Lib_OneWire.c,53 :: 		
0x0B4E	0x550062  	SUB	W10, #2, W0
0x0B50	0x710810  	IOR	W2, [W0], [W0]
;__Lib_OneWire.c,55 :: 		
0x0B52	0x07FC30  	RCALL	_Delay_1us
;__Lib_OneWire.c,57 :: 		
0x0B54	0x61001A  	AND	W2, [W10], W0
0x0B56	0x320004  	BRA Z	L__Ow_Read8
L__Ow_Read13:
;__Lib_OneWire.c,58 :: 		
0x0B58	0x200010  	MOV	#1, W0
0x0B5A	0xDD0003  	SL	W0, W3, W0
0x0B5C	0x720200  	IOR	W4, W0, W4
; tmp end address is: 8 (W4)
0x0B5E	0x370000  	BRA	L_Ow_Read3
L__Ow_Read8:
;__Lib_OneWire.c,57 :: 		
;__Lib_OneWire.c,58 :: 		
L_Ow_Read3:
;__Lib_OneWire.c,60 :: 		
; tmp start address is: 8 (W4)
0x0B60	0x07FC05  	RCALL	_Delay_50us
;__Lib_OneWire.c,61 :: 		
0x0B62	0x07FC04  	RCALL	_Delay_50us
;__Lib_OneWire.c,43 :: 		
0x0B64	0xEC2006  	INC	W3
;__Lib_OneWire.c,63 :: 		
; bit_mask_0 end address is: 2 (W1)
; bit_mask_1 end address is: 4 (W2)
; i end address is: 6 (W3)
0x0B66	0x37FFEC  	BRA	L_Ow_Read0
L_Ow_Read1:
;__Lib_OneWire.c,64 :: 		
0x0B68	0x784004  	MOV.B	W4, W0
; tmp end address is: 8 (W4)
;__Lib_OneWire.c,65 :: 		
L_end_Ow_Read:
0x0B6A	0xFA8000  	ULNK
0x0B6C	0x060000  	RETURN
; end of _Ow_Read
_CalcularTOF:
;SensorNivel.c,606 :: 		float CalcularTOF(){
;SensorNivel.c,608 :: 		conts = 0;                                                                 //Limpia el contador de secuencias
0x0E76	0x20BAA1  	MOV	#lo_addr(_conts), W1
0x0E78	0xEF2000  	CLR	W0
0x0E7A	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,609 :: 		T2sum = 0.0;
0x0E7C	0xEF2000  	CLR	W0
0x0E7E	0xEF2002  	CLR	W1
0x0E80	0x885D60  	MOV	W0, _T2sum
0x0E82	0x885D71  	MOV	W1, _T2sum+2
;SensorNivel.c,610 :: 		T2prom = 0.0;
0x0E84	0xEF2000  	CLR	W0
0x0E86	0xEF2002  	CLR	W1
0x0E88	0x885D80  	MOV	W0, _T2prom
0x0E8A	0x885D91  	MOV	W1, _T2prom+2
;SensorNivel.c,611 :: 		T2a = 0.0;
0x0E8C	0xEF2000  	CLR	W0
0x0E8E	0xEF2002  	CLR	W1
0x0E90	0x885D10  	MOV	W0, _T2a
0x0E92	0x885D21  	MOV	W1, _T2a+2
;SensorNivel.c,612 :: 		T2b = 0.0;
0x0E94	0xEF2000  	CLR	W0
0x0E96	0xEF2002  	CLR	W1
0x0E98	0x885D30  	MOV	W0, _T2b
0x0E9A	0x885D41  	MOV	W1, _T2b+2
;SensorNivel.c,614 :: 		while (conts<Nsm){
L_CalcularTOF71:
0x0E9C	0x20BAA0  	MOV	#lo_addr(_conts), W0
0x0E9E	0x784010  	MOV.B	[W0], W0
0x0EA0	0xE1047E  	CP.B	W0, #30
0x0EA2	0x310022  	BRA GEU	L_CalcularTOF72
L__CalcularTOF160:
;SensorNivel.c,615 :: 		ProcesarMuestras();                                                      //Inicia una secuencia de medicion
0x0EA4	0x07FD3B  	RCALL	_ProcesarMuestras
;SensorNivel.c,616 :: 		T2b = T2;
0x0EA6	0x805C90  	MOV	_T2, W0
0x0EA8	0x805CA1  	MOV	_T2+2, W1
0x0EAA	0x885D30  	MOV	W0, _T2b
0x0EAC	0x885D41  	MOV	W1, _T2b+2
;SensorNivel.c,617 :: 		if ((T2b-T2a)<=T2umb){                                               //Verifica si el T2 actual esta dentro de un umbral pre-establecido
0x0EAE	0x805C90  	MOV	_T2, W0
0x0EB0	0x805CA1  	MOV	_T2+2, W1
0x0EB2	0x805D12  	MOV	_T2a, W2
0x0EB4	0x805D23  	MOV	_T2a+2, W3
0x0EB6	0x07FBEE  	RCALL	__Sub_FP
0x0EB8	0x200002  	MOV	#0, W2
0x0EBA	0x240403  	MOV	#16448, W3
0x0EBC	0x07FCCB  	RCALL	__Compare_Le_Fp
0x0EBE	0xE00000  	CP0	W0
0x0EC0	0xEF6000  	CLR.B	W0
0x0EC2	0x3C0001  	BRA GT	L__CalcularTOF161
0x0EC4	0xEC6000  	INC.B	W0
L__CalcularTOF161:
0x0EC6	0xE24000  	CP0.B	W0
0x0EC8	0x32000A  	BRA Z	L_CalcularTOF73
L__CalcularTOF162:
;SensorNivel.c,618 :: 		T2sum = T2sum + T2b;                                              //Acumula la sumatoria de valores de T2 calculados por la funcion ProcesarMuestras()
0x0ECA	0x805D62  	MOV	_T2sum, W2
0x0ECC	0x805D73  	MOV	_T2sum+2, W3
0x0ECE	0x805D30  	MOV	_T2b, W0
0x0ED0	0x805D41  	MOV	_T2b+2, W1
0x0ED2	0x07F996  	RCALL	__AddSub_FP
0x0ED4	0x885D60  	MOV	W0, _T2sum
0x0ED6	0x885D71  	MOV	W1, _T2sum+2
;SensorNivel.c,619 :: 		conts++;                                                          //Aumenta el contador de secuencias
0x0ED8	0xB3C011  	MOV.B	#1, W1
0x0EDA	0x20BAA0  	MOV	#lo_addr(_conts), W0
0x0EDC	0x40C810  	ADD.B	W1, [W0], [W0]
;SensorNivel.c,620 :: 		}
L_CalcularTOF73:
;SensorNivel.c,621 :: 		T2a = T2b;
0x0EDE	0x805D30  	MOV	_T2b, W0
0x0EE0	0x805D41  	MOV	_T2b+2, W1
0x0EE2	0x885D10  	MOV	W0, _T2a
0x0EE4	0x885D21  	MOV	W1, _T2a+2
;SensorNivel.c,622 :: 		}
0x0EE6	0x37FFDA  	BRA	L_CalcularTOF71
L_CalcularTOF72:
;SensorNivel.c,624 :: 		T2prom = T2sum/Nsm;
0x0EE8	0x200002  	MOV	#0, W2
0x0EEA	0x241F03  	MOV	#16880, W3
0x0EEC	0x805D60  	MOV	_T2sum, W0
0x0EEE	0x805D71  	MOV	_T2sum+2, W1
0x0EF0	0x07FB36  	RCALL	__Div_FP
0x0EF2	0x885D80  	MOV	W0, _T2prom
0x0EF4	0x885D91  	MOV	W1, _T2prom+2
;SensorNivel.c,626 :: 		return T2prom;
;SensorNivel.c,628 :: 		}
L_end_CalcularTOF:
0x0EF6	0x060000  	RETURN
; end of _CalcularTOF
_ProcesarMuestras:
0x091C	0xFA000C  	LNK	#12
;SensorNivel.c,525 :: 		void ProcesarMuestras(){
;SensorNivel.c,527 :: 		LED1 = 1;
0x091E	0xA882C4  	BSET	LATA4_bit, BitPos(LATA4_bit+0)
;SensorNivel.c,530 :: 		bm = 0;
0x0920	0x20B641  	MOV	#lo_addr(_bm), W1
0x0922	0xEF2000  	CLR	W0
0x0924	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,531 :: 		contPulsos = 0;                                                            //Limpia la variable del contador de pulsos
0x0926	0xEF2000  	CLR	W0
0x0928	0x885B30  	MOV	W0, _contPulsos
;SensorNivel.c,532 :: 		RB2_bit = 0;                                                               //Limpia el pin que produce los pulsos de exitacion del transductor
0x092A	0xA942CA  	BCLR	RB2_bit, BitPos(RB2_bit+0)
;SensorNivel.c,533 :: 		T1CON.TON = 0;                                                             //Apaga el TMR1
0x092C	0xA9E105  	BCLR	T1CON, #15
;SensorNivel.c,534 :: 		TMR2 = 0;                                                                  //Encera el TMR2
0x092E	0xEF2106  	CLR	TMR2
;SensorNivel.c,535 :: 		T2CON.TON = 1;                                                             //Enciende el TMR2
0x0930	0xA8E111  	BSET	T2CON, #15
;SensorNivel.c,536 :: 		i = 0;                                                                     //Limpia las variables asociadas al almacenamiento de la senal muestreada
0x0932	0xEF2000  	CLR	W0
0x0934	0x885B60  	MOV	W0, _i
;SensorNivel.c,537 :: 		while(bm!=1);                                                              //Espera hasta que haya terminado de enviar y recibir todas las muestras
L_ProcesarMuestras55:
0x0936	0x20B640  	MOV	#lo_addr(_bm), W0
0x0938	0x784010  	MOV.B	[W0], W0
0x093A	0xE10461  	CP.B	W0, #1
0x093C	0x320001  	BRA Z	L_ProcesarMuestras56
L__ProcesarMuestras151:
0x093E	0x37FFFB  	BRA	L_ProcesarMuestras55
L_ProcesarMuestras56:
;SensorNivel.c,540 :: 		if (bm==1){
0x0940	0x20B640  	MOV	#lo_addr(_bm), W0
0x0942	0x784010  	MOV.B	[W0], W0
0x0944	0xE10461  	CP.B	W0, #1
0x0946	0x3A0066  	BRA NZ	L_ProcesarMuestras57
L__ProcesarMuestras152:
;SensorNivel.c,543 :: 		Mmed = 508;                                                           //Medido con el osciloscopio: Vmean = 1.64V => 508.4adc
0x0948	0x201FC0  	MOV	#508, W0
0x094A	0x884000  	MOV	W0, _Mmed
;SensorNivel.c,545 :: 		for (k=0;k<numeroMuestras;k++){
0x094C	0xEF2000  	CLR	W0
0x094E	0x885B40  	MOV	W0, _k
L_ProcesarMuestras58:
0x0950	0x805B41  	MOV	_k, W1
0x0952	0x2015E0  	MOV	#350, W0
0x0954	0xE10800  	CP	W1, W0
0x0956	0x31005B  	BRA GEU	L_ProcesarMuestras59
L__ProcesarMuestras153:
;SensorNivel.c,548 :: 		valorAbsoluto = vectorMuestras[k]-Mmed;
0x0958	0x805B40  	MOV	_k, W0
0x095A	0xDD00C1  	SL	W0, #1, W1
0x095C	0x208A80  	MOV	#lo_addr(_vectorMuestras), W0
0x095E	0x400181  	ADD	W0, W1, W3
0x0960	0x780113  	MOV	[W3], W2
0x0962	0x208001  	MOV	#lo_addr(_Mmed), W1
0x0964	0x20B6A0  	MOV	#lo_addr(_valorAbsoluto), W0
0x0966	0x510811  	SUB	W2, [W1], [W0]
;SensorNivel.c,549 :: 		if (vectorMuestras[k]<Mmed){
0x0968	0x780093  	MOV	[W3], W1
0x096A	0x208000  	MOV	#lo_addr(_Mmed), W0
0x096C	0xE10810  	CP	W1, [W0]
0x096E	0x31000B  	BRA GEU	L_ProcesarMuestras61
L__ProcesarMuestras154:
;SensorNivel.c,550 :: 		valorAbsoluto = (vectorMuestras[k]+((Mmed-vectorMuestras[k])*2))-(Mmed);
0x0970	0x805B40  	MOV	_k, W0
0x0972	0xDD00C1  	SL	W0, #1, W1
0x0974	0x208A80  	MOV	#lo_addr(_vectorMuestras), W0
0x0976	0x400081  	ADD	W0, W1, W1
0x0978	0x804000  	MOV	_Mmed, W0
0x097A	0x500011  	SUB	W0, [W1], W0
0x097C	0xDD0041  	SL	W0, #1, W0
0x097E	0x400111  	ADD	W0, [W1], W2
0x0980	0x208001  	MOV	#lo_addr(_Mmed), W1
0x0982	0x20B6A0  	MOV	#lo_addr(_valorAbsoluto), W0
0x0984	0x510811  	SUB	W2, [W1], [W0]
;SensorNivel.c,551 :: 		}
L_ProcesarMuestras61:
;SensorNivel.c,555 :: 		for( f=O-1; f!=0; f-- ) XFIR[f]=XFIR[f-1];
0x0986	0x200140  	MOV	#20, W0
0x0988	0x884220  	MOV	W0, _f
L_ProcesarMuestras62:
0x098A	0x804220  	MOV	_f, W0
0x098C	0xE10060  	CP	W0, #0
0x098E	0x32000F  	BRA Z	L_ProcesarMuestras63
L__ProcesarMuestras155:
0x0990	0x804220  	MOV	_f, W0
0x0992	0xDD00C2  	SL	W0, #2, W1
0x0994	0x208460  	MOV	#lo_addr(_XFIR), W0
0x0996	0x400101  	ADD	W0, W1, W2
0x0998	0x804220  	MOV	_f, W0
0x099A	0xED2000  	DEC	W0
0x099C	0xDD00C2  	SL	W0, #2, W1
0x099E	0x208460  	MOV	#lo_addr(_XFIR), W0
0x09A0	0x400001  	ADD	W0, W1, W0
0x09A2	0x781930  	MOV	[W0++], [W2++]
0x09A4	0x781120  	MOV	[W0--], [W2--]
0x09A6	0x200011  	MOV	#1, W1
0x09A8	0x208440  	MOV	#lo_addr(_f), W0
0x09AA	0x108810  	SUBR	W1, [W0], [W0]
0x09AC	0x37FFEE  	BRA	L_ProcesarMuestras62
L_ProcesarMuestras63:
;SensorNivel.c,557 :: 		XFIR[0] = (float)(valorAbsoluto);
0x09AE	0x805B50  	MOV	_valorAbsoluto, W0
0x09B0	0xEB0080  	CLR	W1
0x09B2	0x07FD05  	RCALL	__Long2Float
0x09B4	0x884230  	MOV	W0, _XFIR
0x09B6	0x884241  	MOV	W1, _XFIR+2
;SensorNivel.c,559 :: 		y0 = 0.0; for( f=0; f<O; f++ ) y0 += h[f]*XFIR[f];
0x09B8	0xEF2000  	CLR	W0
0x09BA	0xEF2002  	CLR	W1
0x09BC	0x884070  	MOV	W0, _y0
0x09BE	0x884081  	MOV	W1, _y0+2
0x09C0	0xEF2000  	CLR	W0
0x09C2	0x884220  	MOV	W0, _f
L_ProcesarMuestras65:
0x09C4	0x804220  	MOV	_f, W0
0x09C6	0xE10075  	CP	W0, #21
0x09C8	0x310015  	BRA GEU	L_ProcesarMuestras66
L__ProcesarMuestras156:
0x09CA	0x804220  	MOV	_f, W0
0x09CC	0xDD0142  	SL	W0, #2, W2
0x09CE	0x293DE0  	MOV	#lo_addr(_h), W0
0x09D0	0x400082  	ADD	W0, W2, W1
0x09D2	0x7801B1  	MOV	[W1++], W3
0x09D4	0x780221  	MOV	[W1--], W4
0x09D6	0x208460  	MOV	#lo_addr(_XFIR), W0
0x09D8	0x400102  	ADD	W0, W2, W2
0x09DA	0xBE0012  	MOV.D	[W2], W0
0x09DC	0x780103  	MOV	W3, W2
0x09DE	0x780184  	MOV	W4, W3
0x09E0	0x07FE5E  	RCALL	__Mul_FP
0x09E2	0x804072  	MOV	_y0, W2
0x09E4	0x804083  	MOV	_y0+2, W3
0x09E6	0x07FC0C  	RCALL	__AddSub_FP
0x09E8	0x884070  	MOV	W0, _y0
0x09EA	0x884081  	MOV	W1, _y0+2
0x09EC	0x200011  	MOV	#1, W1
0x09EE	0x208440  	MOV	#lo_addr(_f), W0
0x09F0	0x408810  	ADD	W1, [W0], [W0]
0x09F2	0x37FFE8  	BRA	L_ProcesarMuestras65
L_ProcesarMuestras66:
;SensorNivel.c,561 :: 		YY = (unsigned int)(y0);                                          //Reconstruccion de la senal: y en 10 bits.
0x09F4	0x804070  	MOV	_y0, W0
0x09F6	0x804081  	MOV	_y0+2, W1
0x09F8	0x07FD3D  	RCALL	__Float2Longint
0x09FA	0x884060  	MOV	W0, _YY
;SensorNivel.c,562 :: 		vectorMuestras[k] = YY;
0x09FC	0x805B41  	MOV	_k, W1
0x09FE	0xDD0941  	SL	W1, #1, W2
0x0A00	0x208A81  	MOV	#lo_addr(_vectorMuestras), W1
0x0A02	0x408082  	ADD	W1, W2, W1
0x0A04	0x780880  	MOV	W0, [W1]
;SensorNivel.c,545 :: 		for (k=0;k<numeroMuestras;k++){
0x0A06	0x200011  	MOV	#1, W1
0x0A08	0x20B680  	MOV	#lo_addr(_k), W0
0x0A0A	0x408810  	ADD	W1, [W0], [W0]
;SensorNivel.c,564 :: 		}
0x0A0C	0x37FFA1  	BRA	L_ProcesarMuestras58
L_ProcesarMuestras59:
;SensorNivel.c,566 :: 		bm = 2;                                                               //Cambia el estado de la bandera bm para dar paso al calculo del pmax y TOF
0x0A0E	0x20B641  	MOV	#lo_addr(_bm), W1
0x0A10	0xB3C020  	MOV.B	#2, W0
0x0A12	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,568 :: 		}
L_ProcesarMuestras57:
;SensorNivel.c,571 :: 		if (bm==2){
0x0A14	0x20B640  	MOV	#lo_addr(_bm), W0
0x0A16	0x784010  	MOV.B	[W0], W0
0x0A18	0xE10462  	CP.B	W0, #2
0x0A1A	0x3A0088  	BRA NZ	L_ProcesarMuestras68
L__ProcesarMuestras157:
;SensorNivel.c,573 :: 		yy1 = Vector_Max(vectorMuestras, numeroMuestras, &maxIndex);                                    //Encuentra el valor maximo del vector R
0x0A1C	0x208420  	MOV	#lo_addr(_maxIndex), W0
0x0A1E	0x781F80  	PUSH	W0
0x0A20	0x2015E0  	MOV	#350, W0
0x0A22	0x781F80  	PUSH	W0
0x0A24	0x208A80  	MOV	#lo_addr(_vectorMuestras), W0
0x0A26	0x781F80  	PUSH	W0
0x0A28	0x07FCA7  	RCALL	_Vector_Max
0x0A2A	0xB1006F  	SUB	#6, W15
0x0A2C	0x884200  	MOV	W0, _yy1
;SensorNivel.c,574 :: 		i1b = maxIndex;                                                        //Asigna el subindice del valor maximo a la variable i1a
0x0A2E	0x804210  	MOV	_maxIndex, W0
0x0A30	0x8844D0  	MOV	W0, _i1b
;SensorNivel.c,575 :: 		i1a = 0;
0x0A32	0xEF2000  	CLR	W0
0x0A34	0x884510  	MOV	W0, _i1a
;SensorNivel.c,577 :: 		while (vectorMuestras[i1a]<yy1){
L_ProcesarMuestras69:
0x0A36	0x804510  	MOV	_i1a, W0
0x0A38	0xDD00C1  	SL	W0, #1, W1
0x0A3A	0x208A80  	MOV	#lo_addr(_vectorMuestras), W0
0x0A3C	0x400001  	ADD	W0, W1, W0
0x0A3E	0x780090  	MOV	[W0], W1
0x0A40	0x208400  	MOV	#lo_addr(_yy1), W0
0x0A42	0xE10810  	CP	W1, [W0]
0x0A44	0x310004  	BRA GEU	L_ProcesarMuestras70
L__ProcesarMuestras158:
;SensorNivel.c,578 :: 		i1a++;
0x0A46	0x200011  	MOV	#1, W1
0x0A48	0x208A20  	MOV	#lo_addr(_i1a), W0
0x0A4A	0x408810  	ADD	W1, [W0], [W0]
;SensorNivel.c,579 :: 		}
0x0A4C	0x37FFF4  	BRA	L_ProcesarMuestras69
L_ProcesarMuestras70:
;SensorNivel.c,581 :: 		i1 = i1a+((i1b-i1a)/2);
0x0A4E	0x8044D1  	MOV	_i1b, W1
0x0A50	0x208A20  	MOV	#lo_addr(_i1a), W0
0x0A52	0x508010  	SUB	W1, [W0], W0
0x0A54	0xDE00C1  	LSR	W0, #1, W1
0x0A56	0x208A20  	MOV	#lo_addr(_i1a), W0
0x0A58	0x408090  	ADD	W1, [W0], W1
0x0A5A	0x884521  	MOV	W1, _i1
;SensorNivel.c,582 :: 		i0 = i1 - dix;
0x0A5C	0x508074  	SUB	W1, #20, W0
0x0A5E	0x884530  	MOV	W0, _i0
;SensorNivel.c,583 :: 		i2 = i1 + dix;
0x0A60	0x4081F4  	ADD	W1, #20, W3
0x0A62	0x8844E3  	MOV	W3, _i2
;SensorNivel.c,585 :: 		yy0 = vectorMuestras[i0];
0x0A64	0xDD00C1  	SL	W0, #1, W1
0x0A66	0x208A80  	MOV	#lo_addr(_vectorMuestras), W0
0x0A68	0x400001  	ADD	W0, W1, W0
0x0A6A	0x780110  	MOV	[W0], W2
0x0A6C	0x8844F2  	MOV	W2, _yy0
;SensorNivel.c,586 :: 		yy2 = vectorMuestras[i2];
0x0A6E	0xDD18C1  	SL	W3, #1, W1
0x0A70	0x208A80  	MOV	#lo_addr(_vectorMuestras), W0
0x0A72	0x400001  	ADD	W0, W1, W0
0x0A74	0x780010  	MOV	[W0], W0
0x0A76	0x980700  	MOV	W0, [W14+0]
0x0A78	0x884500  	MOV	W0, _yy2
;SensorNivel.c,588 :: 		yf0 = (float)(yy0);
0x0A7A	0x780002  	MOV	W2, W0
0x0A7C	0xDE80CF  	ASR	W0, #15, W1
0x0A7E	0xEB8100  	SETM	W2
0x0A80	0x07FC9E  	RCALL	__Long2Float
0x0A82	0x980740  	MOV	W0, [W14+8]
0x0A84	0x980751  	MOV	W1, [W14+10]
0x0A86	0x885B70  	MOV	W0, _yf0
0x0A88	0x885B81  	MOV	W1, _yf0+2
;SensorNivel.c,589 :: 		yf1 = (float)(yy1);
0x0A8A	0x804200  	MOV	_yy1, W0
0x0A8C	0xDE80CF  	ASR	W0, #15, W1
0x0A8E	0xEB8100  	SETM	W2
0x0A90	0x07FC96  	RCALL	__Long2Float
0x0A92	0x980720  	MOV	W0, [W14+4]
0x0A94	0x980731  	MOV	W1, [W14+6]
0x0A96	0x885CB0  	MOV	W0, _yf1
0x0A98	0x885CC1  	MOV	W1, _yf1+2
;SensorNivel.c,590 :: 		yf2 = (float)(yy2);
0x0A9A	0x90000E  	MOV	[W14+0], W0
0x0A9C	0xDE80CF  	ASR	W0, #15, W1
0x0A9E	0xEB8100  	SETM	W2
0x0AA0	0x07FC8E  	RCALL	__Long2Float
0x0AA2	0x980700  	MOV	W0, [W14+0]
0x0AA4	0x980711  	MOV	W1, [W14+2]
0x0AA6	0xBE9F80  	PUSH.D	W0
0x0AA8	0x90000E  	MOV	[W14+0], W0
0x0AAA	0x90009E  	MOV	[W14+2], W1
0x0AAC	0x885CD0  	MOV	W0, _yf2
0x0AAE	0x885CE1  	MOV	W1, _yf2+2
0x0AB0	0xBE004F  	POP.D	W0
;SensorNivel.c,592 :: 		nx = (yf0-yf2)/(2.0*(yf0-(2.0*yf1)+yf2));                              //Factor de ajuste determinado por interpolacion parabolica
0x0AB2	0x90004E  	MOV	[W14+8], W0
0x0AB4	0x9000DE  	MOV	[W14+10], W1
0x0AB6	0xBE9F82  	PUSH.D	W2
0x0AB8	0x90010E  	MOV	[W14+0], W2
0x0ABA	0x90019E  	MOV	[W14+2], W3
0x0ABC	0x07FDEB  	RCALL	__Sub_FP
0x0ABE	0xBE014F  	POP.D	W2
0x0AC0	0x90012E  	MOV	[W14+4], W2
0x0AC2	0x9001BE  	MOV	[W14+6], W3
0x0AC4	0x980720  	MOV	W0, [W14+4]
0x0AC6	0x980731  	MOV	W1, [W14+6]
0x0AC8	0x200000  	MOV	#0, W0
0x0ACA	0x240001  	MOV	#16384, W1
0x0ACC	0x07FDE8  	RCALL	__Mul_FP
0x0ACE	0x980700  	MOV	W0, [W14+0]
0x0AD0	0x980711  	MOV	W1, [W14+2]
0x0AD2	0x805B70  	MOV	_yf0, W0
0x0AD4	0x805B81  	MOV	_yf0+2, W1
0x0AD6	0xBE9F82  	PUSH.D	W2
0x0AD8	0x90010E  	MOV	[W14+0], W2
0x0ADA	0x90019E  	MOV	[W14+2], W3
0x0ADC	0x07FDDB  	RCALL	__Sub_FP
0x0ADE	0xBE014F  	POP.D	W2
0x0AE0	0x805CD2  	MOV	_yf2, W2
0x0AE2	0x805CE3  	MOV	_yf2+2, W3
0x0AE4	0x07FB8D  	RCALL	__AddSub_FP
0x0AE6	0x200002  	MOV	#0, W2
0x0AE8	0x240003  	MOV	#16384, W3
0x0AEA	0x07FDD9  	RCALL	__Mul_FP
0x0AEC	0x980700  	MOV	W0, [W14+0]
0x0AEE	0x980711  	MOV	W1, [W14+2]
0x0AF0	0x90002E  	MOV	[W14+4], W0
0x0AF2	0x9000BE  	MOV	[W14+6], W1
0x0AF4	0xBE9F82  	PUSH.D	W2
0x0AF6	0x90010E  	MOV	[W14+0], W2
0x0AF8	0x90019E  	MOV	[W14+2], W3
0x0AFA	0x07FD31  	RCALL	__Div_FP
0x0AFC	0xBE014F  	POP.D	W2
0x0AFE	0x885CF0  	MOV	W0, _nx
0x0B00	0x885D01  	MOV	W1, _nx+2
;SensorNivel.c,593 :: 		dx = nx*dix*tx;
0x0B02	0x200002  	MOV	#0, W2
0x0B04	0x241A03  	MOV	#16800, W3
0x0B06	0x07FDCB  	RCALL	__Mul_FP
0x0B08	0x200002  	MOV	#0, W2
0x0B0A	0x240A03  	MOV	#16544, W3
0x0B0C	0x07FDC8  	RCALL	__Mul_FP
0x0B0E	0x885C50  	MOV	W0, _dx
0x0B10	0x885C61  	MOV	W1, _dx+2
;SensorNivel.c,594 :: 		tmax = i1*tx;
0x0B12	0x804520  	MOV	_i1, W0
0x0B14	0xEB0080  	CLR	W1
0x0B16	0x07FC53  	RCALL	__Long2Float
0x0B18	0x200002  	MOV	#0, W2
0x0B1A	0x240A03  	MOV	#16544, W3
0x0B1C	0x07FDC0  	RCALL	__Mul_FP
0x0B1E	0x885C70  	MOV	W0, _tmax
0x0B20	0x885C81  	MOV	W1, _tmax+2
;SensorNivel.c,596 :: 		T2 = tmax+dx;
0x0B22	0x805C52  	MOV	_dx, W2
0x0B24	0x805C63  	MOV	_dx+2, W3
0x0B26	0x07FB6C  	RCALL	__AddSub_FP
0x0B28	0x885C90  	MOV	W0, _T2
0x0B2A	0x885CA1  	MOV	W1, _T2+2
;SensorNivel.c,598 :: 		}
L_ProcesarMuestras68:
;SensorNivel.c,600 :: 		LED1 = 0;
0x0B2C	0xA982C4  	BCLR	LATA4_bit, BitPos(LATA4_bit+0)
;SensorNivel.c,602 :: 		}
L_end_ProcesarMuestras:
0x0B2E	0xFA8000  	ULNK
0x0B30	0x060000  	RETURN
; end of _ProcesarMuestras
_Vector_Max:
0x0378	0xFA0000  	LNK	#0
;__Lib_Vectors.c,343 :: 		
;__Lib_Vectors.c,346 :: 		
0x037A	0x97B92E  	MOV	[W14-12], W2
;__Lib_Vectors.c,347 :: 		
0x037C	0x97B83E  	MOV	[W14-10], W0
;__Lib_Vectors.c,348 :: 		
0x037E	0x97B8CE  	MOV	[W14-8], W1
;__Lib_Vectors.c,352 :: 		
0x0380	0x7802B1  	MOV	[W1++], W5
;__Lib_Vectors.c,353 :: 		
0x0382	0xEB0900  	CLR	[W2]
;__Lib_Vectors.c,354 :: 		
0x0384	0xE90200  	DEC	W0, W4
;__Lib_Vectors.c,355 :: 		
0x0386	0x340007  	BRA LE	_VCT_L23
;__Lib_Vectors.c,356 :: 		
_VCT_L20:
;__Lib_Vectors.c,357 :: 		
0x0388	0x7801B1  	MOV	[W1++], W3
;__Lib_Vectors.c,358 :: 		
0x038A	0xE12803  	CP	W5, W3
;__Lib_Vectors.c,359 :: 		
0x038C	0x3C0002  	BRA GT	_VCT_L22
;__Lib_Vectors.c,360 :: 		
_VCT_L21:
;__Lib_Vectors.c,361 :: 		
0x038E	0x880053  	MOV	W3, W5
;__Lib_Vectors.c,362 :: 		
0x0390	0x500904  	SUB	W0, W4, [W2]
;__Lib_Vectors.c,363 :: 		
_VCT_L22:
;__Lib_Vectors.c,364 :: 		
0x0392	0xE90204  	DEC	W4, W4
;__Lib_Vectors.c,365 :: 		
0x0394	0x3CFFF9  	BRA GT	_VCT_L20
;__Lib_Vectors.c,366 :: 		
_VCT_L23:
;__Lib_Vectors.c,368 :: 		
0x0396	0x880005  	MOV	W5, W0
;__Lib_Vectors.c,370 :: 		
L_end_Vector_Max:
0x0398	0xFA8000  	ULNK
0x039A	0x060000  	RETURN
; end of _Vector_Max
__Long2Float:
0x03BE	0xFA0000  	LNK	#0
;__Lib_MathDouble.c,104 :: 		
;__Lib_MathDouble.c,106 :: 		
0x03C0	0x070002  	RCALL	LL_intro_Long2Float
;__Lib_MathDouble.c,107 :: 		
0x03C2	0x000000040470  	GOTO	the_end__Long2Float
;__Lib_MathDouble.c,109 :: 		
LL_intro_Long2Float:
;__Lib_MathDouble.c,110 :: 		
0x03C6	0xE20004  	CP0	W2
;__Lib_MathDouble.c,111 :: 		
0x03C8	0x3A0006  	BRA NZ	Longint2Float__floatsisf
;__Lib_MathDouble.c,113 :: 		
Longword2Float__floatuisf:
;__Lib_MathDouble.c,114 :: 		
0x03CA	0xEB0500  	CLR	W10
;__Lib_MathDouble.c,115 :: 		
0x03CC	0xE20002  	CP0	W1
;__Lib_MathDouble.c,116 :: 		
0x03CE	0x3E000F  	BRA GTU	Long2Float_notspecial
;__Lib_MathDouble.c,117 :: 		
0x03D0	0xE20000  	CP0	W0
;__Lib_MathDouble.c,118 :: 		
0x03D2	0x320027  	BRA Z	Long2Float_return0
;__Lib_MathDouble.c,119 :: 		
0x03D4	0x37000C  	BRA	Long2Float_notspecial
;__Lib_MathDouble.c,121 :: 		
Longint2Float__floatsisf:
;__Lib_MathDouble.c,122 :: 		
0x03D6	0x8800A1  	MOV	W1, W10
;__Lib_MathDouble.c,123 :: 		
0x03D8	0xE20002  	CP0	W1
;__Lib_MathDouble.c,124 :: 		
0x03DA	0x350004  	BRA LT	Longint2Float_negative
;__Lib_MathDouble.c,125 :: 		
0x03DC	0x3C0008  	BRA GT	Long2Float_notspecial
;__Lib_MathDouble.c,126 :: 		
0x03DE	0xE20000  	CP0	W0
;__Lib_MathDouble.c,127 :: 		
0x03E0	0x320020  	BRA Z	Long2Float_return0
;__Lib_MathDouble.c,128 :: 		
0x03E2	0x370005  	BRA	Long2Float_notspecial
;__Lib_MathDouble.c,129 :: 		
Longint2Float_negative:
;__Lib_MathDouble.c,130 :: 		
0x03E4	0x100060  	SUBR	W0, #0, W0
;__Lib_MathDouble.c,131 :: 		
0x03E6	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_MathDouble.c,132 :: 		
0x03E8	0x3B0002  	BRA NN	Long2Float_notspecial
;__Lib_MathDouble.c,133 :: 		
0x03EA	0x2CF001  	MOV	#52992, W1
;__Lib_MathDouble.c,134 :: 		
0x03EC	0x37001A  	BRA	Long2Float_return0
;__Lib_MathDouble.c,136 :: 		
Long2Float_notspecial:
;__Lib_MathDouble.c,137 :: 		
0x03EE	0xBE8400  	MOV.D	W0, W8
;__Lib_MathDouble.c,138 :: 		
0x03F0	0xB81160  	MUL.UU	W2, #0, W2
;__Lib_MathDouble.c,139 :: 		
0x03F2	0x20096B  	MOV	#150, W11
;__Lib_MathDouble.c,140 :: 		
0x03F4	0xCF8209  	FF1L	W9, W4
;__Lib_MathDouble.c,141 :: 		
0x03F6	0x390002  	BRA NC	Long2Float_fixshift
;__Lib_MathDouble.c,142 :: 		
0x03F8	0xCF8208  	FF1L	W8, W4
;__Lib_MathDouble.c,143 :: 		
0x03FA	0xB04104  	ADD.B	#16, W4
;__Lib_MathDouble.c,144 :: 		
Long2Float_fixshift:
;__Lib_MathDouble.c,145 :: 		
0x03FC	0x524269  	SUB.B	W4, #9, W4
;__Lib_MathDouble.c,146 :: 		
0x03FE	0x32000E  	BRA Z	Long2Float_round
;__Lib_MathDouble.c,147 :: 		
0x0400	0x3B0008  	BRA NN	Long2Float_shiftleft
;__Lib_MathDouble.c,148 :: 		
Long2Float_shiftright:
;__Lib_MathDouble.c,149 :: 		
0x0402	0x718182  	IOR	W3, W2, W3
;__Lib_MathDouble.c,150 :: 		
0x0404	0x640161  	AND	W8, #1, W2
;__Lib_MathDouble.c,151 :: 		
0x0406	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,152 :: 		
0x0408	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,153 :: 		
0x040A	0xE8058B  	INC	W11, W11
;__Lib_MathDouble.c,154 :: 		
0x040C	0xE84204  	INC.B	W4, W4
;__Lib_MathDouble.c,155 :: 		
0x040E	0x3AFFF9  	BRA NZ	Long2Float_shiftright
;__Lib_MathDouble.c,156 :: 		
0x0410	0x370005  	BRA	Long2Float_round
;__Lib_MathDouble.c,157 :: 		
Long2Float_shiftleft:
;__Lib_MathDouble.c,158 :: 		
0x0412	0x440408  	ADD	W8, W8, W8
;__Lib_MathDouble.c,159 :: 		
0x0414	0x4C8489  	ADDC	W9, W9, W9
;__Lib_MathDouble.c,160 :: 		
0x0416	0xE9058B  	DEC	W11, W11
;__Lib_MathDouble.c,161 :: 		
0x0418	0xE94204  	DEC.B	W4, W4
;__Lib_MathDouble.c,162 :: 		
0x041A	0x3AFFFB  	BRA NZ	Long2Float_shiftleft
;__Lib_MathDouble.c,163 :: 		
Long2Float_round:
;__Lib_MathDouble.c,164 :: 		
0x041C	0x070003  	RCALL	Long2Float__fpack
;__Lib_MathDouble.c,165 :: 		
0x041E	0xA7F00A  	BTSC	W10, #15
;__Lib_MathDouble.c,166 :: 		
0x0420	0xA8E003  	BSET	W1, #15
;__Lib_MathDouble.c,167 :: 		
Long2Float_return0:
;__Lib_MathDouble.c,168 :: 		
0x0422	0x060000  	RETURN
;__Lib_MathDouble.c,169 :: 		
Long2Float__fpack:
;__Lib_MathDouble.c,170 :: 		
0x0424	0x200081  	MOV	#8, W1
;__Lib_MathDouble.c,171 :: 		
0x0426	0x558061  	SUB	W11, #1, W0
;__Lib_MathDouble.c,172 :: 		
0x0428	0x3D000B  	BRA GE	Long2Float_notsubnormal
;__Lib_MathDouble.c,173 :: 		
0x042A	0x20000B  	MOV	#0, W11
;__Lib_MathDouble.c,174 :: 		
0x042C	0x2FFE61  	MOV	#65510, W1
;__Lib_MathDouble.c,175 :: 		
0x042E	0xE10001  	CP	W0, W1
;__Lib_MathDouble.c,176 :: 		
0x0430	0x34001D  	BRA LE	Long2Float_zerosig
;__Lib_MathDouble.c,177 :: 		
Long2Float_subnormal:
;__Lib_MathDouble.c,178 :: 		
0x0432	0x718182  	IOR	W3, W2, W3
;__Lib_MathDouble.c,179 :: 		
0x0434	0x640161  	AND	W8, #1, W2
;__Lib_MathDouble.c,180 :: 		
0x0436	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,181 :: 		
0x0438	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,182 :: 		
0x043A	0xE80000  	INC	W0, W0
;__Lib_MathDouble.c,183 :: 		
0x043C	0x3AFFFA  	BRA NZ	Long2Float_subnormal
;__Lib_MathDouble.c,184 :: 		
0x043E	0x200071  	MOV	#7, W1
;__Lib_MathDouble.c,185 :: 		
Long2Float_notsubnormal:
;__Lib_MathDouble.c,186 :: 		
0x0440	0x640061  	AND	W8, #1, W0
;__Lib_MathDouble.c,187 :: 		
0x0442	0x700003  	IOR	W0, W3, W0
;__Lib_MathDouble.c,188 :: 		
0x0444	0x600002  	AND	W0, W2, W0
;__Lib_MathDouble.c,189 :: 		
0x0446	0x320009  	BRA Z	Long2Float_packupandgo
;__Lib_MathDouble.c,190 :: 		
0x0448	0x440461  	ADD	W8, #1, W8
;__Lib_MathDouble.c,191 :: 		
0x044A	0x4C84E0  	ADDC	W9, #0, W9
;__Lib_MathDouble.c,192 :: 		
0x044C	0xA58809  	BTST.Z	W9, W1
;__Lib_MathDouble.c,193 :: 		
0x044E	0x320005  	BRA Z	Long2Float_packupandgo
;__Lib_MathDouble.c,194 :: 		
0x0450	0xE8058B  	INC	W11, W11
;__Lib_MathDouble.c,195 :: 		
0x0452	0xE10868  	CP	W1, #8
;__Lib_MathDouble.c,196 :: 		
0x0454	0x3A0002  	BRA NZ	Long2Float_packupandgo
;__Lib_MathDouble.c,197 :: 		
0x0456	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,198 :: 		
0x0458	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,199 :: 		
Long2Float_packupandgo:
;__Lib_MathDouble.c,200 :: 		
0x045A	0x200FF2  	MOV	#255, W2
;__Lib_MathDouble.c,201 :: 		
0x045C	0xE15802  	CP	W11, W2
;__Lib_MathDouble.c,202 :: 		
0x045E	0x3D0005  	BRA GE	Long2Float_overflow
;__Lib_MathDouble.c,203 :: 		
0x0460	0xDD5DC7  	SL	W11, #7, W11
;__Lib_MathDouble.c,204 :: 		
0x0462	0xB207F9  	AND	#127, W9
;__Lib_MathDouble.c,205 :: 		
0x0464	0x758089  	IOR	W11, W9, W1
;__Lib_MathDouble.c,206 :: 		
0x0466	0x880008  	MOV	W8, W0
;__Lib_MathDouble.c,207 :: 		
0x0468	0x060000  	RETURN
;__Lib_MathDouble.c,208 :: 		
Long2Float_overflow:
;__Lib_MathDouble.c,209 :: 		
0x046A	0x27F80B  	MOV	#32640, W11
;__Lib_MathDouble.c,210 :: 		
Long2Float_zerosig:
;__Lib_MathDouble.c,211 :: 		
0x046C	0x88001B  	MOV	W11, W1
;__Lib_MathDouble.c,212 :: 		
0x046E	0x050000  	RETLW	#0, W0
;__Lib_MathDouble.c,215 :: 		
the_end__Long2Float:
;__Lib_MathDouble.c,218 :: 		
L_end__Long2Float:
0x0470	0xFA8000  	ULNK
0x0472	0x060000  	RETURN
; end of __Long2Float
__Sub_FP:
0x0694	0xFA0000  	LNK	#0
;__Lib_MathDouble.c,830 :: 		
;__Lib_MathDouble.c,831 :: 		
0x0696	0xAAE007  	BTG	W3, #15
;__Lib_MathDouble.c,832 :: 		
0x0698	0x07FDB3  	RCALL	__AddSub_FP
;__Lib_MathDouble.c,833 :: 		
L_end__Sub_FP:
0x069A	0xFA8000  	ULNK
0x069C	0x060000  	RETURN
; end of __Sub_FP
__AddSub_FP:
0x0200	0xFA0000  	LNK	#0
;__Lib_MathDouble.c,582 :: 		
;__Lib_MathDouble.c,584 :: 		
0x0202	0x070002  	RCALL	AddSubFP__addsf3
;__Lib_MathDouble.c,585 :: 		
0x0204	0x000000040368  	GOTO	the_end__AddSub_FP
;__Lib_MathDouble.c,588 :: 		
AddSubFP__addsf3:
;__Lib_MathDouble.c,589 :: 		
0x0208	0xBE9F88  	MOV.D	W8, [W15++]
;__Lib_MathDouble.c,590 :: 		
0x020A	0xBE9F8A  	MOV.D	W10, [W15++]
;__Lib_MathDouble.c,591 :: 		
0x020C	0x781F8C  	MOV	W12, [W15++]
;__Lib_MathDouble.c,592 :: 		
0x020E	0x070059  	RCALL	AddSubFP__funpack2
;__Lib_MathDouble.c,593 :: 		
0x0210	0x330060  	BRA N	AddSubFP__fPropagateNaN
;__Lib_MathDouble.c,594 :: 		
0x0212	0xE15064  	CP	W10, #4
;__Lib_MathDouble.c,595 :: 		
0x0214	0x32004F  	BRA Z	AddSubFP_aisinfinite
;__Lib_MathDouble.c,596 :: 		
AddSubFP_checkspecialb:
;__Lib_MathDouble.c,597 :: 		
0x0216	0xE12064  	CP	W4, #4
;__Lib_MathDouble.c,598 :: 		
0x0218	0x320052  	BRA Z	AddSubFP_return2_3
;__Lib_MathDouble.c,599 :: 		
0x021A	0x6C8203  	XOR	W9, W3, W4
;__Lib_MathDouble.c,600 :: 		
0x021C	0x3B0007  	BRA NN	AddSubFP_getsign
;__Lib_MathDouble.c,601 :: 		
0x021E	0xD00509  	SL	W9, W10
;__Lib_MathDouble.c,602 :: 		
0x0220	0xD00603  	SL	W3, W12
;__Lib_MathDouble.c,603 :: 		
0x0222	0x540F82  	SUB	W8, W2, [W15]
;__Lib_MathDouble.c,604 :: 		
0x0224	0x5D060C  	SUBB	W10, W12, W12
;__Lib_MathDouble.c,605 :: 		
0x0226	0x390002  	BRA NC	AddSubFP_getsign
;__Lib_MathDouble.c,606 :: 		
0x0228	0x320002  	BRA Z	AddSubFP_gotsign
;__Lib_MathDouble.c,607 :: 		
0x022A	0x880039  	MOV	W9, W3
;__Lib_MathDouble.c,608 :: 		
AddSubFP_getsign:
;__Lib_MathDouble.c,609 :: 		
0x022C	0x8800C3  	MOV	W3, W12
;__Lib_MathDouble.c,610 :: 		
AddSubFP_gotsign:
;__Lib_MathDouble.c,611 :: 		
0x022E	0x558285  	SUB	W11, W5, W5
;__Lib_MathDouble.c,612 :: 		
0x0230	0x3D0004  	BRA GE	AddSubFP_expcanonical
;__Lib_MathDouble.c,613 :: 		
0x0232	0xFD0300  	EXCH	W0, W6
;__Lib_MathDouble.c,614 :: 		
0x0234	0xFD0381  	EXCH	W1, W7
;__Lib_MathDouble.c,615 :: 		
0x0236	0xEA0285  	NEG	W5, W5
;__Lib_MathDouble.c,616 :: 		
0x0238	0x42858B  	ADD	W5, W11, W11
;__Lib_MathDouble.c,617 :: 		
AddSubFP_expcanonical:
;__Lib_MathDouble.c,618 :: 		
0x023A	0x720F84  	IOR	W4, W4, [W15]
;__Lib_MathDouble.c,619 :: 		
0x023C	0x3B0002  	BRA NN	AddSubFP_nonegate
;__Lib_MathDouble.c,620 :: 		
0x023E	0x100060  	SUBR	W0, #0, W0
;__Lib_MathDouble.c,621 :: 		
0x0240	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_MathDouble.c,622 :: 		
AddSubFP_nonegate:
;__Lib_MathDouble.c,623 :: 		
0x0242	0xB81160  	MUL.UU	W2, #0, W2
;__Lib_MathDouble.c,624 :: 		
0x0244	0xEB0500  	CLR	W10
;__Lib_MathDouble.c,625 :: 		
0x0246	0xE1287A  	CP	W5, #26
;__Lib_MathDouble.c,626 :: 		
0x0248	0x39000A  	BRA NC	AddSubFP_aligniter
;__Lib_MathDouble.c,627 :: 		
0x024A	0x880006  	MOV	W6, W0
;__Lib_MathDouble.c,628 :: 		
0x024C	0xDD5DC7  	SL	W11, #7, W11
;__Lib_MathDouble.c,629 :: 		
0x024E	0xB207F7  	AND	#127, W7
;__Lib_MathDouble.c,630 :: 		
0x0250	0x758087  	IOR	W11, W7, W1
;__Lib_MathDouble.c,631 :: 		
0x0252	0x37002D  	BRA	AddSubFP_signoff
;__Lib_MathDouble.c,632 :: 		
AddSubFP_align:
;__Lib_MathDouble.c,633 :: 		
0x0254	0x718182  	IOR	W3, W2, W3
;__Lib_MathDouble.c,634 :: 		
0x0256	0x88002A  	MOV	W10, W2
;__Lib_MathDouble.c,635 :: 		
0x0258	0x600561  	AND	W0, #1, W10
;__Lib_MathDouble.c,636 :: 		
0x025A	0xD18081  	ASR	W1, W1
;__Lib_MathDouble.c,637 :: 		
0x025C	0xD38000  	RRC	W0, W0
;__Lib_MathDouble.c,638 :: 		
AddSubFP_aligniter:
;__Lib_MathDouble.c,639 :: 		
0x025E	0xE90285  	DEC	W5, W5
;__Lib_MathDouble.c,640 :: 		
0x0260	0x3BFFF9  	BRA NN	AddSubFP_align
;__Lib_MathDouble.c,641 :: 		
AddSubFP_aligned:
;__Lib_MathDouble.c,642 :: 		
0x0262	0x400406  	ADD	W0, W6, W8
;__Lib_MathDouble.c,643 :: 		
0x0264	0x488487  	ADDC	W1, W7, W9
;__Lib_MathDouble.c,644 :: 		
0x0266	0x3B0002  	BRA NN	AddSubFP_normalizesum
;__Lib_MathDouble.c,645 :: 		
0x0268	0x140460  	SUBR	W8, #0, W8
;__Lib_MathDouble.c,646 :: 		
0x026A	0x1C84E0  	SUBBR	W9, #0, W9
;__Lib_MathDouble.c,647 :: 		
AddSubFP_normalizesum:
;__Lib_MathDouble.c,648 :: 		
0x026C	0xA38809  	BTST.Z	W9, #8
;__Lib_MathDouble.c,649 :: 		
0x026E	0x320007  	BRA Z	AddSubFP_checknormal
;__Lib_MathDouble.c,650 :: 		
0x0270	0x71818A  	IOR	W3, W10, W3
;__Lib_MathDouble.c,651 :: 		
0x0272	0x718182  	IOR	W3, W2, W3
;__Lib_MathDouble.c,652 :: 		
0x0274	0x640161  	AND	W8, #1, W2
;__Lib_MathDouble.c,653 :: 		
0x0276	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,654 :: 		
0x0278	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,655 :: 		
0x027A	0xE8058B  	INC	W11, W11
;__Lib_MathDouble.c,656 :: 		
0x027C	0x370017  	BRA	AddSubFP_round
;__Lib_MathDouble.c,657 :: 		
AddSubFP_checknormal:
;__Lib_MathDouble.c,658 :: 		
0x027E	0xA37809  	BTST.Z	W9, #7
;__Lib_MathDouble.c,659 :: 		
0x0280	0x3A0013  	BRA NZ	AddSubFP_discardguard
;__Lib_MathDouble.c,660 :: 		
AddSubFP_underflow:
;__Lib_MathDouble.c,661 :: 		
0x0282	0xE20016  	CP0	W11
;__Lib_MathDouble.c,662 :: 		
0x0284	0x340013  	BRA LE	AddSubFP_round
;__Lib_MathDouble.c,663 :: 		
0x0286	0xE9058B  	DEC	W11, W11
;__Lib_MathDouble.c,664 :: 		
0x0288	0x440408  	ADD	W8, W8, W8
;__Lib_MathDouble.c,665 :: 		
0x028A	0x4C8489  	ADDC	W9, W9, W9
;__Lib_MathDouble.c,666 :: 		
0x028C	0x74440A  	IOR.B	W8, W10, W8
;__Lib_MathDouble.c,667 :: 		
0x028E	0xA37809  	BTST.Z	W9, #7
;__Lib_MathDouble.c,668 :: 		
0x0290	0x3A000D  	BRA NZ	AddSubFP_round
;__Lib_MathDouble.c,669 :: 		
AddSubFP_normalizeloop:
;__Lib_MathDouble.c,670 :: 		
0x0292	0xE20016  	CP0	W11
;__Lib_MathDouble.c,671 :: 		
0x0294	0x340007  	BRA LE	AddSubFP_normalizeexit
;__Lib_MathDouble.c,672 :: 		
0x0296	0xE9058B  	DEC	W11, W11
;__Lib_MathDouble.c,673 :: 		
0x0298	0x440408  	ADD	W8, W8, W8
;__Lib_MathDouble.c,674 :: 		
0x029A	0x4C8489  	ADDC	W9, W9, W9
;__Lib_MathDouble.c,675 :: 		
0x029C	0x3A0001  	BRA NZ	AddSubFP_normalizetest
;__Lib_MathDouble.c,676 :: 		
0x029E	0x20000B  	MOV	#0, W11
;__Lib_MathDouble.c,677 :: 		
AddSubFP_normalizetest:
;__Lib_MathDouble.c,678 :: 		
0x02A0	0xA37809  	BTST.Z	W9, #7
;__Lib_MathDouble.c,679 :: 		
0x02A2	0x32FFF7  	BRA Z	AddSubFP_normalizeloop
;__Lib_MathDouble.c,680 :: 		
AddSubFP_normalizeexit:
;__Lib_MathDouble.c,681 :: 		
0x02A4	0xEB0100  	CLR	W2
;__Lib_MathDouble.c,682 :: 		
0x02A6	0x370002  	BRA	AddSubFP_round
;__Lib_MathDouble.c,683 :: 		
AddSubFP_discardguard:
;__Lib_MathDouble.c,684 :: 		
0x02A8	0x718182  	IOR	W3, W2, W3
;__Lib_MathDouble.c,685 :: 		
0x02AA	0x88002A  	MOV	W10, W2
;__Lib_MathDouble.c,686 :: 		
AddSubFP_round:
;__Lib_MathDouble.c,687 :: 		
0x02AC	0x070022  	RCALL	AddSubFP__fpack
;__Lib_MathDouble.c,688 :: 		
AddSubFP_signoff:
;__Lib_MathDouble.c,689 :: 		
0x02AE	0xA7F00C  	BTSC	W12, #15
;__Lib_MathDouble.c,690 :: 		
0x02B0	0xA8E003  	BSET	W1, #15
;__Lib_MathDouble.c,691 :: 		
0x02B2	0x370018  	BRA	AddSubFP__fbopExit
;__Lib_MathDouble.c,692 :: 		
AddSubFP_aisinfinite:
;__Lib_MathDouble.c,693 :: 		
0x02B4	0xE12064  	CP	W4, #4
;__Lib_MathDouble.c,694 :: 		
0x02B6	0x3A0002  	BRA NZ	AddSubFP_return8_3
;__Lib_MathDouble.c,695 :: 		
0x02B8	0x6C8F83  	XOR	W9, W3, [W15]
;__Lib_MathDouble.c,696 :: 		
0x02BA	0x330018  	BRA N	AddSubFP__fbopReturnNaN
;__Lib_MathDouble.c,697 :: 		
AddSubFP_return8_3:
;__Lib_MathDouble.c,698 :: 		
0x02BC	0xBE8108  	MOV.D	W8, W2
;__Lib_MathDouble.c,699 :: 		
AddSubFP_return2_3:
;__Lib_MathDouble.c,700 :: 		
0x02BE	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.c,701 :: 		
0x02C0	0x370011  	BRA	AddSubFP__fbopExit
;__Lib_MathDouble.c,702 :: 		
AddSubFP__funpack2:
;__Lib_MathDouble.c,703 :: 		
0x02C2	0xBE8400  	MOV.D	W0, W8
;__Lib_MathDouble.c,704 :: 		
0x02C4	0x07003C  	RCALL	AddSubFP__funpack
;__Lib_MathDouble.c,705 :: 		
0x02C6	0xBE8300  	MOV.D	W0, W6
;__Lib_MathDouble.c,706 :: 		
0x02C8	0xBE8504  	MOV.D	W4, W10
;__Lib_MathDouble.c,707 :: 		
0x02CA	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.c,708 :: 		
0x02CC	0x070038  	RCALL	AddSubFP__funpack
;__Lib_MathDouble.c,709 :: 		
0x02CE	0x754F84  	IOR.B	W10, W4, [W15]
;__Lib_MathDouble.c,710 :: 		
0x02D0	0x060000  	RETURN
;__Lib_MathDouble.c,711 :: 		
AddSubFP__fPropagateNaN:
;__Lib_MathDouble.c,712 :: 		
0x02D2	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.c,713 :: 		
0x02D4	0xE15064  	CP	W10, #4
;__Lib_MathDouble.c,714 :: 		
0x02D6	0x360005  	BRA LEU	AddSubFP_return0_1
;__Lib_MathDouble.c,715 :: 		
0x02D8	0xE12064  	CP	W4, #4
;__Lib_MathDouble.c,716 :: 		
0x02DA	0x360002  	BRA LEU	AddSubFP_return8_1
;__Lib_MathDouble.c,717 :: 		
0x02DC	0xA36809  	BTST.Z	W9, #6
;__Lib_MathDouble.c,718 :: 		
0x02DE	0x3A0001  	BRA NZ	AddSubFP_return0_1
;__Lib_MathDouble.c,719 :: 		
AddSubFP_return8_1:
;__Lib_MathDouble.c,720 :: 		
0x02E0	0xBE8008  	MOV.D	W8, W0
;__Lib_MathDouble.c,721 :: 		
AddSubFP_return0_1:
;__Lib_MathDouble.c,722 :: 		
0x02E2	0xA8C002  	BSET	W1, #6
;__Lib_MathDouble.c,723 :: 		
AddSubFP__fbopExit:
;__Lib_MathDouble.c,724 :: 		
0x02E4	0x78064F  	MOV	[--W15], W12
;__Lib_MathDouble.c,725 :: 		
0x02E6	0xBE054F  	MOV.D	[--W15], W10
;__Lib_MathDouble.c,726 :: 		
0x02E8	0xBE044F  	MOV.D	[--W15], W8
;__Lib_MathDouble.c,727 :: 		
0x02EA	0x060000  	RETURN
;__Lib_MathDouble.c,728 :: 		
AddSubFP__fbopReturnNaN:
;__Lib_MathDouble.c,729 :: 		
0x02EC	0x2FFFF0  	MOV	#65535, W0
;__Lib_MathDouble.c,730 :: 		
0x02EE	0x27FFF1  	MOV	#32767, W1
;__Lib_MathDouble.c,731 :: 		
0x02F0	0x37FFF9  	BRA	AddSubFP__fbopExit
;__Lib_MathDouble.c,732 :: 		
AddSubFP__fpack:
;__Lib_MathDouble.c,733 :: 		
0x02F2	0x200081  	MOV	#8, W1
;__Lib_MathDouble.c,734 :: 		
0x02F4	0x558061  	SUB	W11, #1, W0
;__Lib_MathDouble.c,735 :: 		
0x02F6	0x3D000B  	BRA GE	AddSubFP_notsubnormal_1
;__Lib_MathDouble.c,736 :: 		
0x02F8	0x20000B  	MOV	#0, W11
;__Lib_MathDouble.c,737 :: 		
0x02FA	0x2FFE61  	MOV	#65510, W1
;__Lib_MathDouble.c,738 :: 		
0x02FC	0xE10001  	CP	W0, W1
;__Lib_MathDouble.c,739 :: 		
0x02FE	0x34001D  	BRA LE	AddSubFP_zerosig
;__Lib_MathDouble.c,740 :: 		
AddSubFP_subnormal_1:
;__Lib_MathDouble.c,741 :: 		
0x0300	0x718182  	IOR	W3, W2, W3
;__Lib_MathDouble.c,742 :: 		
0x0302	0x640161  	AND	W8, #1, W2
;__Lib_MathDouble.c,743 :: 		
0x0304	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,744 :: 		
0x0306	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,745 :: 		
0x0308	0xE80000  	INC	W0, W0
;__Lib_MathDouble.c,746 :: 		
0x030A	0x3AFFFA  	BRA NZ	AddSubFP_subnormal_1
;__Lib_MathDouble.c,747 :: 		
0x030C	0x200071  	MOV	#7, W1
;__Lib_MathDouble.c,748 :: 		
AddSubFP_notsubnormal_1:
;__Lib_MathDouble.c,749 :: 		
0x030E	0x640061  	AND	W8, #1, W0
;__Lib_MathDouble.c,750 :: 		
0x0310	0x700003  	IOR	W0, W3, W0
;__Lib_MathDouble.c,751 :: 		
0x0312	0x600002  	AND	W0, W2, W0
;__Lib_MathDouble.c,752 :: 		
0x0314	0x320009  	BRA Z	AddSubFP_packupandgo
;__Lib_MathDouble.c,753 :: 		
0x0316	0x440461  	ADD	W8, #1, W8
;__Lib_MathDouble.c,754 :: 		
0x0318	0x4C84E0  	ADDC	W9, #0, W9
;__Lib_MathDouble.c,755 :: 		
0x031A	0xA58809  	BTST.Z	W9, W1
;__Lib_MathDouble.c,756 :: 		
0x031C	0x320005  	BRA Z	AddSubFP_packupandgo
;__Lib_MathDouble.c,757 :: 		
0x031E	0xE8058B  	INC	W11, W11
;__Lib_MathDouble.c,758 :: 		
0x0320	0xE10868  	CP	W1, #8
;__Lib_MathDouble.c,759 :: 		
0x0322	0x3A0002  	BRA NZ	AddSubFP_packupandgo
;__Lib_MathDouble.c,760 :: 		
0x0324	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,761 :: 		
0x0326	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,762 :: 		
AddSubFP_packupandgo:
;__Lib_MathDouble.c,763 :: 		
0x0328	0x200FF2  	MOV	#255, W2
;__Lib_MathDouble.c,764 :: 		
0x032A	0xE15802  	CP	W11, W2
;__Lib_MathDouble.c,765 :: 		
0x032C	0x3D0005  	BRA GE	AddSubFP_overflow
;__Lib_MathDouble.c,766 :: 		
0x032E	0xDD5DC7  	SL	W11, #7, W11
;__Lib_MathDouble.c,767 :: 		
0x0330	0xB207F9  	AND	#127, W9
;__Lib_MathDouble.c,768 :: 		
0x0332	0x758089  	IOR	W11, W9, W1
;__Lib_MathDouble.c,769 :: 		
0x0334	0x880008  	MOV	W8, W0
;__Lib_MathDouble.c,770 :: 		
0x0336	0x060000  	RETURN
;__Lib_MathDouble.c,771 :: 		
AddSubFP_overflow:
;__Lib_MathDouble.c,772 :: 		
0x0338	0x27F80B  	MOV	#32640, W11
;__Lib_MathDouble.c,773 :: 		
AddSubFP_zerosig:
;__Lib_MathDouble.c,774 :: 		
0x033A	0x88001B  	MOV	W11, W1
;__Lib_MathDouble.c,775 :: 		
0x033C	0x050000  	RETLW	#0, W0
;__Lib_MathDouble.c,776 :: 		
AddSubFP__funpack:
;__Lib_MathDouble.c,777 :: 		
0x033E	0xDE0AC7  	LSR	W1, #7, W5
;__Lib_MathDouble.c,778 :: 		
0x0340	0xB207F1  	AND	#127, W1
;__Lib_MathDouble.c,779 :: 		
0x0342	0xB20FF5  	AND	#255, W5
;__Lib_MathDouble.c,780 :: 		
0x0344	0x320008  	BRA Z	AddSubFP_zeroorsub
;__Lib_MathDouble.c,781 :: 		
0x0346	0x42CFE1  	ADD.B	W5, #1, [W15]
;__Lib_MathDouble.c,782 :: 		
0x0348	0x320002  	BRA Z	AddSubFP_nanorinf
;__Lib_MathDouble.c,783 :: 		
AddSubFP_finitereturn:
;__Lib_MathDouble.c,784 :: 		
0x034A	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.c,785 :: 		
0x034C	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.c,786 :: 		
AddSubFP_nanorinf:
;__Lib_MathDouble.c,787 :: 		
0x034E	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.c,788 :: 		
0x0350	0x320001  	BRA Z	AddSubFP_infinite
;__Lib_MathDouble.c,789 :: 		
0x0352	0x050804  	RETLW	#128, W4
;__Lib_MathDouble.c,790 :: 		
AddSubFP_infinite:
;__Lib_MathDouble.c,791 :: 		
0x0354	0x050044  	RETLW	#4, W4
;__Lib_MathDouble.c,792 :: 		
AddSubFP_zeroorsub:
;__Lib_MathDouble.c,793 :: 		
0x0356	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.c,794 :: 		
0x0358	0x3A0002  	BRA NZ	AddSubFP_subnormal_2
;__Lib_MathDouble.c,795 :: 		
0x035A	0x050014  	RETLW	#1, W4
;__Lib_MathDouble.c,796 :: 		
AddSubFP_normalize:
;__Lib_MathDouble.c,797 :: 		
0x035C	0xE90285  	DEC	W5, W5
;__Lib_MathDouble.c,798 :: 		
AddSubFP_subnormal_2:
;__Lib_MathDouble.c,799 :: 		
0x035E	0x400000  	ADD	W0, W0, W0
;__Lib_MathDouble.c,800 :: 		
0x0360	0x48C081  	ADDC.B	W1, W1, W1
;__Lib_MathDouble.c,801 :: 		
0x0362	0x3BFFFC  	BRA NN	AddSubFP_normalize
;__Lib_MathDouble.c,802 :: 		
0x0364	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.c,803 :: 		
0x0366	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.c,806 :: 		
the_end__AddSub_FP:
;__Lib_MathDouble.c,809 :: 		
L_end__AddSub_FP:
0x0368	0xFA8000  	ULNK
0x036A	0x060000  	RETURN
; end of __AddSub_FP
__Mul_FP:
0x069E	0xFA0000  	LNK	#0
;__Lib_MathDouble.c,855 :: 		
;__Lib_MathDouble.c,857 :: 		
0x06A0	0x070002  	RCALL	MulFP___mulsf3
;__Lib_MathDouble.c,858 :: 		
0x06A2	0x0000000407B4  	GOTO	the_end__Mul_FP
;__Lib_MathDouble.c,861 :: 		
MulFP___mulsf3:
;__Lib_MathDouble.c,862 :: 		
0x06A6	0xBE9F88  	MOV.D	W8, [W15++]
;__Lib_MathDouble.c,863 :: 		
0x06A8	0xBE9F8A  	MOV.D	W10, [W15++]
;__Lib_MathDouble.c,864 :: 		
0x06AA	0x781F8C  	MOV	W12, [W15++]
;__Lib_MathDouble.c,865 :: 		
0x06AC	0x070030  	RCALL	MulFP__funpack2
;__Lib_MathDouble.c,866 :: 		
0x06AE	0x330037  	BRA N	MulFP__fPropagateNaN
;__Lib_MathDouble.c,867 :: 		
0x06B0	0x6C8603  	XOR	W9, W3, W12
;__Lib_MathDouble.c,868 :: 		
0x06B2	0xE15064  	CP	W10, #4
;__Lib_MathDouble.c,869 :: 		
0x06B4	0x320024  	BRA Z	MulFP_aisinfinite
;__Lib_MathDouble.c,870 :: 		
0x06B6	0xE12064  	CP	W4, #4
;__Lib_MathDouble.c,871 :: 		
0x06B8	0x320027  	BRA Z	MulFP_bisinfinite
;__Lib_MathDouble.c,872 :: 		
0x06BA	0xE15061  	CP	W10, #1
;__Lib_MathDouble.c,873 :: 		
0x06BC	0x320022  	BRA Z	MulFP_return8_1
;__Lib_MathDouble.c,874 :: 		
0x06BE	0xE12061  	CP	W4, #1
;__Lib_MathDouble.c,875 :: 		
0x06C0	0x320021  	BRA Z	MulFP_return2_1
;__Lib_MathDouble.c,876 :: 		
0x06C2	0x42858B  	ADD	W5, W11, W11
;__Lib_MathDouble.c,877 :: 		
0x06C4	0xB107EB  	SUB	#126, W11
;__Lib_MathDouble.c,878 :: 		
0x06C6	0xB83401  	MUL.UU	W6, W1, W8
;__Lib_MathDouble.c,879 :: 		
0x06C8	0xB83A00  	MUL.UU	W7, W0, W4
;__Lib_MathDouble.c,880 :: 		
0x06CA	0x420408  	ADD	W4, W8, W8
;__Lib_MathDouble.c,881 :: 		
0x06CC	0x4A8489  	ADDC	W5, W9, W9
;__Lib_MathDouble.c,882 :: 		
0x06CE	0xB83A01  	MUL.UU	W7, W1, W4
;__Lib_MathDouble.c,883 :: 		
0x06D0	0xB83000  	MUL.UU	W6, W0, W0
;__Lib_MathDouble.c,884 :: 		
0x06D2	0x408088  	ADD	W1, W8, W1
;__Lib_MathDouble.c,885 :: 		
0x06D4	0x4A0109  	ADDC	W4, W9, W2
;__Lib_MathDouble.c,886 :: 		
0x06D6	0x330004  	BRA N	MulFP_formsticky
;__Lib_MathDouble.c,887 :: 		
0x06D8	0x400000  	ADD	W0, W0, W0
;__Lib_MathDouble.c,888 :: 		
0x06DA	0x488081  	ADDC	W1, W1, W1
;__Lib_MathDouble.c,889 :: 		
0x06DC	0x490102  	ADDC	W2, W2, W2
;__Lib_MathDouble.c,890 :: 		
0x06DE	0xE9058B  	DEC	W11, W11
;__Lib_MathDouble.c,891 :: 		
MulFP_formsticky:
;__Lib_MathDouble.c,892 :: 		
0x06E0	0xDD09C9  	SL	W1, #9, W3
;__Lib_MathDouble.c,893 :: 		
0x06E2	0x700183  	IOR	W0, W3, W3
;__Lib_MathDouble.c,894 :: 		
0x06E4	0x320001  	BRA Z	MulFP_formRandSig
;__Lib_MathDouble.c,895 :: 		
0x06E6	0x200013  	MOV	#1, W3
;__Lib_MathDouble.c,896 :: 		
MulFP_formRandSig:
;__Lib_MathDouble.c,897 :: 		
0x06E8	0xDE14C8  	LSR	W2, #8, W9
;__Lib_MathDouble.c,898 :: 		
0x06EA	0xDD1448  	SL	W2, #8, W8
;__Lib_MathDouble.c,899 :: 		
0x06EC	0xDE0947  	LSR	W1, #7, W2
;__Lib_MathDouble.c,900 :: 		
0x06EE	0xB20012  	AND	#1, W2
;__Lib_MathDouble.c,901 :: 		
0x06F0	0xDE08C8  	LSR	W1, #8, W1
;__Lib_MathDouble.c,902 :: 		
0x06F2	0x708408  	IOR	W1, W8, W8
;__Lib_MathDouble.c,903 :: 		
0x06F4	0x070024  	RCALL	MulFP__fpack
;__Lib_MathDouble.c,904 :: 		
MulFP_return0_1:
;__Lib_MathDouble.c,905 :: 		
0x06F6	0xA1F001  	BCLR	W1, #15
;__Lib_MathDouble.c,906 :: 		
0x06F8	0xA7F00C  	BTSC	W12, #15
;__Lib_MathDouble.c,907 :: 		
0x06FA	0xA8E003  	BSET	W1, #15
;__Lib_MathDouble.c,908 :: 		
0x06FC	0x370019  	BRA	MulFP__fbopExit
;__Lib_MathDouble.c,909 :: 		
MulFP_aisinfinite:
;__Lib_MathDouble.c,910 :: 		
0x06FE	0xE12061  	CP	W4, #1
;__Lib_MathDouble.c,911 :: 		
0x0700	0x32001B  	BRA Z	MulFP__fbopReturnNaN
;__Lib_MathDouble.c,912 :: 		
MulFP_return8_1:
;__Lib_MathDouble.c,913 :: 		
0x0702	0xBE8108  	MOV.D	W8, W2
;__Lib_MathDouble.c,914 :: 		
MulFP_return2_1:
;__Lib_MathDouble.c,915 :: 		
0x0704	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.c,916 :: 		
0x0706	0x37FFF7  	BRA	MulFP_return0_1
;__Lib_MathDouble.c,917 :: 		
MulFP_bisinfinite:
;__Lib_MathDouble.c,918 :: 		
0x0708	0xE15061  	CP	W10, #1
;__Lib_MathDouble.c,919 :: 		
0x070A	0x3AFFFC  	BRA NZ	MulFP_return2_1
;__Lib_MathDouble.c,920 :: 		
0x070C	0x370015  	BRA	MulFP__fbopReturnNaN
;__Lib_MathDouble.c,921 :: 		
MulFP__funpack2:
;__Lib_MathDouble.c,922 :: 		
0x070E	0xBE8400  	MOV.D	W0, W8
;__Lib_MathDouble.c,923 :: 		
0x0710	0x07003C  	RCALL	MulFP__funpack
;__Lib_MathDouble.c,924 :: 		
0x0712	0xBE8300  	MOV.D	W0, W6
;__Lib_MathDouble.c,925 :: 		
0x0714	0xBE8504  	MOV.D	W4, W10
;__Lib_MathDouble.c,926 :: 		
0x0716	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.c,927 :: 		
0x0718	0x070038  	RCALL	MulFP__funpack
;__Lib_MathDouble.c,928 :: 		
0x071A	0x754F84  	IOR.B	W10, W4, [W15]
;__Lib_MathDouble.c,929 :: 		
0x071C	0x060000  	RETURN
;__Lib_MathDouble.c,930 :: 		
MulFP__fPropagateNaN:
;__Lib_MathDouble.c,931 :: 		
0x071E	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.c,932 :: 		
0x0720	0xE15064  	CP	W10, #4
;__Lib_MathDouble.c,933 :: 		
0x0722	0x360005  	BRA LEU	MulFP_return0_2
;__Lib_MathDouble.c,934 :: 		
0x0724	0xE12064  	CP	W4, #4
;__Lib_MathDouble.c,935 :: 		
0x0726	0x360002  	BRA LEU	MulFP_return8_2
;__Lib_MathDouble.c,936 :: 		
0x0728	0xA36809  	BTST.Z	W9, #6
;__Lib_MathDouble.c,937 :: 		
0x072A	0x3A0001  	BRA NZ	MulFP_return0_2
;__Lib_MathDouble.c,938 :: 		
MulFP_return8_2:
;__Lib_MathDouble.c,939 :: 		
0x072C	0xBE8008  	MOV.D	W8, W0
;__Lib_MathDouble.c,940 :: 		
MulFP_return0_2:
;__Lib_MathDouble.c,941 :: 		
0x072E	0xA8C002  	BSET	W1, #6
;__Lib_MathDouble.c,942 :: 		
MulFP__fbopExit:
;__Lib_MathDouble.c,943 :: 		
0x0730	0x78064F  	MOV	[--W15], W12
;__Lib_MathDouble.c,944 :: 		
0x0732	0xBE054F  	MOV.D	[--W15], W10
;__Lib_MathDouble.c,945 :: 		
0x0734	0xBE044F  	MOV.D	[--W15], W8
;__Lib_MathDouble.c,946 :: 		
0x0736	0x060000  	RETURN
;__Lib_MathDouble.c,947 :: 		
MulFP__fbopReturnNaN:
;__Lib_MathDouble.c,948 :: 		
0x0738	0x2FFFF0  	MOV	#65535, W0
;__Lib_MathDouble.c,949 :: 		
0x073A	0x27FFF1  	MOV	#32767, W1
;__Lib_MathDouble.c,950 :: 		
0x073C	0x37FFF9  	BRA	MulFP__fbopExit
;__Lib_MathDouble.c,951 :: 		
MulFP__fpack:
;__Lib_MathDouble.c,952 :: 		
0x073E	0x200081  	MOV	#8, W1
;__Lib_MathDouble.c,953 :: 		
0x0740	0x558061  	SUB	W11, #1, W0
;__Lib_MathDouble.c,954 :: 		
0x0742	0x3D000B  	BRA GE	MulFP_notsubnormal
;__Lib_MathDouble.c,955 :: 		
0x0744	0x20000B  	MOV	#0, W11
;__Lib_MathDouble.c,956 :: 		
0x0746	0x2FFE61  	MOV	#65510, W1
;__Lib_MathDouble.c,957 :: 		
0x0748	0xE10001  	CP	W0, W1
;__Lib_MathDouble.c,958 :: 		
0x074A	0x34001D  	BRA LE	MulFP_zerosig
;__Lib_MathDouble.c,959 :: 		
MulFP_subnormal1:
;__Lib_MathDouble.c,960 :: 		
0x074C	0x718182  	IOR	W3, W2, W3
;__Lib_MathDouble.c,961 :: 		
0x074E	0x640161  	AND	W8, #1, W2
;__Lib_MathDouble.c,962 :: 		
0x0750	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,963 :: 		
0x0752	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,964 :: 		
0x0754	0xE80000  	INC	W0, W0
;__Lib_MathDouble.c,965 :: 		
0x0756	0x3AFFFA  	BRA NZ	MulFP_subnormal1
;__Lib_MathDouble.c,966 :: 		
0x0758	0x200071  	MOV	#7, W1
;__Lib_MathDouble.c,967 :: 		
MulFP_notsubnormal:
;__Lib_MathDouble.c,968 :: 		
0x075A	0x640061  	AND	W8, #1, W0
;__Lib_MathDouble.c,969 :: 		
0x075C	0x700003  	IOR	W0, W3, W0
;__Lib_MathDouble.c,970 :: 		
0x075E	0x600002  	AND	W0, W2, W0
;__Lib_MathDouble.c,971 :: 		
0x0760	0x320009  	BRA Z	MulFP_packupandgo
;__Lib_MathDouble.c,972 :: 		
0x0762	0x440461  	ADD	W8, #1, W8
;__Lib_MathDouble.c,973 :: 		
0x0764	0x4C84E0  	ADDC	W9, #0, W9
;__Lib_MathDouble.c,974 :: 		
0x0766	0xA58809  	BTST.Z	W9, W1
;__Lib_MathDouble.c,975 :: 		
0x0768	0x320005  	BRA Z	MulFP_packupandgo
;__Lib_MathDouble.c,976 :: 		
0x076A	0xE8058B  	INC	W11, W11
;__Lib_MathDouble.c,977 :: 		
0x076C	0xE10868  	CP	W1, #8
;__Lib_MathDouble.c,978 :: 		
0x076E	0x3A0002  	BRA NZ	MulFP_packupandgo
;__Lib_MathDouble.c,979 :: 		
0x0770	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,980 :: 		
0x0772	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,981 :: 		
MulFP_packupandgo:
;__Lib_MathDouble.c,982 :: 		
0x0774	0x200FF2  	MOV	#255, W2
;__Lib_MathDouble.c,983 :: 		
0x0776	0xE15802  	CP	W11, W2
;__Lib_MathDouble.c,984 :: 		
0x0778	0x3D0005  	BRA GE	MulFP_overflow
;__Lib_MathDouble.c,985 :: 		
0x077A	0xDD5DC7  	SL	W11, #7, W11
;__Lib_MathDouble.c,986 :: 		
0x077C	0xB207F9  	AND	#127, W9
;__Lib_MathDouble.c,987 :: 		
0x077E	0x758089  	IOR	W11, W9, W1
;__Lib_MathDouble.c,988 :: 		
0x0780	0x880008  	MOV	W8, W0
;__Lib_MathDouble.c,989 :: 		
0x0782	0x060000  	RETURN
;__Lib_MathDouble.c,990 :: 		
MulFP_overflow:
;__Lib_MathDouble.c,991 :: 		
0x0784	0x27F80B  	MOV	#32640, W11
;__Lib_MathDouble.c,992 :: 		
MulFP_zerosig:
;__Lib_MathDouble.c,993 :: 		
0x0786	0x88001B  	MOV	W11, W1
;__Lib_MathDouble.c,994 :: 		
0x0788	0x050000  	RETLW	#0, W0
;__Lib_MathDouble.c,995 :: 		
MulFP__funpack:
;__Lib_MathDouble.c,996 :: 		
0x078A	0xDE0AC7  	LSR	W1, #7, W5
;__Lib_MathDouble.c,997 :: 		
0x078C	0xB207F1  	AND	#127, W1
;__Lib_MathDouble.c,998 :: 		
0x078E	0xB20FF5  	AND	#255, W5
;__Lib_MathDouble.c,999 :: 		
0x0790	0x320008  	BRA Z	MulFP_zeroorsub
;__Lib_MathDouble.c,1000 :: 		
0x0792	0x42CFE1  	ADD.B	W5, #1, [W15]
;__Lib_MathDouble.c,1001 :: 		
0x0794	0x320002  	BRA Z	MulFP_nanorinf
;__Lib_MathDouble.c,1002 :: 		
MulFP_finitereturn:
;__Lib_MathDouble.c,1003 :: 		
0x0796	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.c,1004 :: 		
0x0798	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.c,1005 :: 		
MulFP_nanorinf:
;__Lib_MathDouble.c,1006 :: 		
0x079A	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.c,1007 :: 		
0x079C	0x320001  	BRA Z	MulFP_infinite
;__Lib_MathDouble.c,1008 :: 		
0x079E	0x050804  	RETLW	#128, W4
;__Lib_MathDouble.c,1009 :: 		
MulFP_infinite:
;__Lib_MathDouble.c,1010 :: 		
0x07A0	0x050044  	RETLW	#4, W4
;__Lib_MathDouble.c,1011 :: 		
MulFP_zeroorsub:
;__Lib_MathDouble.c,1012 :: 		
0x07A2	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.c,1013 :: 		
0x07A4	0x3A0002  	BRA NZ	MulFP_subnormal2
;__Lib_MathDouble.c,1014 :: 		
0x07A6	0x050014  	RETLW	#1, W4
;__Lib_MathDouble.c,1015 :: 		
MulFP_normalize:
;__Lib_MathDouble.c,1016 :: 		
0x07A8	0xE90285  	DEC	W5, W5
;__Lib_MathDouble.c,1017 :: 		
MulFP_subnormal2:
;__Lib_MathDouble.c,1018 :: 		
0x07AA	0x400000  	ADD	W0, W0, W0
;__Lib_MathDouble.c,1019 :: 		
0x07AC	0x48C081  	ADDC.B	W1, W1, W1
;__Lib_MathDouble.c,1020 :: 		
0x07AE	0x3BFFFC  	BRA NN	MulFP_normalize
;__Lib_MathDouble.c,1021 :: 		
0x07B0	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.c,1022 :: 		
0x07B2	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.c,1025 :: 		
the_end__Mul_FP:
;__Lib_MathDouble.c,1028 :: 		
L_end__Mul_FP:
0x07B4	0xFA8000  	ULNK
0x07B6	0x060000  	RETURN
; end of __Mul_FP
__Div_FP:
0x055E	0xFA0000  	LNK	#0
;__Lib_MathDouble.c,1050 :: 		
;__Lib_MathDouble.c,1052 :: 		
0x0560	0x070002  	RCALL	DivFP___divsf3
;__Lib_MathDouble.c,1053 :: 		
0x0562	0x000000040690  	GOTO	the_end__Div_FP
;__Lib_MathDouble.c,1056 :: 		
DivFP___divsf3:
;__Lib_MathDouble.c,1057 :: 		
0x0566	0xBE9F88  	MOV.D	W8, [W15++]
;__Lib_MathDouble.c,1058 :: 		
0x0568	0xBE9F8A  	MOV.D	W10, [W15++]
;__Lib_MathDouble.c,1059 :: 		
0x056A	0x781F8C  	MOV	W12, [W15++]
;__Lib_MathDouble.c,1060 :: 		
0x056C	0x07003E  	RCALL	DivFP__funpack2
;__Lib_MathDouble.c,1061 :: 		
0x056E	0x330045  	BRA N	DivFP__fPropagateNaN
;__Lib_MathDouble.c,1062 :: 		
0x0570	0x6C8603  	XOR	W9, W3, W12
;__Lib_MathDouble.c,1063 :: 		
0x0572	0xE15064  	CP	W10, #4
;__Lib_MathDouble.c,1064 :: 		
0x0574	0x32002E  	BRA Z	DivFP_aisinfinite
;__Lib_MathDouble.c,1065 :: 		
0x0576	0xE12064  	CP	W4, #4
;__Lib_MathDouble.c,1066 :: 		
0x0578	0x320033  	BRA Z	DivFP_returnZero
;__Lib_MathDouble.c,1067 :: 		
0x057A	0xE15061  	CP	W10, #1
;__Lib_MathDouble.c,1068 :: 		
0x057C	0x32002F  	BRA Z	DivFP_aiszero
;__Lib_MathDouble.c,1069 :: 		
0x057E	0xE12061  	CP	W4, #1
;__Lib_MathDouble.c,1070 :: 		
0x0580	0x320031  	BRA Z	DivFP_returnInf
;__Lib_MathDouble.c,1071 :: 		
DivFP_finitenonzero:
;__Lib_MathDouble.c,1072 :: 		
0x0582	0x558585  	SUB	W11, W5, W11
;__Lib_MathDouble.c,1073 :: 		
0x0584	0xB007EB  	ADD	#126, W11
;__Lib_MathDouble.c,1074 :: 		
0x0586	0x200009  	MOV	#0, W9
;__Lib_MathDouble.c,1075 :: 		
0x0588	0x200408  	MOV	#64, W8
;__Lib_MathDouble.c,1076 :: 		
0x058A	0x370005  	BRA	DivFP_diventry
;__Lib_MathDouble.c,1077 :: 		
DivFP_divnext:
;__Lib_MathDouble.c,1078 :: 		
0x058C	0x440408  	ADD	W8, W8, W8
;__Lib_MathDouble.c,1079 :: 		
0x058E	0x4C8489  	ADDC	W9, W9, W9
;__Lib_MathDouble.c,1080 :: 		
0x0590	0x31000A  	BRA C	DivFP_divdone
;__Lib_MathDouble.c,1081 :: 		
DivFP_divloop:
;__Lib_MathDouble.c,1082 :: 		
0x0592	0x430306  	ADD	W6, W6, W6
;__Lib_MathDouble.c,1083 :: 		
0x0594	0x4B8387  	ADDC	W7, W7, W7
;__Lib_MathDouble.c,1084 :: 		
DivFP_diventry:
;__Lib_MathDouble.c,1085 :: 		
0x0596	0x530100  	SUB	W6, W0, W2
;__Lib_MathDouble.c,1086 :: 		
0x0598	0x5B8181  	SUBB	W7, W1, W3
;__Lib_MathDouble.c,1087 :: 		
0x059A	0x33FFF8  	BRA N	DivFP_divnext
;__Lib_MathDouble.c,1088 :: 		
0x059C	0xBE8302  	MOV.D	W2, W6
;__Lib_MathDouble.c,1089 :: 		
0x059E	0xA80010  	BSET	W8, #0
;__Lib_MathDouble.c,1090 :: 		
0x05A0	0x440408  	ADD	W8, W8, W8
;__Lib_MathDouble.c,1091 :: 		
0x05A2	0x4C8489  	ADDC	W9, W9, W9
;__Lib_MathDouble.c,1092 :: 		
0x05A4	0x39FFF6  	BRA NC	DivFP_divloop
;__Lib_MathDouble.c,1093 :: 		
DivFP_divdone:
;__Lib_MathDouble.c,1094 :: 		
0x05A6	0xDD39C6  	SL	W7, #6, W3
;__Lib_MathDouble.c,1095 :: 		
0x05A8	0x730183  	IOR	W6, W3, W3
;__Lib_MathDouble.c,1096 :: 		
0x05AA	0x320001  	BRA Z	DivFP_stickyok
;__Lib_MathDouble.c,1097 :: 		
0x05AC	0x200013  	MOV	#1, W3
;__Lib_MathDouble.c,1098 :: 		
DivFP_stickyok:
;__Lib_MathDouble.c,1099 :: 		
0x05AE	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,1100 :: 		
0x05B0	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,1101 :: 		
0x05B2	0xA39809  	BTST.Z	W9, #9
;__Lib_MathDouble.c,1102 :: 		
0x05B4	0x320005  	BRA Z	DivFP_guardused
;__Lib_MathDouble.c,1103 :: 		
0x05B6	0xA70008  	BTSC	W8, #0
;__Lib_MathDouble.c,1104 :: 		
0x05B8	0xA80006  	BSET	W3, #0
;__Lib_MathDouble.c,1105 :: 		
0x05BA	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,1106 :: 		
0x05BC	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,1107 :: 		
0x05BE	0xE8058B  	INC	W11, W11
;__Lib_MathDouble.c,1108 :: 		
DivFP_guardused:
;__Lib_MathDouble.c,1109 :: 		
0x05C0	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,1110 :: 		
0x05C2	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,1111 :: 		
0x05C4	0xEB0100  	CLR	W2
;__Lib_MathDouble.c,1112 :: 		
0x05C6	0xD28102  	RLC	W2, W2
;__Lib_MathDouble.c,1113 :: 		
0x05C8	0x070028  	RCALL	DivFP__fpack
;__Lib_MathDouble.c,1114 :: 		
DivFP_return0_1:
;__Lib_MathDouble.c,1115 :: 		
0x05CA	0xA1F001  	BCLR	W1, #15
;__Lib_MathDouble.c,1116 :: 		
0x05CC	0xA7F00C  	BTSC	W12, #15
;__Lib_MathDouble.c,1117 :: 		
0x05CE	0xA8E003  	BSET	W1, #15
;__Lib_MathDouble.c,1118 :: 		
0x05D0	0x37001D  	BRA	DivFP__fbopExit
;__Lib_MathDouble.c,1119 :: 		
DivFP_aisinfinite:
;__Lib_MathDouble.c,1120 :: 		
0x05D2	0xE12064  	CP	W4, #4
;__Lib_MathDouble.c,1121 :: 		
0x05D4	0x32001F  	BRA Z	DivFP__fbopReturnNaN
;__Lib_MathDouble.c,1122 :: 		
DivFP_return8_1:
;__Lib_MathDouble.c,1123 :: 		
0x05D6	0xBE8108  	MOV.D	W8, W2
;__Lib_MathDouble.c,1124 :: 		
DivFP_return2_1:
;__Lib_MathDouble.c,1125 :: 		
0x05D8	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.c,1126 :: 		
0x05DA	0x37FFF7  	BRA	DivFP_return0_1
;__Lib_MathDouble.c,1127 :: 		
DivFP_aiszero:
;__Lib_MathDouble.c,1128 :: 		
0x05DC	0xE12061  	CP	W4, #1
;__Lib_MathDouble.c,1129 :: 		
0x05DE	0x32001A  	BRA Z	DivFP__fbopReturnNaN
;__Lib_MathDouble.c,1130 :: 		
DivFP_returnZero:
;__Lib_MathDouble.c,1131 :: 		
0x05E0	0xB80060  	MUL.UU	W0, #0, W0
;__Lib_MathDouble.c,1132 :: 		
0x05E2	0x37FFF3  	BRA	DivFP_return0_1
;__Lib_MathDouble.c,1133 :: 		
DivFP_returnInf:
;__Lib_MathDouble.c,1134 :: 		
0x05E4	0x200000  	MOV	#0, W0
;__Lib_MathDouble.c,1135 :: 		
0x05E6	0x27F801  	MOV	#32640, W1
;__Lib_MathDouble.c,1136 :: 		
0x05E8	0x37FFF0  	BRA	DivFP_return0_1
;__Lib_MathDouble.c,1137 :: 		
DivFP__funpack2:
;__Lib_MathDouble.c,1138 :: 		
0x05EA	0xBE8400  	MOV.D	W0, W8
;__Lib_MathDouble.c,1139 :: 		
0x05EC	0x07003C  	RCALL	DivFP__funpack
;__Lib_MathDouble.c,1140 :: 		
0x05EE	0xBE8300  	MOV.D	W0, W6
;__Lib_MathDouble.c,1141 :: 		
0x05F0	0xBE8504  	MOV.D	W4, W10
;__Lib_MathDouble.c,1142 :: 		
0x05F2	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.c,1143 :: 		
0x05F4	0x070038  	RCALL	DivFP__funpack
;__Lib_MathDouble.c,1144 :: 		
0x05F6	0x754F84  	IOR.B	W10, W4, [W15]
;__Lib_MathDouble.c,1145 :: 		
0x05F8	0x060000  	RETURN
;__Lib_MathDouble.c,1146 :: 		
DivFP__fPropagateNaN:
;__Lib_MathDouble.c,1147 :: 		
0x05FA	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.c,1148 :: 		
0x05FC	0xE15064  	CP	W10, #4
;__Lib_MathDouble.c,1149 :: 		
0x05FE	0x360005  	BRA LEU	DivFP_return0
;__Lib_MathDouble.c,1150 :: 		
0x0600	0xE12064  	CP	W4, #4
;__Lib_MathDouble.c,1151 :: 		
0x0602	0x360002  	BRA LEU	DivFP_return8
;__Lib_MathDouble.c,1152 :: 		
0x0604	0xA36809  	BTST.Z	W9, #6
;__Lib_MathDouble.c,1153 :: 		
0x0606	0x3A0001  	BRA NZ	DivFP_return0
;__Lib_MathDouble.c,1154 :: 		
DivFP_return8:
;__Lib_MathDouble.c,1155 :: 		
0x0608	0xBE8008  	MOV.D	W8, W0
;__Lib_MathDouble.c,1156 :: 		
DivFP_return0:
;__Lib_MathDouble.c,1157 :: 		
0x060A	0xA8C002  	BSET	W1, #6
;__Lib_MathDouble.c,1158 :: 		
DivFP__fbopExit:
;__Lib_MathDouble.c,1159 :: 		
0x060C	0x78064F  	MOV	[--W15], W12
;__Lib_MathDouble.c,1160 :: 		
0x060E	0xBE054F  	MOV.D	[--W15], W10
;__Lib_MathDouble.c,1161 :: 		
0x0610	0xBE044F  	MOV.D	[--W15], W8
;__Lib_MathDouble.c,1162 :: 		
0x0612	0x060000  	RETURN
;__Lib_MathDouble.c,1163 :: 		
DivFP__fbopReturnNaN:
;__Lib_MathDouble.c,1164 :: 		
0x0614	0x2FFFF0  	MOV	#65535, W0
;__Lib_MathDouble.c,1165 :: 		
0x0616	0x27FFF1  	MOV	#32767, W1
;__Lib_MathDouble.c,1166 :: 		
0x0618	0x37FFF9  	BRA	DivFP__fbopExit
;__Lib_MathDouble.c,1167 :: 		
DivFP__fpack:
;__Lib_MathDouble.c,1168 :: 		
0x061A	0x200081  	MOV	#8, W1
;__Lib_MathDouble.c,1169 :: 		
0x061C	0x558061  	SUB	W11, #1, W0
;__Lib_MathDouble.c,1170 :: 		
0x061E	0x3D000B  	BRA GE	DivFP_notsubnormal
;__Lib_MathDouble.c,1171 :: 		
0x0620	0x20000B  	MOV	#0, W11
;__Lib_MathDouble.c,1172 :: 		
0x0622	0x2FFE61  	MOV	#65510, W1
;__Lib_MathDouble.c,1173 :: 		
0x0624	0xE10001  	CP	W0, W1
;__Lib_MathDouble.c,1174 :: 		
0x0626	0x34001D  	BRA LE	DivFP_zerosig
;__Lib_MathDouble.c,1175 :: 		
DivFP_subnormal:
;__Lib_MathDouble.c,1176 :: 		
0x0628	0x718182  	IOR	W3, W2, W3
;__Lib_MathDouble.c,1177 :: 		
0x062A	0x640161  	AND	W8, #1, W2
;__Lib_MathDouble.c,1178 :: 		
0x062C	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,1179 :: 		
0x062E	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,1180 :: 		
0x0630	0xE80000  	INC	W0, W0
;__Lib_MathDouble.c,1181 :: 		
0x0632	0x3AFFFA  	BRA NZ	DivFP_subnormal
;__Lib_MathDouble.c,1182 :: 		
0x0634	0x200071  	MOV	#7, W1
;__Lib_MathDouble.c,1183 :: 		
DivFP_notsubnormal:
;__Lib_MathDouble.c,1184 :: 		
0x0636	0x640061  	AND	W8, #1, W0
;__Lib_MathDouble.c,1185 :: 		
0x0638	0x700003  	IOR	W0, W3, W0
;__Lib_MathDouble.c,1186 :: 		
0x063A	0x600002  	AND	W0, W2, W0
;__Lib_MathDouble.c,1187 :: 		
0x063C	0x320009  	BRA Z	DivFP_packupandgo
;__Lib_MathDouble.c,1188 :: 		
0x063E	0x440461  	ADD	W8, #1, W8
;__Lib_MathDouble.c,1189 :: 		
0x0640	0x4C84E0  	ADDC	W9, #0, W9
;__Lib_MathDouble.c,1190 :: 		
0x0642	0xA58809  	BTST.Z	W9, W1
;__Lib_MathDouble.c,1191 :: 		
0x0644	0x320005  	BRA Z	DivFP_packupandgo
;__Lib_MathDouble.c,1192 :: 		
0x0646	0xE8058B  	INC	W11, W11
;__Lib_MathDouble.c,1193 :: 		
0x0648	0xE10868  	CP	W1, #8
;__Lib_MathDouble.c,1194 :: 		
0x064A	0x3A0002  	BRA NZ	DivFP_packupandgo
;__Lib_MathDouble.c,1195 :: 		
0x064C	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,1196 :: 		
0x064E	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,1197 :: 		
DivFP_packupandgo:
;__Lib_MathDouble.c,1198 :: 		
0x0650	0x200FF2  	MOV	#255, W2
;__Lib_MathDouble.c,1199 :: 		
0x0652	0xE15802  	CP	W11, W2
;__Lib_MathDouble.c,1200 :: 		
0x0654	0x3D0005  	BRA GE	DivFP_overfloW
;__Lib_MathDouble.c,1201 :: 		
0x0656	0xDD5DC7  	SL	W11, #7, W11
;__Lib_MathDouble.c,1202 :: 		
0x0658	0xB207F9  	AND	#127, W9
;__Lib_MathDouble.c,1203 :: 		
0x065A	0x758089  	IOR	W11, W9, W1
;__Lib_MathDouble.c,1204 :: 		
0x065C	0x880008  	MOV	W8, W0
;__Lib_MathDouble.c,1205 :: 		
0x065E	0x060000  	RETURN
;__Lib_MathDouble.c,1206 :: 		
DivFP_overfloW:
;__Lib_MathDouble.c,1207 :: 		
0x0660	0x27F80B  	MOV	#32640, W11
;__Lib_MathDouble.c,1208 :: 		
DivFP_zerosig:
;__Lib_MathDouble.c,1209 :: 		
0x0662	0x88001B  	MOV	W11, W1
;__Lib_MathDouble.c,1210 :: 		
0x0664	0x050000  	RETLW	#0, W0
;__Lib_MathDouble.c,1211 :: 		
DivFP__funpack:
;__Lib_MathDouble.c,1212 :: 		
0x0666	0xDE0AC7  	LSR	W1, #7, W5
;__Lib_MathDouble.c,1213 :: 		
0x0668	0xB207F1  	AND	#127, W1
;__Lib_MathDouble.c,1214 :: 		
0x066A	0xB20FF5  	AND	#255, W5
;__Lib_MathDouble.c,1215 :: 		
0x066C	0x320008  	BRA Z	DivFP_zeroorsub
;__Lib_MathDouble.c,1216 :: 		
0x066E	0x42CFE1  	ADD.B	W5, #1, [W15]
;__Lib_MathDouble.c,1217 :: 		
0x0670	0x320002  	BRA Z	DivFP_nanorinf
;__Lib_MathDouble.c,1218 :: 		
DivFP_finitereturn:
;__Lib_MathDouble.c,1219 :: 		
0x0672	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.c,1220 :: 		
0x0674	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.c,1221 :: 		
DivFP_nanorinf:
;__Lib_MathDouble.c,1222 :: 		
0x0676	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.c,1223 :: 		
0x0678	0x320001  	BRA Z	DivFP_infinite
;__Lib_MathDouble.c,1224 :: 		
0x067A	0x050804  	RETLW	#128, W4
;__Lib_MathDouble.c,1225 :: 		
DivFP_infinite:
;__Lib_MathDouble.c,1226 :: 		
0x067C	0x050044  	RETLW	#4, W4
;__Lib_MathDouble.c,1227 :: 		
DivFP_zeroorsub:
;__Lib_MathDouble.c,1228 :: 		
0x067E	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.c,1229 :: 		
0x0680	0x3A0002  	BRA NZ	DivFP_subnormal2
;__Lib_MathDouble.c,1230 :: 		
0x0682	0x050014  	RETLW	#1, W4
;__Lib_MathDouble.c,1231 :: 		
DivFP_normalize:
;__Lib_MathDouble.c,1232 :: 		
0x0684	0xE90285  	DEC	W5, W5
;__Lib_MathDouble.c,1233 :: 		
DivFP_subnormal2:
;__Lib_MathDouble.c,1234 :: 		
0x0686	0x400000  	ADD	W0, W0, W0
;__Lib_MathDouble.c,1235 :: 		
0x0688	0x48C081  	ADDC.B	W1, W1, W1
;__Lib_MathDouble.c,1236 :: 		
0x068A	0x3BFFFC  	BRA NN	DivFP_normalize
;__Lib_MathDouble.c,1237 :: 		
0x068C	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.c,1238 :: 		
0x068E	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.c,1241 :: 		
the_end__Div_FP:
;__Lib_MathDouble.c,1243 :: 		
L_end__Div_FP:
0x0690	0xFA8000  	ULNK
0x0692	0x060000  	RETURN
; end of __Div_FP
__Float2Longint:
0x0474	0xFA0000  	LNK	#0
;__Lib_MathDouble.c,479 :: 		
;__Lib_MathDouble.c,481 :: 		
0x0476	0x070002  	RCALL	Float2Longint__fixsfsi
;__Lib_MathDouble.c,482 :: 		
0x0478	0x0000000404E8  	GOTO	the_end__Float2Longint
;__Lib_MathDouble.c,486 :: 		
Float2Longint__fixsfsi:
;__Lib_MathDouble.c,487 :: 		
0x047C	0xBE8100  	MOV.D	W0, W2
;__Lib_MathDouble.c,488 :: 		
0x047E	0x07001F  	RCALL	Float2Longint__funpack
;__Lib_MathDouble.c,489 :: 		
0x0480	0xA77004  	BTSC	W4, #7
;__Lib_MathDouble.c,490 :: 		
0x0482	0xA1F003  	BCLR	W3, #15
;__Lib_MathDouble.c,491 :: 		
0x0484	0xB10965  	SUB	#150, W5
;__Lib_MathDouble.c,492 :: 		
0x0486	0x320016  	BRA Z	Float2Longint_setsign
;__Lib_MathDouble.c,493 :: 		
0x0488	0x35000D  	BRA LT	Float2Longint_shiftright
;__Lib_MathDouble.c,494 :: 		
0x048A	0xE12868  	CP	W5, #8
;__Lib_MathDouble.c,495 :: 		
0x048C	0x350006  	BRA LT	Float2Longint_shiftleft
;__Lib_MathDouble.c,496 :: 		
0x048E	0x2FFFF0  	MOV	#65535, W0
;__Lib_MathDouble.c,497 :: 		
0x0490	0x27FFF1  	MOV	#32767, W1
;__Lib_MathDouble.c,498 :: 		
0x0492	0xE20006  	CP0	W3
;__Lib_MathDouble.c,499 :: 		
0x0494	0x3B0013  	BRA NN	Float2Longint_exit
;__Lib_MathDouble.c,500 :: 		
0x0496	0x280001  	MOV	#32768, W1
;__Lib_MathDouble.c,501 :: 		
0x0498	0x050000  	RETLW	#0, W0
;__Lib_MathDouble.c,502 :: 		
Float2Longint_shiftleft:
;__Lib_MathDouble.c,503 :: 		
0x049A	0x400000  	ADD	W0, W0, W0
;__Lib_MathDouble.c,504 :: 		
0x049C	0x488081  	ADDC	W1, W1, W1
;__Lib_MathDouble.c,505 :: 		
0x049E	0xE90285  	DEC	W5, W5
;__Lib_MathDouble.c,506 :: 		
0x04A0	0x3AFFFC  	BRA NZ	Float2Longint_shiftleft
;__Lib_MathDouble.c,507 :: 		
0x04A2	0x370008  	BRA	Float2Longint_setsign
;__Lib_MathDouble.c,508 :: 		
Float2Longint_shiftright:
;__Lib_MathDouble.c,509 :: 		
0x04A4	0x428FF8  	ADD	W5, #24, [W15]
;__Lib_MathDouble.c,510 :: 		
0x04A6	0x3C0002  	BRA GT	Float2Longint_shiftrightloop
;__Lib_MathDouble.c,511 :: 		
0x04A8	0xEB0080  	CLR	W1
;__Lib_MathDouble.c,512 :: 		
0x04AA	0x050000  	RETLW	#0, W0
;__Lib_MathDouble.c,513 :: 		
Float2Longint_shiftrightloop:
;__Lib_MathDouble.c,514 :: 		
0x04AC	0xD10081  	LSR	W1, W1
;__Lib_MathDouble.c,515 :: 		
0x04AE	0xD38000  	RRC	W0, W0
;__Lib_MathDouble.c,516 :: 		
0x04B0	0xE80285  	INC	W5, W5
;__Lib_MathDouble.c,517 :: 		
0x04B2	0x3AFFFC  	BRA NZ	Float2Longint_shiftrightloop
;__Lib_MathDouble.c,518 :: 		
Float2Longint_setsign:
;__Lib_MathDouble.c,519 :: 		
0x04B4	0xE20006  	CP0	W3
;__Lib_MathDouble.c,520 :: 		
0x04B6	0x3B0002  	BRA NN	Float2Longint_exit
;__Lib_MathDouble.c,521 :: 		
0x04B8	0x100060  	SUBR	W0, #0, W0
;__Lib_MathDouble.c,522 :: 		
0x04BA	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_MathDouble.c,523 :: 		
Float2Longint_exit:
;__Lib_MathDouble.c,524 :: 		
0x04BC	0x060000  	RETURN
;__Lib_MathDouble.c,525 :: 		
Float2Longint__funpack:
;__Lib_MathDouble.c,526 :: 		
0x04BE	0xDE0AC7  	LSR	W1, #7, W5
;__Lib_MathDouble.c,527 :: 		
0x04C0	0xB207F1  	AND	#127, W1
;__Lib_MathDouble.c,528 :: 		
0x04C2	0xB20FF5  	AND	#255, W5
;__Lib_MathDouble.c,529 :: 		
0x04C4	0x320008  	BRA Z	Float2Longint_zeroorsub
;__Lib_MathDouble.c,530 :: 		
0x04C6	0x42CFE1  	ADD.B	W5, #1, [W15]
;__Lib_MathDouble.c,531 :: 		
0x04C8	0x320002  	BRA Z	Float2Longint_nanorinf
;__Lib_MathDouble.c,532 :: 		
Float2Longint_finitereturn:
;__Lib_MathDouble.c,533 :: 		
0x04CA	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.c,534 :: 		
0x04CC	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.c,535 :: 		
Float2Longint_nanorinf:
;__Lib_MathDouble.c,536 :: 		
0x04CE	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.c,537 :: 		
0x04D0	0x320001  	BRA Z	Float2Longint_infinite
;__Lib_MathDouble.c,538 :: 		
0x04D2	0x050804  	RETLW	#128, W4
;__Lib_MathDouble.c,539 :: 		
Float2Longint_infinite:
;__Lib_MathDouble.c,540 :: 		
0x04D4	0x050044  	RETLW	#4, W4
;__Lib_MathDouble.c,541 :: 		
Float2Longint_zeroorsub:
;__Lib_MathDouble.c,542 :: 		
0x04D6	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.c,543 :: 		
0x04D8	0x3A0002  	BRA NZ	Float2Longint_subnormal
;__Lib_MathDouble.c,544 :: 		
0x04DA	0x050014  	RETLW	#1, W4
;__Lib_MathDouble.c,545 :: 		
Float2Longint_normalize:
;__Lib_MathDouble.c,546 :: 		
0x04DC	0xE90285  	DEC	W5, W5
;__Lib_MathDouble.c,547 :: 		
Float2Longint_subnormal:
;__Lib_MathDouble.c,548 :: 		
0x04DE	0x400000  	ADD	W0, W0, W0
;__Lib_MathDouble.c,549 :: 		
0x04E0	0x48C081  	ADDC.B	W1, W1, W1
;__Lib_MathDouble.c,550 :: 		
0x04E2	0x3BFFFC  	BRA NN	Float2Longint_normalize
;__Lib_MathDouble.c,551 :: 		
0x04E4	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.c,552 :: 		
0x04E6	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.c,555 :: 		
the_end__Float2Longint:
;__Lib_MathDouble.c,557 :: 		
L_end__Float2Longint:
0x04E8	0xFA8000  	ULNK
0x04EA	0x060000  	RETURN
; end of __Float2Longint
__Compare_Le_Fp:
0x0854	0xFA0000  	LNK	#0
;__Lib_MathDouble.c,1348 :: 		
;__Lib_MathDouble.c,1349 :: 		
0x0856	0x200014  	MOV	#1, W4
;__Lib_MathDouble.c,1350 :: 		
0x0858	0x07FE49  	RCALL	__Compare_Fp
;__Lib_MathDouble.c,1351 :: 		
L_end__Compare_Le_Fp:
0x085A	0xFA8000  	ULNK
0x085C	0x060000  	RETURN
; end of __Compare_Le_Fp
__Compare_Fp:
0x04EC	0xFA0000  	LNK	#0
;__Lib_MathDouble.c,1272 :: 		
;__Lib_MathDouble.c,1274 :: 		
0x04EE	0x070002  	RCALL	CompareFp__fcompare
;__Lib_MathDouble.c,1275 :: 		
0x04F0	0x00000004055A  	GOTO	the_end__Compare_Fp
;__Lib_MathDouble.c,1277 :: 		
CompareFp__fcompare:
;__Lib_MathDouble.c,1278 :: 		
0x04F4	0x781F84  	MOV	W4, [W15++]
;__Lib_MathDouble.c,1279 :: 		
0x04F6	0x070014  	RCALL	CompareFp__funpack2
;__Lib_MathDouble.c,1280 :: 		
0x04F8	0x78004F  	MOV	[--W15], W0
;__Lib_MathDouble.c,1281 :: 		
0x04FA	0x330011  	BRA N	CompareFp_exit
;__Lib_MathDouble.c,1282 :: 		
0x04FC	0x2FFFF0  	MOV	#65535, W0
;__Lib_MathDouble.c,1283 :: 		
0x04FE	0x6C8F83  	XOR	W9, W3, [W15]
;__Lib_MathDouble.c,1284 :: 		
0x0500	0x3B0006  	BRA NN	CompareFp_comparemag
;__Lib_MathDouble.c,1285 :: 		
0x0502	0x650504  	AND	W10, W4, W10
;__Lib_MathDouble.c,1286 :: 		
0x0504	0xA7000A  	BTSC	W10, #0
;__Lib_MathDouble.c,1287 :: 		
0x0506	0x370008  	BRA	CompareFp_returnEqual
;__Lib_MathDouble.c,1288 :: 		
0x0508	0xA6F009  	BTSS	W9, #15
;__Lib_MathDouble.c,1289 :: 		
0x050A	0x200010  	MOV	#1, W0
;__Lib_MathDouble.c,1290 :: 		
0x050C	0x370008  	BRA	CompareFp_exit
;__Lib_MathDouble.c,1291 :: 		
CompareFp_comparemag:
;__Lib_MathDouble.c,1292 :: 		
0x050E	0x540F82  	SUB	W8, W2, [W15]
;__Lib_MathDouble.c,1293 :: 		
0x0510	0x5C8F83  	SUBB	W9, W3, [W15]
;__Lib_MathDouble.c,1294 :: 		
0x0512	0x390003  	BRA LTU	CompareFp_adjust
;__Lib_MathDouble.c,1295 :: 		
0x0514	0x200010  	MOV	#1, W0
;__Lib_MathDouble.c,1296 :: 		
0x0516	0x3E0001  	BRA GTU	CompareFp_adjust
;__Lib_MathDouble.c,1297 :: 		
CompareFp_returnEqual:
;__Lib_MathDouble.c,1298 :: 		
0x0518	0x200000  	MOV	#0, W0
;__Lib_MathDouble.c,1299 :: 		
CompareFp_adjust:
;__Lib_MathDouble.c,1300 :: 		
0x051A	0xA7F009  	BTSC	W9, #15
;__Lib_MathDouble.c,1301 :: 		
0x051C	0xEA0000  	NEG	W0, W0
;__Lib_MathDouble.c,1302 :: 		
CompareFp_exit:
;__Lib_MathDouble.c,1303 :: 		
0x051E	0x060000  	RETURN
;__Lib_MathDouble.c,1304 :: 		
CompareFp__funpack2:
;__Lib_MathDouble.c,1305 :: 		
0x0520	0xBE8400  	MOV.D	W0, W8
;__Lib_MathDouble.c,1306 :: 		
0x0522	0x070006  	RCALL	CompareFp__funpack
;__Lib_MathDouble.c,1307 :: 		
0x0524	0xBE8300  	MOV.D	W0, W6
;__Lib_MathDouble.c,1308 :: 		
0x0526	0xBE8504  	MOV.D	W4, W10
;__Lib_MathDouble.c,1309 :: 		
0x0528	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.c,1310 :: 		
0x052A	0x070002  	RCALL	CompareFp__funpack
;__Lib_MathDouble.c,1311 :: 		
0x052C	0x754F84  	IOR.B	W10, W4, [W15]
;__Lib_MathDouble.c,1312 :: 		
0x052E	0x060000  	RETURN
;__Lib_MathDouble.c,1313 :: 		
CompareFp__funpack:
;__Lib_MathDouble.c,1314 :: 		
0x0530	0xDE0AC7  	LSR	W1, #7, W5
;__Lib_MathDouble.c,1315 :: 		
0x0532	0xB207F1  	AND	#127, W1
;__Lib_MathDouble.c,1316 :: 		
0x0534	0xB20FF5  	AND	#255, W5
;__Lib_MathDouble.c,1317 :: 		
0x0536	0x320008  	BRA Z	CompareFp_zeroorsub
;__Lib_MathDouble.c,1318 :: 		
0x0538	0x42CFE1  	ADD.B	W5, #1, [W15]
;__Lib_MathDouble.c,1319 :: 		
0x053A	0x320002  	BRA Z	CompareFp_nanorinf
;__Lib_MathDouble.c,1320 :: 		
CompareFp_finitereturn:
;__Lib_MathDouble.c,1321 :: 		
0x053C	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.c,1322 :: 		
0x053E	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.c,1323 :: 		
CompareFp_nanorinf:
;__Lib_MathDouble.c,1324 :: 		
0x0540	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.c,1325 :: 		
0x0542	0x320001  	BRA Z	CompareFp_infinite
;__Lib_MathDouble.c,1326 :: 		
0x0544	0x050804  	RETLW	#128, W4
;__Lib_MathDouble.c,1327 :: 		
CompareFp_infinite:
;__Lib_MathDouble.c,1328 :: 		
0x0546	0x050044  	RETLW	#4, W4
;__Lib_MathDouble.c,1329 :: 		
CompareFp_zeroorsub:
;__Lib_MathDouble.c,1330 :: 		
0x0548	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.c,1331 :: 		
0x054A	0x3A0002  	BRA NZ	CompareFp_subnormal
;__Lib_MathDouble.c,1332 :: 		
0x054C	0x050014  	RETLW	#1, W4
;__Lib_MathDouble.c,1333 :: 		
CompareFp_normalize:
;__Lib_MathDouble.c,1334 :: 		
0x054E	0xE90285  	DEC	W5, W5
;__Lib_MathDouble.c,1335 :: 		
CompareFp_subnormal:
;__Lib_MathDouble.c,1336 :: 		
0x0550	0x400000  	ADD	W0, W0, W0
;__Lib_MathDouble.c,1337 :: 		
0x0552	0x48C081  	ADDC.B	W1, W1, W1
;__Lib_MathDouble.c,1338 :: 		
0x0554	0x3BFFFC  	BRA NN	CompareFp_normalize
;__Lib_MathDouble.c,1339 :: 		
0x0556	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.c,1340 :: 		
0x0558	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.c,1343 :: 		
the_end__Compare_Fp:
;__Lib_MathDouble.c,1345 :: 		
L_end__Compare_Fp:
0x055A	0xFA8000  	ULNK
0x055C	0x060000  	RETURN
; end of __Compare_Fp
_CapturarMuestras:
;SensorNivel.c,504 :: 		void CapturarMuestras(){
;SensorNivel.c,506 :: 		LED1 = 1;
0x0CAC	0xA882C4  	BSET	LATA4_bit, BitPos(LATA4_bit+0)
;SensorNivel.c,509 :: 		bm = 0;
0x0CAE	0x20B641  	MOV	#lo_addr(_bm), W1
0x0CB0	0xEF2000  	CLR	W0
0x0CB2	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,510 :: 		contPulsos = 0;                                                            //Limpia la variable del contador de pulsos
0x0CB4	0xEF2000  	CLR	W0
0x0CB6	0x885B30  	MOV	W0, _contPulsos
;SensorNivel.c,511 :: 		RB2_bit = 0;                                                               //Limpia el pin que produce los pulsos de exitacion del transductor
0x0CB8	0xA942CA  	BCLR	RB2_bit, BitPos(RB2_bit+0)
;SensorNivel.c,512 :: 		T1CON.TON = 0;                                                             //Apaga el TMR1
0x0CBA	0xA9E105  	BCLR	T1CON, #15
;SensorNivel.c,513 :: 		TMR2 = 0;                                                                  //Encera el TMR2
0x0CBC	0xEF2106  	CLR	TMR2
;SensorNivel.c,514 :: 		T2CON.TON = 1;                                                             //Enciende el TMR2
0x0CBE	0xA8E111  	BSET	T2CON, #15
;SensorNivel.c,515 :: 		i = 0;                                                                     //Limpia las variables asociadas al almacenamiento de la senal muestreada
0x0CC0	0xEF2000  	CLR	W0
0x0CC2	0x885B60  	MOV	W0, _i
;SensorNivel.c,516 :: 		while(bm!=1);
L_CapturarMuestras53:
0x0CC4	0x20B640  	MOV	#lo_addr(_bm), W0
0x0CC6	0x784010  	MOV.B	[W0], W0
0x0CC8	0xE10461  	CP.B	W0, #1
0x0CCA	0x320001  	BRA Z	L_CapturarMuestras54
L__CapturarMuestras149:
0x0CCC	0x37FFFB  	BRA	L_CapturarMuestras53
L_CapturarMuestras54:
;SensorNivel.c,518 :: 		LED1 = 0;
0x0CCE	0xA982C4  	BCLR	LATA4_bit, BitPos(LATA4_bit+0)
;SensorNivel.c,520 :: 		}
L_end_CapturarMuestras:
0x0CD0	0x060000  	RETURN
; end of _CapturarMuestras
_ProbarMuestreo:
;SensorNivel.c,487 :: 		void ProbarMuestreo(){
;SensorNivel.c,489 :: 		LED1 = 1;
0x0BB0	0xA882C4  	BSET	LATA4_bit, BitPos(LATA4_bit+0)
;SensorNivel.c,491 :: 		TMR1 = 0;                                                                  //Encera el TMR1
0x0BB2	0xEF2100  	CLR	TMR1
;SensorNivel.c,492 :: 		T1CON.TON = 1;                                                             //Enciende el TMR1
0x0BB4	0xA8E105  	BSET	T1CON, #15
;SensorNivel.c,493 :: 		bm = 0;
0x0BB6	0x20B641  	MOV	#lo_addr(_bm), W1
0x0BB8	0xEF2000  	CLR	W0
0x0BBA	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,494 :: 		i = 0;
0x0BBC	0xEF2000  	CLR	W0
0x0BBE	0x885B60  	MOV	W0, _i
;SensorNivel.c,495 :: 		while(bm!=1);
L_ProbarMuestreo51:
0x0BC0	0x20B640  	MOV	#lo_addr(_bm), W0
0x0BC2	0x784010  	MOV.B	[W0], W0
0x0BC4	0xE10461  	CP.B	W0, #1
0x0BC6	0x320001  	BRA Z	L_ProbarMuestreo52
L__ProbarMuestreo147:
0x0BC8	0x37FFFB  	BRA	L_ProbarMuestreo51
L_ProbarMuestreo52:
;SensorNivel.c,497 :: 		LED1 = 0;
0x0BCA	0xA982C4  	BCLR	LATA4_bit, BitPos(LATA4_bit+0)
;SensorNivel.c,499 :: 		}
L_end_ProbarMuestreo:
0x0BCC	0x060000  	RETURN
; end of _ProbarMuestreo
_ProbarEnvioTrama:
;SensorNivel.c,467 :: 		void ProbarEnvioTrama(){
;SensorNivel.c,469 :: 		LED1 = 1;
0x0B6E	0xA882C4  	BSET	LATA4_bit, BitPos(LATA4_bit+0)
;SensorNivel.c,471 :: 		i = 0;
0x0B70	0xEF2000  	CLR	W0
0x0B72	0x885B60  	MOV	W0, _i
;SensorNivel.c,472 :: 		while (i<numeroMuestras){
L_ProbarEnvioTrama45:
0x0B74	0x805B61  	MOV	_i, W1
0x0B76	0x2015E0  	MOV	#350, W0
0x0B78	0xE10800  	CP	W1, W0
0x0B7A	0x31000A  	BRA GEU	L_ProbarEnvioTrama46
L__ProbarEnvioTrama145:
;SensorNivel.c,473 :: 		vectorMuestras[j] = 255;                                           //Almacena el valor actual de la conversion del ADC en el vectorMuestras
0x0B7C	0x805C40  	MOV	_j, W0
0x0B7E	0xDD00C1  	SL	W0, #1, W1
0x0B80	0x208A80  	MOV	#lo_addr(_vectorMuestras), W0
0x0B82	0x400081  	ADD	W0, W1, W1
0x0B84	0x200FF0  	MOV	#255, W0
0x0B86	0x780880  	MOV	W0, [W1]
;SensorNivel.c,474 :: 		i++;                                                                    //Aumenta en 1 el subindice del vector de Muestras
0x0B88	0x200011  	MOV	#1, W1
0x0B8A	0x20B6C0  	MOV	#lo_addr(_i), W0
0x0B8C	0x408810  	ADD	W1, [W0], [W0]
;SensorNivel.c,475 :: 		}
0x0B8E	0x37FFF2  	BRA	L_ProbarEnvioTrama45
L_ProbarEnvioTrama46:
;SensorNivel.c,477 :: 		LED1 = 0;
0x0B90	0xA982C4  	BCLR	LATA4_bit, BitPos(LATA4_bit+0)
;SensorNivel.c,478 :: 		delay_ms(200);
0x0B92	0x200298  	MOV	#41, W8
0x0B94	0x2B0B77  	MOV	#45239, W7
L_ProbarEnvioTrama47:
0x0B96	0xED200E  	DEC	W7
0x0B98	0x3AFFFE  	BRA NZ	L_ProbarEnvioTrama47
0x0B9A	0xED2010  	DEC	W8
0x0B9C	0x3AFFFC  	BRA NZ	L_ProbarEnvioTrama47
;SensorNivel.c,479 :: 		LED1 = 1;
0x0B9E	0xA882C4  	BSET	LATA4_bit, BitPos(LATA4_bit+0)
;SensorNivel.c,480 :: 		delay_ms(200);
0x0BA0	0x200298  	MOV	#41, W8
0x0BA2	0x2B0B77  	MOV	#45239, W7
L_ProbarEnvioTrama49:
0x0BA4	0xED200E  	DEC	W7
0x0BA6	0x3AFFFE  	BRA NZ	L_ProbarEnvioTrama49
0x0BA8	0xED2010  	DEC	W8
0x0BAA	0x3AFFFC  	BRA NZ	L_ProbarEnvioTrama49
;SensorNivel.c,481 :: 		LED1 = 0;
0x0BAC	0xA982C4  	BCLR	LATA4_bit, BitPos(LATA4_bit+0)
;SensorNivel.c,483 :: 		}
L_end_ProbarEnvioTrama:
0x0BAE	0x060000  	RETURN
; end of _ProbarEnvioTrama
_EnviarTramaRS485:
0x0C38	0xFA0002  	LNK	#2
;rs485.c,19 :: 		void EnviarTramaRS485(unsigned char puertoUART, unsigned char *cabecera, unsigned char *payload){
;rs485.c,31 :: 		ptrnumDatos = (unsigned char *) & numDatos;
0x0C3A	0x781F8A  	PUSH	W10
0x0C3C	0x470160  	ADD	W14, #0, W2
; ptrnumDatos start address is: 6 (W3)
0x0C3E	0x780182  	MOV	W2, W3
;rs485.c,34 :: 		direccion = cabecera[0];
; direccion start address is: 8 (W4)
0x0C40	0x78421B  	MOV.B	[W11], W4
;rs485.c,35 :: 		funcion = cabecera[1];
0x0C42	0x458061  	ADD	W11, #1, W0
; funcion start address is: 10 (W5)
0x0C44	0x784290  	MOV.B	[W0], W5
;rs485.c,36 :: 		subfuncion = cabecera[2];
0x0C46	0x458062  	ADD	W11, #2, W0
; subfuncion start address is: 12 (W6)
0x0C48	0x784310  	MOV.B	[W0], W6
;rs485.c,37 :: 		lsbNumDatos = cabecera[3];
0x0C4A	0x4580E3  	ADD	W11, #3, W1
; lsbNumDatos start address is: 14 (W7)
0x0C4C	0x784391  	MOV.B	[W1], W7
;rs485.c,38 :: 		msbNumDatos = cabecera[4];
0x0C4E	0x458064  	ADD	W11, #4, W0
; msbNumDatos start address is: 16 (W8)
0x0C50	0x784410  	MOV.B	[W0], W8
;rs485.c,41 :: 		*(ptrnumDatos) = lsbNumDatos;
0x0C52	0x784911  	MOV.B	[W1], [W2]
;rs485.c,42 :: 		*(ptrnumDatos+1) = msbNumDatos;
0x0C54	0x418061  	ADD	W3, #1, W0
; ptrnumDatos end address is: 6 (W3)
0x0C56	0x784808  	MOV.B	W8, [W0]
;rs485.c,44 :: 		if (puertoUART == 1){
0x0C58	0xE15461  	CP.B	W10, #1
0x0C5A	0x3A0025  	BRA NZ	L_EnviarTramaRS4850
L__EnviarTramaRS485119:
;rs485.c,45 :: 		MSRS485 = 1;                                                            //Establece el Max485 en modo escritura
0x0C5C	0xA8A2CC  	BSET	MSRS485, BitPos(MSRS485+0)
;rs485.c,46 :: 		UART1_Write(0x3A);                                                      //Envia la cabecera de la trama
0x0C5E	0x2003AA  	MOV	#58, W10
0x0C60	0x07FDE9  	RCALL	_UART1_Write
;rs485.c,47 :: 		UART1_Write(direccion);                                                 //Envia la direccion del destinatario
0x0C62	0xFB8504  	ZE	W4, W10
; direccion end address is: 8 (W4)
0x0C64	0x07FDE7  	RCALL	_UART1_Write
;rs485.c,48 :: 		UART1_Write(funcion);                                                   //Envia el codigo de la funcion
0x0C66	0xFB8505  	ZE	W5, W10
; funcion end address is: 10 (W5)
0x0C68	0x07FDE5  	RCALL	_UART1_Write
;rs485.c,49 :: 		UART1_Write(subfuncion);                                                //Envia el codigo de la subfuncion
0x0C6A	0xFB8506  	ZE	W6, W10
; subfuncion end address is: 12 (W6)
0x0C6C	0x07FDE3  	RCALL	_UART1_Write
;rs485.c,50 :: 		UART1_Write(lsbNumDatos);                                               //Envia el LSB del numero de datos
0x0C6E	0xFB8507  	ZE	W7, W10
; lsbNumDatos end address is: 14 (W7)
0x0C70	0x07FDE1  	RCALL	_UART1_Write
;rs485.c,51 :: 		UART1_Write(msbNumDatos);                                               //Envia el MSB del numero de datos
0x0C72	0xFB8508  	ZE	W8, W10
; msbNumDatos end address is: 16 (W8)
0x0C74	0x07FDDF  	RCALL	_UART1_Write
;rs485.c,52 :: 		for (iDatos=0;iDatos<numDatos;iDatos++){                                //Envia la carga util de datos
; iDatos start address is: 2 (W1)
0x0C76	0xEF2002  	CLR	W1
; iDatos end address is: 2 (W1)
L_EnviarTramaRS4851:
; iDatos start address is: 2 (W1)
0x0C78	0x470060  	ADD	W14, #0, W0
0x0C7A	0xE10810  	CP	W1, [W0]
0x0C7C	0x310007  	BRA GEU	L_EnviarTramaRS4852
L__EnviarTramaRS485120:
;rs485.c,53 :: 		UART1_Write(payload[iDatos]);
0x0C7E	0x460001  	ADD	W12, W1, W0
0x0C80	0x781F8A  	PUSH	W10
0x0C82	0xFB8510  	ZE	[W0], W10
0x0C84	0x07FDD7  	RCALL	_UART1_Write
0x0C86	0x78054F  	POP	W10
;rs485.c,52 :: 		for (iDatos=0;iDatos<numDatos;iDatos++){                                //Envia la carga util de datos
0x0C88	0xEC2002  	INC	W1
;rs485.c,54 :: 		}
; iDatos end address is: 2 (W1)
0x0C8A	0x37FFF6  	BRA	L_EnviarTramaRS4851
L_EnviarTramaRS4852:
;rs485.c,55 :: 		UART1_Write(0x0D);                                                      //Envia el primer delimitador de final de la trama
0x0C8C	0x781F8A  	PUSH	W10
0x0C8E	0x2000DA  	MOV	#13, W10
0x0C90	0x07FDD1  	RCALL	_UART1_Write
;rs485.c,56 :: 		UART1_Write(0x0A);                                                      //Envia el segundo delimitador de final de la trama
0x0C92	0x2000AA  	MOV	#10, W10
0x0C94	0x07FDCF  	RCALL	_UART1_Write
;rs485.c,57 :: 		UART1_Write(0x00);                                                      //Envia un byte adicional
0x0C96	0xEF2014  	CLR	W10
0x0C98	0x07FDCD  	RCALL	_UART1_Write
0x0C9A	0x78054F  	POP	W10
;rs485.c,58 :: 		while(UART1_Tx_Idle()==0);                                              //Espera hasta que se haya terminado de enviar todo el dato por UART antes de continuar
L_EnviarTramaRS4854:
0x0C9C	0x07FDD2  	RCALL	_UART1_Tx_Idle
0x0C9E	0xE10060  	CP	W0, #0
0x0CA0	0x3A0001  	BRA NZ	L_EnviarTramaRS4855
L__EnviarTramaRS485121:
0x0CA2	0x37FFFC  	BRA	L_EnviarTramaRS4854
L_EnviarTramaRS4855:
;rs485.c,59 :: 		MSRS485 = 0;                                                           //Establece el Max485 en modo lectura
0x0CA4	0xA9A2CC  	BCLR	MSRS485, BitPos(MSRS485+0)
;rs485.c,60 :: 		}
L_EnviarTramaRS4850:
;rs485.c,62 :: 		}
L_end_EnviarTramaRS485:
0x0CA6	0x78054F  	POP	W10
0x0CA8	0xFA8000  	ULNK
0x0CAA	0x060000  	RETURN
; end of _EnviarTramaRS485
_UART1_Write:
0x0834	0xFA0000  	LNK	#0
;__Lib_UART_1_p24_p33.c,49 :: 		
;__Lib_UART_1_p24_p33.c,50 :: 		
L_UART1_Write0:
0x0836	0xAF0223  	BTSC	U1STA, #8
0x0838	0x370001  	BRA	L_UART1_Write1
0x083A	0x37FFFD  	BRA	L_UART1_Write0
L_UART1_Write1:
;__Lib_UART_1_p24_p33.c,51 :: 		
0x083C	0x88112A  	MOV	W10, U1TXREG
;__Lib_UART_1_p24_p33.c,52 :: 		
L_end_UART1_Write:
0x083E	0xFA8000  	ULNK
0x0840	0x060000  	RETURN
; end of _UART1_Write
_UART1_Tx_Idle:
0x0842	0xFA0000  	LNK	#0
;__Lib_UART_1_p24_p33.c,112 :: 		
;__Lib_UART_1_p24_p33.c,113 :: 		
0x0844	0xEF2000  	CLR	W0
0x0846	0xAF0223  	BTSC	U1STA, #8
0x0848	0xEC2000  	INC	W0
;__Lib_UART_1_p24_p33.c,114 :: 		
L_end_UART1_Tx_Idle:
0x084A	0xFA8000  	ULNK
0x084C	0x060000  	RETURN
; end of _UART1_Tx_Idle
_EnviarTramaInt:
0x0E14	0xFA02C4  	LNK	#708
;SensorNivel.c,633 :: 		void EnviarTramaInt(unsigned char* cabecera, unsigned int temperatura){
;SensorNivel.c,641 :: 		ptrValorInt = (unsigned char *) & valorInt;
0x0E16	0x781F8C  	PUSH	W12
0x0E18	0x202C20  	MOV	#706, W0
0x0E1A	0x470000  	ADD	W14, W0, W0
; ptrValorInt start address is: 8 (W4)
0x0E1C	0x780200  	MOV	W0, W4
;SensorNivel.c,642 :: 		ptrTemperatura = (unsigned char *) & temperatura;
0x0E1E	0x200160  	MOV	#lo_addr(W11), W0
; ptrTemperatura start address is: 6 (W3)
0x0E20	0x780180  	MOV	W0, W3
;SensorNivel.c,645 :: 		for (j=0;j<numeroMuestras;j++){
0x0E22	0xEF2000  	CLR	W0
0x0E24	0x885C40  	MOV	W0, _j
; ptrTemperatura end address is: 6 (W3)
L_EnviarTramaInt74:
; ptrTemperatura start address is: 6 (W3)
; ptrValorInt start address is: 8 (W4)
; ptrValorInt end address is: 8 (W4)
0x0E26	0x805C41  	MOV	_j, W1
0x0E28	0x2015E0  	MOV	#350, W0
0x0E2A	0xE10800  	CP	W1, W0
0x0E2C	0x310013  	BRA GEU	L_EnviarTramaInt75
L__EnviarTramaInt164:
; ptrValorInt end address is: 8 (W4)
;SensorNivel.c,646 :: 		valorInt = vectorMuestras[j];
; ptrValorInt start address is: 8 (W4)
0x0E2E	0x805C40  	MOV	_j, W0
0x0E30	0xDD0141  	SL	W0, #1, W2
0x0E32	0x208A80  	MOV	#lo_addr(_vectorMuestras), W0
0x0E34	0x400002  	ADD	W0, W2, W0
0x0E36	0x780010  	MOV	[W0], W0
0x0E38	0x9AA710  	MOV	W0, [W14+706]
;SensorNivel.c,647 :: 		tramaShort[j*2] = *(ptrValorInt);
0x0E3A	0x4700E0  	ADD	W14, #0, W1
0x0E3C	0x408002  	ADD	W1, W2, W0
0x0E3E	0x784814  	MOV.B	[W4], [W0]
;SensorNivel.c,648 :: 		tramaShort[(j*2)+1] = *(ptrValorInt+1);
0x0E40	0x805C40  	MOV	_j, W0
0x0E42	0xDD0041  	SL	W0, #1, W0
0x0E44	0xEC2000  	INC	W0
0x0E46	0x408080  	ADD	W1, W0, W1
0x0E48	0x420061  	ADD	W4, #1, W0
0x0E4A	0x784890  	MOV.B	[W0], [W1]
;SensorNivel.c,645 :: 		for (j=0;j<numeroMuestras;j++){
0x0E4C	0x200011  	MOV	#1, W1
0x0E4E	0x20B880  	MOV	#lo_addr(_j), W0
0x0E50	0x408810  	ADD	W1, [W0], [W0]
;SensorNivel.c,649 :: 		}
; ptrValorInt end address is: 8 (W4)
0x0E52	0x37FFE9  	BRA	L_EnviarTramaInt74
L_EnviarTramaInt75:
;SensorNivel.c,652 :: 		tramaShort[700] = *(ptrTemperatura);
0x0E54	0x470160  	ADD	W14, #0, W2
0x0E56	0x202BC0  	MOV	#700, W0
0x0E58	0x410000  	ADD	W2, W0, W0
0x0E5A	0x784813  	MOV.B	[W3], [W0]
;SensorNivel.c,653 :: 		tramaShort[701] = *(ptrTemperatura+1);
0x0E5C	0x202BD0  	MOV	#701, W0
0x0E5E	0x410080  	ADD	W2, W0, W1
0x0E60	0x418061  	ADD	W3, #1, W0
; ptrTemperatura end address is: 6 (W3)
0x0E62	0x784890  	MOV.B	[W0], [W1]
;SensorNivel.c,656 :: 		EnviarTramaRS485(1, cabecera, tramaShort);
0x0E64	0xBE9F8A  	PUSH.D	W10
0x0E66	0x780602  	MOV	W2, W12
0x0E68	0x78058A  	MOV	W10, W11
0x0E6A	0xB3C01A  	MOV.B	#1, W10
0x0E6C	0x07FEE5  	RCALL	_EnviarTramaRS485
0x0E6E	0xBE054F  	POP.D	W10
;SensorNivel.c,658 :: 		}
L_end_EnviarTramaInt:
0x0E70	0x78064F  	POP	W12
0x0E72	0xFA8000  	ULNK
0x0E74	0x060000  	RETURN
; end of _EnviarTramaInt
_GenerarTramaPrueba:
0x0CD2	0xFA0204  	LNK	#516
;SensorNivel.c,418 :: 		void GenerarTramaPrueba(unsigned int numDatosPrueba, unsigned char *cabeceraPrueba){
;SensorNivel.c,420 :: 		unsigned int contadorMuestras = 0;
0x0CD4	0x781F8C  	PUSH	W12
; contadorMuestras start address is: 4 (W2)
0x0CD6	0xEF2004  	CLR	W2
;SensorNivel.c,424 :: 		for (j=0;j<numDatosPrueba;j++){
0x0CD8	0xEF2000  	CLR	W0
0x0CDA	0x885C40  	MOV	W0, _j
; contadorMuestras end address is: 4 (W2)
L_GenerarTramaPrueba37:
; contadorMuestras start address is: 4 (W2)
0x0CDC	0x20B880  	MOV	#lo_addr(_j), W0
0x0CDE	0xE15010  	CP	W10, [W0]
0x0CE0	0x36000F  	BRA LEU	L_GenerarTramaPrueba38
L__GenerarTramaPrueba141:
;SensorNivel.c,425 :: 		outputPyloadRS485[j] = contadorMuestras;
0x0CE2	0x4700E0  	ADD	W14, #0, W1
0x0CE4	0x20B880  	MOV	#lo_addr(_j), W0
0x0CE6	0x408010  	ADD	W1, [W0], W0
0x0CE8	0x784802  	MOV.B	W2, [W0]
;SensorNivel.c,426 :: 		contadorMuestras++;
0x0CEA	0x4100E1  	ADD	W2, #1, W1
0x0CEC	0x780101  	MOV	W1, W2
;SensorNivel.c,427 :: 		if (contadorMuestras>255) {
0x0CEE	0x200FF0  	MOV	#255, W0
0x0CF0	0xE10800  	CP	W1, W0
0x0CF2	0x360002  	BRA LEU	L__GenerarTramaPrueba104
L__GenerarTramaPrueba142:
;SensorNivel.c,428 :: 		contadorMuestras = 0;
0x0CF4	0xEF2004  	CLR	W2
; contadorMuestras end address is: 4 (W2)
;SensorNivel.c,429 :: 		}
0x0CF6	0x370000  	BRA	L_GenerarTramaPrueba40
L__GenerarTramaPrueba104:
;SensorNivel.c,427 :: 		if (contadorMuestras>255) {
;SensorNivel.c,429 :: 		}
L_GenerarTramaPrueba40:
;SensorNivel.c,424 :: 		for (j=0;j<numDatosPrueba;j++){
; contadorMuestras start address is: 4 (W2)
0x0CF8	0x200011  	MOV	#1, W1
0x0CFA	0x20B880  	MOV	#lo_addr(_j), W0
0x0CFC	0x408810  	ADD	W1, [W0], [W0]
;SensorNivel.c,430 :: 		}
; contadorMuestras end address is: 4 (W2)
0x0CFE	0x37FFEE  	BRA	L_GenerarTramaPrueba37
L_GenerarTramaPrueba38:
;SensorNivel.c,432 :: 		EnviarTramaRS485(1, cabeceraPrueba, outputPyloadRS485);
0x0D00	0x470060  	ADD	W14, #0, W0
0x0D02	0x781F8A  	PUSH	W10
0x0D04	0x780600  	MOV	W0, W12
0x0D06	0xB3C01A  	MOV.B	#1, W10
0x0D08	0x07FF97  	RCALL	_EnviarTramaRS485
0x0D0A	0x78054F  	POP	W10
;SensorNivel.c,434 :: 		}
L_end_GenerarTramaPrueba:
0x0D0C	0x78064F  	POP	W12
0x0D0E	0xFA8000  	ULNK
0x0D10	0x060000  	RETURN
; end of _GenerarTramaPrueba
0x1444	0x208001  	MOV	#lo_addr(_Mmed), W1
0x1446	0x294320  	MOV	#37938, W0
0x1448	0x090008  	REPEAT	#8
0x144A	0x7818B0  	MOV	[W0++], [W1++]
0x144C	0x060000  	RETURN
_UART1Interrupt:
0x12D6	0xF80034  	PUSH	PSVPAG
0x12D8	0xF80036  	PUSH	RCOUNT
0x12DA	0x781F80  	PUSH	W0
0x12DC	0x200020  	MOV	#2, W0
0x12DE	0x09000C  	REPEAT	#12
0x12E0	0x781FB0  	PUSH	[W0++]
;SensorNivel.c,726 :: 		void UART1Interrupt() iv IVT_ADDR_U1RXINTERRUPT {
;SensorNivel.c,728 :: 		U1RXIF_bit = 0;                                                            //Limpia la bandera de interrupcion de UARTRX
0x12E2	0xA96085  	BCLR	U1RXIF_bit, BitPos(U1RXIF_bit+0)
;SensorNivel.c,731 :: 		byteRS485 = UART1_Read();                                               //Lee el byte recibido
0x12E4	0x07FE09  	RCALL	_UART1_Read
0x12E6	0x208311  	MOV	#lo_addr(_byteRS485), W1
0x12E8	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,735 :: 		if (banRSI==2){
0x12EA	0x208350  	MOV	#lo_addr(_banRSI), W0
0x12EC	0x784010  	MOV.B	[W0], W0
0x12EE	0xE10462  	CP.B	W0, #2
0x12F0	0x3A0013  	BRA NZ	L_UART1Interrupt84
L__UART1Interrupt171:
;SensorNivel.c,737 :: 		if (i_rs485<(numDatosRS485)){
0x12F2	0x804191  	MOV	_i_rs485, W1
0x12F4	0x2083C0  	MOV	#lo_addr(_numDatosRS485), W0
0x12F6	0xE10810  	CP	W1, [W0]
0x12F8	0x310009  	BRA GEU	L_UART1Interrupt85
L__UART1Interrupt172:
;SensorNivel.c,738 :: 		solicitudPyloadRS485[i_rs485] = byteRS485;
0x12FA	0x2081F1  	MOV	#lo_addr(_solicitudPyloadRS485), W1
0x12FC	0x208320  	MOV	#lo_addr(_i_rs485), W0
0x12FE	0x408090  	ADD	W1, [W0], W1
0x1300	0x208310  	MOV	#lo_addr(_byteRS485), W0
0x1302	0x784890  	MOV.B	[W0], [W1]
;SensorNivel.c,739 :: 		i_rs485++;
0x1304	0x200011  	MOV	#1, W1
0x1306	0x208320  	MOV	#lo_addr(_i_rs485), W0
0x1308	0x408810  	ADD	W1, [W0], [W0]
;SensorNivel.c,740 :: 		} else {
0x130A	0x370006  	BRA	L_UART1Interrupt86
L_UART1Interrupt85:
;SensorNivel.c,741 :: 		banRSI = 0;                                                      //Limpia la bandera de inicio de trama
0x130C	0x208351  	MOV	#lo_addr(_banRSI), W1
0x130E	0xEF2000  	CLR	W0
0x1310	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,742 :: 		banRSC = 1;                                                      //Activa la bandera de trama completa
0x1312	0x208381  	MOV	#lo_addr(_banRSC), W1
0x1314	0xB3C010  	MOV.B	#1, W0
0x1316	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,743 :: 		}
L_UART1Interrupt86:
;SensorNivel.c,744 :: 		}
L_UART1Interrupt84:
;SensorNivel.c,747 :: 		if ((banRSI==0)&&(banRSC==0)){
0x1318	0x208350  	MOV	#lo_addr(_banRSI), W0
0x131A	0x784010  	MOV.B	[W0], W0
0x131C	0xE10460  	CP.B	W0, #0
0x131E	0x3A000E  	BRA NZ	L__UART1Interrupt110
L__UART1Interrupt173:
0x1320	0x208380  	MOV	#lo_addr(_banRSC), W0
0x1322	0x784010  	MOV.B	[W0], W0
0x1324	0xE10460  	CP.B	W0, #0
0x1326	0x3A000A  	BRA NZ	L__UART1Interrupt109
L__UART1Interrupt174:
L__UART1Interrupt108:
;SensorNivel.c,748 :: 		if (byteRS485==0x3A){                                                 //Verifica si el primer byte recibido sea el byte de inicio de trama
0x1328	0x208310  	MOV	#lo_addr(_byteRS485), W0
0x132A	0x784090  	MOV.B	[W0], W1
0x132C	0xB3C3A0  	MOV.B	#58, W0
0x132E	0xE10C00  	CP.B	W1, W0
0x1330	0x3A0005  	BRA NZ	L_UART1Interrupt90
L__UART1Interrupt175:
;SensorNivel.c,749 :: 		banRSI = 1;
0x1332	0x208351  	MOV	#lo_addr(_banRSI), W1
0x1334	0xB3C010  	MOV.B	#1, W0
0x1336	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,750 :: 		i_rs485 = 0;
0x1338	0xEF2000  	CLR	W0
0x133A	0x884190  	MOV	W0, _i_rs485
;SensorNivel.c,751 :: 		}
L_UART1Interrupt90:
;SensorNivel.c,747 :: 		if ((banRSI==0)&&(banRSC==0)){
L__UART1Interrupt110:
L__UART1Interrupt109:
;SensorNivel.c,753 :: 		if ((banRSI==1)&&(byteRS485!=0x3A)&&(i_rs485<5)){
0x133C	0x208350  	MOV	#lo_addr(_banRSI), W0
0x133E	0x784010  	MOV.B	[W0], W0
0x1340	0xE10461  	CP.B	W0, #1
0x1342	0x3A0010  	BRA NZ	L__UART1Interrupt113
L__UART1Interrupt176:
0x1344	0x208310  	MOV	#lo_addr(_byteRS485), W0
0x1346	0x784090  	MOV.B	[W0], W1
0x1348	0xB3C3A0  	MOV.B	#58, W0
0x134A	0xE10C00  	CP.B	W1, W0
0x134C	0x32000B  	BRA Z	L__UART1Interrupt112
L__UART1Interrupt177:
0x134E	0x804190  	MOV	_i_rs485, W0
0x1350	0xE10065  	CP	W0, #5
0x1352	0x310008  	BRA GEU	L__UART1Interrupt111
L__UART1Interrupt178:
L__UART1Interrupt107:
;SensorNivel.c,755 :: 		solicitudCabeceraRS485[i_rs485] = byteRS485;                          //Recupera los datos de cabecera de la trama UART: [Direccion, Funcion, Subfuncion, NumeroDatos]
0x1354	0x2081A1  	MOV	#lo_addr(_solicitudCabeceraRS485), W1
0x1356	0x208320  	MOV	#lo_addr(_i_rs485), W0
0x1358	0x408090  	ADD	W1, [W0], W1
0x135A	0x208310  	MOV	#lo_addr(_byteRS485), W0
0x135C	0x784890  	MOV.B	[W0], [W1]
;SensorNivel.c,756 :: 		i_rs485++;
0x135E	0x200011  	MOV	#1, W1
0x1360	0x208320  	MOV	#lo_addr(_i_rs485), W0
0x1362	0x408810  	ADD	W1, [W0], [W0]
;SensorNivel.c,753 :: 		if ((banRSI==1)&&(byteRS485!=0x3A)&&(i_rs485<5)){
L__UART1Interrupt113:
L__UART1Interrupt112:
L__UART1Interrupt111:
;SensorNivel.c,758 :: 		if ((banRSI==1)&&(i_rs485==5)){
0x1364	0x208350  	MOV	#lo_addr(_banRSI), W0
0x1366	0x784010  	MOV.B	[W0], W0
0x1368	0xE10461  	CP.B	W0, #1
0x136A	0x3A0022  	BRA NZ	L__UART1Interrupt117
L__UART1Interrupt179:
0x136C	0x804190  	MOV	_i_rs485, W0
0x136E	0xE10065  	CP	W0, #5
0x1370	0x3A001F  	BRA NZ	L__UART1Interrupt116
L__UART1Interrupt180:
L__UART1Interrupt106:
;SensorNivel.c,760 :: 		if ((solicitudCabeceraRS485[0]==IDNODO)||(solicitudCabeceraRS485[0]==255)){
0x1372	0x2081A0  	MOV	#lo_addr(_solicitudCabeceraRS485), W0
0x1374	0x784010  	MOV.B	[W0], W0
0x1376	0xE10462  	CP.B	W0, #2
0x1378	0x320006  	BRA Z	L__UART1Interrupt115
L__UART1Interrupt181:
0x137A	0x2081A0  	MOV	#lo_addr(_solicitudCabeceraRS485), W0
0x137C	0x784090  	MOV.B	[W0], W1
0x137E	0xB3CFF0  	MOV.B	#255, W0
0x1380	0xE10C00  	CP.B	W1, W0
0x1382	0x320001  	BRA Z	L__UART1Interrupt114
L__UART1Interrupt182:
0x1384	0x37000D  	BRA	L_UART1Interrupt99
L__UART1Interrupt115:
L__UART1Interrupt114:
;SensorNivel.c,762 :: 		*(ptrNumDatosRS485) = solicitudCabeceraRS485[3];
0x1386	0x2081D1  	MOV	#lo_addr(_solicitudCabeceraRS485+3), W1
0x1388	0x8041F0  	MOV	_ptrNumDatosRS485, W0
0x138A	0x784811  	MOV.B	[W1], [W0]
;SensorNivel.c,763 :: 		*(ptrNumDatosRS485+1) = solicitudCabeceraRS485[4];
0x138C	0x8041F0  	MOV	_ptrNumDatosRS485, W0
0x138E	0x4000E1  	ADD	W0, #1, W1
0x1390	0x2081E0  	MOV	#lo_addr(_solicitudCabeceraRS485+4), W0
0x1392	0x784890  	MOV.B	[W0], [W1]
;SensorNivel.c,764 :: 		i_rs485 = 0;                                                     //Encera el subindice para almacenar el payload
0x1394	0xEF2000  	CLR	W0
0x1396	0x884190  	MOV	W0, _i_rs485
;SensorNivel.c,765 :: 		banRSI = 2;                                                      //Cambia el valor de la bandera para salir del bucle
0x1398	0x208351  	MOV	#lo_addr(_banRSI), W1
0x139A	0xB3C020  	MOV.B	#2, W0
0x139C	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,766 :: 		} else {
0x139E	0x370008  	BRA	L_UART1Interrupt100
L_UART1Interrupt99:
;SensorNivel.c,767 :: 		banRSI = 0;
0x13A0	0x208351  	MOV	#lo_addr(_banRSI), W1
0x13A2	0xEF2000  	CLR	W0
0x13A4	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,768 :: 		banRSC = 0;
0x13A6	0x208381  	MOV	#lo_addr(_banRSC), W1
0x13A8	0xEF2000  	CLR	W0
0x13AA	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,769 :: 		i_rs485 = 0;
0x13AC	0xEF2000  	CLR	W0
0x13AE	0x884190  	MOV	W0, _i_rs485
;SensorNivel.c,775 :: 		}
L_UART1Interrupt100:
;SensorNivel.c,758 :: 		if ((banRSI==1)&&(i_rs485==5)){
L__UART1Interrupt117:
L__UART1Interrupt116:
;SensorNivel.c,779 :: 		if (banRSC==1){
0x13B0	0x208380  	MOV	#lo_addr(_banRSC), W0
0x13B2	0x784010  	MOV.B	[W0], W0
0x13B4	0xE10461  	CP.B	W0, #1
0x13B6	0x3A000C  	BRA NZ	L_UART1Interrupt101
L__UART1Interrupt183:
;SensorNivel.c,780 :: 		Delay_ms(100);                                                        //**Ojo: Este retardo es importante para que el Concentrador tenga tiempo de recibir la respuesta
0x13B8	0x200158  	MOV	#21, W8
0x13BA	0x2585B7  	MOV	#22619, W7
L_UART1Interrupt102:
0x13BC	0xED200E  	DEC	W7
0x13BE	0x3AFFFE  	BRA NZ	L_UART1Interrupt102
0x13C0	0xED2010  	DEC	W8
0x13C2	0x3AFFFC  	BRA NZ	L_UART1Interrupt102
;SensorNivel.c,784 :: 		banderaPeticion = 1;
0x13C4	0x20B811  	MOV	#lo_addr(_banderaPeticion), W1
0x13C6	0xB3C010  	MOV.B	#1, W0
0x13C8	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,786 :: 		banRSC = 0;
0x13CA	0x208381  	MOV	#lo_addr(_banRSC), W1
0x13CC	0xEF2000  	CLR	W0
0x13CE	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,787 :: 		}
L_UART1Interrupt101:
;SensorNivel.c,788 :: 		}
L_end_UART1Interrupt:
0x13D0	0x2001A0  	MOV	#26, W0
0x13D2	0x09000C  	REPEAT	#12
0x13D4	0x78104F  	POP	[W0--]
0x13D6	0x78004F  	POP	W0
0x13D8	0xF90036  	POP	RCOUNT
0x13DA	0xF90034  	POP	PSVPAG
0x13DC	0x064000  	RETFIE
; end of _UART1Interrupt
_UART1_Read:
0x0EF8	0xFA0000  	LNK	#0
;__Lib_UART_1_p24_p33.c,71 :: 		
;__Lib_UART_1_p24_p33.c,72 :: 		
0x0EFA	0x000000  	NOP
;__Lib_UART_1_p24_p33.c,73 :: 		
0x0EFC	0x000000  	NOP
;__Lib_UART_1_p24_p33.c,74 :: 		
0x0EFE	0xBF8226  	MOV	U1RXREG, WREG
;__Lib_UART_1_p24_p33.c,75 :: 		
L_end_UART1_Read:
0x0F00	0xFA8000  	ULNK
0x0F02	0x060000  	RETURN
; end of _UART1_Read
_Timer2Interrupt:
0x11E8	0xF80034  	PUSH	PSVPAG
0x11EA	0xF80036  	PUSH	RCOUNT
0x11EC	0x781F80  	PUSH	W0
0x11EE	0x200020  	MOV	#2, W0
0x11F0	0x09000C  	REPEAT	#12
0x11F2	0x781FB0  	PUSH	[W0++]
;SensorNivel.c,681 :: 		void Timer2Interrupt() iv IVT_ADDR_T2INTERRUPT{
;SensorNivel.c,683 :: 		if (contPulsos<10){                                                        //Controla el numero total de pulsos de exitacion del transductor ultrasonico. (
0x11F4	0x805B30  	MOV	_contPulsos, W0
0x11F6	0xE1006A  	CP	W0, #10
0x11F8	0x310002  	BRA GEU	L_Timer2Interrupt81
L__Timer2Interrupt168:
;SensorNivel.c,684 :: 		RB2_bit = ~RB2_bit;                                                   //Conmuta el valor del pin RB14
0x11FA	0xAA42CA  	BTG	RB2_bit, BitPos(RB2_bit+0)
;SensorNivel.c,685 :: 		}else {
0x11FC	0x37000E  	BRA	L_Timer2Interrupt82
L_Timer2Interrupt81:
;SensorNivel.c,686 :: 		RB2_bit = 0;                                                          //Pone a cero despues de enviar todos los pulsos de exitacion.
0x11FE	0xA942CA  	BCLR	RB2_bit, BitPos(RB2_bit+0)
;SensorNivel.c,688 :: 		if (contPulsos==pulsosDistancia){
0x1200	0x20B650  	MOV	#lo_addr(_pulsosDistancia), W0
0x1202	0xFB8090  	ZE	[W0], W1
0x1204	0x20B660  	MOV	#lo_addr(_contPulsos), W0
0x1206	0xE10810  	CP	W1, [W0]
0x1208	0x3A0008  	BRA NZ	L_Timer2Interrupt83
L__Timer2Interrupt169:
;SensorNivel.c,689 :: 		T2CON.TON = 0;                                                    //Apaga el TMR2
0x120A	0xA9E111  	BCLR	T2CON, #15
;SensorNivel.c,690 :: 		TMR1 = 0;                                                         //Encera el TMR1
0x120C	0xEF2100  	CLR	TMR1
;SensorNivel.c,691 :: 		T1CON.TON = 1;                                                    //Enciende el TMR1
0x120E	0xA8E105  	BSET	T1CON, #15
;SensorNivel.c,692 :: 		bm = 0;
0x1210	0x20B641  	MOV	#lo_addr(_bm), W1
0x1212	0xEF2000  	CLR	W0
0x1214	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,693 :: 		i = 0;
0x1216	0xEF2000  	CLR	W0
0x1218	0x885B60  	MOV	W0, _i
;SensorNivel.c,694 :: 		}
L_Timer2Interrupt83:
;SensorNivel.c,695 :: 		}
L_Timer2Interrupt82:
;SensorNivel.c,696 :: 		contPulsos++;                                                              //Aumenta el contador en una unidad.
0x121A	0x200011  	MOV	#1, W1
0x121C	0x20B660  	MOV	#lo_addr(_contPulsos), W0
0x121E	0x408810  	ADD	W1, [W0], [W0]
;SensorNivel.c,697 :: 		T2IF_bit = 0;                                                              //Limpia la bandera de interrupcion por desbordamiento del TMR2
0x1220	0xA9E084  	BCLR	T2IF_bit, BitPos(T2IF_bit+0)
;SensorNivel.c,699 :: 		}
L_end_Timer2Interrupt:
0x1222	0x2001A0  	MOV	#26, W0
0x1224	0x09000C  	REPEAT	#12
0x1226	0x78104F  	POP	[W0--]
0x1228	0x78004F  	POP	W0
0x122A	0xF90036  	POP	RCOUNT
0x122C	0xF90034  	POP	PSVPAG
0x122E	0x064000  	RETFIE
; end of _Timer2Interrupt
_Timer1Interrupt:
0x11A0	0xF80034  	PUSH	PSVPAG
0x11A2	0xF80036  	PUSH	RCOUNT
0x11A4	0x781F80  	PUSH	W0
0x11A6	0x200020  	MOV	#2, W0
0x11A8	0x09000C  	REPEAT	#12
0x11AA	0x781FB0  	PUSH	[W0++]
;SensorNivel.c,666 :: 		void Timer1Interrupt() iv IVT_ADDR_T1INTERRUPT{
;SensorNivel.c,667 :: 		SAMP_bit = 0;                                                              //Limpia el bit SAMP para iniciar la conversion del ADC
0x11AC	0xA92320  	BCLR	SAMP_bit, BitPos(SAMP_bit+0)
;SensorNivel.c,668 :: 		while (!AD1CON1bits.DONE);                                                 //Espera hasta que se complete la conversion
L_Timer1Interrupt77:
0x11AE	0xAF0320  	BTSC	AD1CON1bits, #0
0x11B0	0x370001  	BRA	L_Timer1Interrupt78
0x11B2	0x37FFFD  	BRA	L_Timer1Interrupt77
L_Timer1Interrupt78:
;SensorNivel.c,669 :: 		if (i<numeroMuestras){
0x11B4	0x805B61  	MOV	_i, W1
0x11B6	0x2015E0  	MOV	#350, W0
0x11B8	0xE10800  	CP	W1, W0
0x11BA	0x31000A  	BRA GEU	L_Timer1Interrupt79
L__Timer1Interrupt166:
;SensorNivel.c,670 :: 		vectorMuestras[i] = ADC1BUF0;                                           //Almacena el valor actual de la conversion del ADC en el vectorMuestras
0x11BC	0x805B60  	MOV	_i, W0
0x11BE	0xDD00C1  	SL	W0, #1, W1
0x11C0	0x208A80  	MOV	#lo_addr(_vectorMuestras), W0
0x11C2	0x400081  	ADD	W0, W1, W1
0x11C4	0xBF8300  	MOV	ADC1BUF0, WREG
0x11C6	0x780880  	MOV	W0, [W1]
;SensorNivel.c,672 :: 		i++;                                                                    //Aumenta en 1 el subindice del vector de Muestras
0x11C8	0x200011  	MOV	#1, W1
0x11CA	0x20B6C0  	MOV	#lo_addr(_i), W0
0x11CC	0x408810  	ADD	W1, [W0], [W0]
;SensorNivel.c,673 :: 		} else {
0x11CE	0x370004  	BRA	L_Timer1Interrupt80
L_Timer1Interrupt79:
;SensorNivel.c,674 :: 		bm = 1;                                                                 //Cambia el valor de la bandera bm para terminar con el muestreo y dar comienzo al procesamiento de la senal
0x11D0	0x20B641  	MOV	#lo_addr(_bm), W1
0x11D2	0xB3C010  	MOV.B	#1, W0
0x11D4	0x784880  	MOV.B	W0, [W1]
;SensorNivel.c,675 :: 		T1CON.TON = 0;                                                          //Apaga el TMR1
0x11D6	0xA9E105  	BCLR	T1CON, #15
;SensorNivel.c,676 :: 		}
L_Timer1Interrupt80:
;SensorNivel.c,677 :: 		T1IF_bit = 0;                                                              //Limpia la bandera de interrupcion por desbordamiento del TMR1
0x11D8	0xA96084  	BCLR	T1IF_bit, BitPos(T1IF_bit+0)
;SensorNivel.c,678 :: 		}
L_end_Timer1Interrupt:
0x11DA	0x2001A0  	MOV	#26, W0
0x11DC	0x09000C  	REPEAT	#12
0x11DE	0x78104F  	POP	[W0--]
0x11E0	0x78004F  	POP	W0
0x11E2	0xF90036  	POP	RCOUNT
0x11E4	0xF90034  	POP	PSVPAG
0x11E6	0x064000  	RETFIE
; end of _Timer1Interrupt
;SensorNivel.c,37 :: _h [84]
0x13DE	0x0000 ;_h+0
0x13E0	0x0000 ;_h+2
0x13E2	0xE347 ;_h+4
0x13E4	0x3A62 ;_h+6
0x13E6	0x206D ;_h+8
0x13E8	0x3B75 ;_h+10
0x13EA	0x322B ;_h+12
0x13EC	0x3C10 ;_h+14
0x13EE	0xE9A9 ;_h+16
0x13F0	0x3C81 ;_h+18
0x13F2	0x8724 ;_h+20
0x13F4	0x3CC7 ;_h+22
0x13F6	0xF450 ;_h+24
0x13F8	0x3D08 ;_h+26
0x13FA	0x4582 ;_h+28
0x13FC	0x3D2C ;_h+30
0x13FE	0x5FA2 ;_h+32
0x1400	0x3D49 ;_h+34
0x1402	0x8660 ;_h+36
0x1404	0x3D5C ;_h+38
0x1406	0x3483 ;_h+40
0x1408	0x3D63 ;_h+42
0x140A	0x8660 ;_h+44
0x140C	0x3D5C ;_h+46
0x140E	0x5FA2 ;_h+48
0x1410	0x3D49 ;_h+50
0x1412	0x4582 ;_h+52
0x1414	0x3D2C ;_h+54
0x1416	0xF450 ;_h+56
0x1418	0x3D08 ;_h+58
0x141A	0x8724 ;_h+60
0x141C	0x3CC7 ;_h+62
0x141E	0xE9A9 ;_h+64
0x1420	0x3C81 ;_h+66
0x1422	0x322B ;_h+68
0x1424	0x3C10 ;_h+70
0x1426	0x206D ;_h+72
0x1428	0x3B75 ;_h+74
0x142A	0xE347 ;_h+76
0x142C	0x3A62 ;_h+78
0x142E	0x0000 ;_h+80
0x1430	0x0000 ;_h+82
; end of _h
;SensorNivel.c,0 :: ?ICS_Mmed [2]
0x1432	0x0000 ;?ICS_Mmed+0
; end of ?ICS_Mmed
;SensorNivel.c,0 :: ?ICS_tramaPruebaRS485 [10]
0x1434	0x0B0B ;?ICS_tramaPruebaRS485+0
0x1436	0x0B0B ;?ICS_tramaPruebaRS485+2
0x1438	0x0B0B ;?ICS_tramaPruebaRS485+4
0x143A	0x0B0B ;?ICS_tramaPruebaRS485+6
0x143C	0x020B ;?ICS_tramaPruebaRS485+8
; end of ?ICS_tramaPruebaRS485
;SensorNivel.c,0 :: ?ICS_YY [2]
0x143E	0x0000 ;?ICS_YY+0
; end of ?ICS_YY
;SensorNivel.c,0 :: ?ICS_y0 [4]
0x1440	0x0000 ;?ICS_y0+0
0x1442	0x0000 ;?ICS_y0+2
; end of ?ICS_y0
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0200     [364]    __AddSub_FP
0x036C      [12]    _Delay_50us
0x0378      [36]    _Vector_Max
0x039C      [12]    _Delay_500us
0x03A8      [12]    _Delay_80us
0x03B4      [10]    _Delay_1us
0x03BE     [182]    __Long2Float
0x0474     [120]    __Float2Longint
0x04EC     [114]    __Compare_Fp
0x055E     [310]    __Div_FP
0x0694      [10]    __Sub_FP
0x069E     [282]    __Mul_FP
0x07B8      [14]    _Delay_100ms
0x07C6       [4]    _Get_Fosc_Per_Cyc
0x07CA      [88]    __Modulus_32x32
0x0822      [18]    __Multiply_32x32
0x0834      [14]    _UART1_Write
0x0842      [12]    _UART1_Tx_Idle
0x084E       [6]    _Get_Fosc_kHz
0x0854      [10]    __Compare_Le_Fp
0x085E      [82]    __Divide_32x32
0x08B0      [60]    _Ow_Write
0x08EC      [48]    _Ow_Reset
0x091C     [534]    _ProcesarMuestras
0x0B32      [60]    _Ow_Read
0x0B6E      [66]    _ProbarEnvioTrama
0x0BB0      [30]    _ProbarMuestreo
0x0BCE     [106]    _LeerDS18B20
0x0C38     [116]    _EnviarTramaRS485
0x0CAC      [38]    _CapturarMuestras
0x0CD2      [64]    _GenerarTramaPrueba
0x0D12     [258]    _UART1_Init
0x0E14      [98]    _EnviarTramaInt
0x0E76     [130]    _CalcularTOF
0x0EF8      [12]    _UART1_Read
0x0F04     [336]    _ProcesarSolicitud
0x1054     [332]    _ConfiguracionPrincipal
0x11A0      [72]    _Timer1Interrupt
0x11E8      [72]    _Timer2Interrupt
0x1230     [166]    _main
0x12D6     [264]    _UART1Interrupt
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x010C       [2]    PR2
0x0112       [2]    T3CON
0x0084       [0]    T3IF_bit
0x0084       [0]    T1IF_bit
0x0102       [2]    PR1
0x0084       [0]    T2IF_bit
0x010E       [2]    PR3
0x00A4       [2]    IPC0bits
0x00A6       [2]    IPC1bits
0x00A8       [2]    IPC2bits
0x06A4       [2]    RPINR18bits
0x06C6       [2]    RPOR3bits
0x0084       [0]    U1RXIF_bit
0x0094       [2]    IEC0
0x0320       [2]    AD1CON1
0x0320       [2]    AD1CON1bits
0x0322       [2]    AD1CON2bits
0x02C8       [0]    TRISB5_bit
0x02C0       [0]    LED1_Direction
0x02C0       [0]    TRISA4_bit
0x0322       [2]    AD1CON2
0x0328       [2]    AD1CHS0bits
0x0326       [2]    AD1CHS123
0x0330       [2]    AD1CSSL
0x0324       [2]    AD1CON3
0x0324       [2]    AD1CON3bits
0x0328       [2]    AD1CHS0
0x0812       [2]    _x
0x0814       [2]    _UART_Wr_Ptr
0x0816       [2]    _UART_Rd_Ptr
0x0818       [2]    _UART_Rdy_Ptr
0x081A       [5]    _solicitudCabeceraRS485
0x081F      [15]    _solicitudPyloadRS485
0x0222       [2]    U1STA
0x082E       [2]    _UART_Tx_Idle_Ptr
0x0226       [2]    U1RXREG
0x0320       [0]    SAMP_bit
0x0300       [2]    ADC1BUF0
0x0220       [2]    U1MODE
0x0228       [2]    U1BRG
0x0224       [2]    U1TXREG
0x0830       [1]    _ip
0x0831       [1]    _byteRS485
0x0832       [2]    _i_rs485
0x0834       [1]    _funcionRS485
0x0836       [2]    _y
0x0835       [1]    _banRSI
0x0838       [1]    _banRSC
0x0839       [1]    _subFuncionRS485
0x083A       [1]    _banderaUART
0x02CC       [0]    LED2
0x02CC       [0]    LATB4_bit
0x083C       [2]    _numDatosRS485
0x083E       [2]    _ptrNumDatosRS485
0x083B       [1]    _contTMR3
0x0840       [2]    _yy1
0x0842       [2]    _maxIndex
0x0844       [2]    _f
0x0846      [84]    _XFIR
0x089A       [2]    _i1b
0x089C       [2]    _i2
0x089E       [2]    _yy0
0x08A0       [2]    _yy2
0x08A2       [2]    _i1a
0x08A4       [2]    _i1
0x08A6       [2]    _i0
0x08A8     [700]    _vectorMuestras
0x0B64       [1]    _bm
0x0B66       [2]    _contPulsos
0x02CA       [0]    RB2_bit
0x02CC       [0]    LATB5_bit
0x02C4       [0]    LED1
0x02C4       [0]    LATA4_bit
0x0104       [2]    T1CON
0x0B68       [2]    _k
0x0B6A       [2]    _valorAbsoluto
0x0106       [2]    TMR2
0x0110       [2]    T2CON
0x0B6C       [2]    _i
0x0B6E       [4]    _yf0
0x0B72      [15]    _respuestaPyloadRS485
0x0B65       [1]    _pulsosDistancia
0x02CC       [0]    MSRS485
0x0B82       [2]    _temperaturaRaw
0x0B84       [4]    _TOF
0x0B81       [1]    _banderaPeticion
0x02C0       [0]    TRISA1_bit
0x02C8       [2]    TRISB
0x02C8       [0]    MSRS485_Direction
0x0744       [2]    CLKDIVbits
0x0746       [2]    PLLFBD
0x032C       [2]    AD1PCFGL
0x0B88       [2]    _j
0x0B8A       [4]    _dx
0x0B8E       [4]    _tmax
0x0B92       [4]    _T2
0x0B96       [4]    _yf1
0x0B9A       [4]    _yf2
0x0B9E       [4]    _nx
0x02C2       [2]    PORTA
0x0BA2       [4]    _T2a
0x0BA6       [4]    _T2b
0x0100       [2]    TMR1
0x0BAA       [1]    _conts
0x0BAC       [4]    _T2sum
0x0BB0       [4]    _T2prom
0x0800       [2]    _Mmed
0x0802      [10]    _tramaPruebaRS485
0x080C       [2]    _YY
0x080E       [4]    _y0
0x0094       [2]    IEC0
0x0100       [2]    TMR1
0x0102       [2]    PR1
0x0104       [2]    T1CON
0x0106       [2]    TMR2
0x010C       [2]    PR2
0x010E       [2]    PR3
0x0110       [2]    T2CON
0x0112       [2]    T3CON
0x0220       [2]    U1MODE
0x0222       [2]    U1STA
0x0224       [2]    U1TXREG
0x0226       [2]    U1RXREG
0x0228       [2]    U1BRG
0x02C2       [2]    PORTA
0x02C8       [2]    TRISB
0x0300       [2]    ADC1BUF0
0x0320       [2]    AD1CON1
0x0322       [2]    AD1CON2
0x0324       [2]    AD1CON3
0x0326       [2]    AD1CHS123
0x0328       [2]    AD1CHS0
0x032C       [2]    AD1PCFGL
0x0330       [2]    AD1CSSL
0x0746       [2]    PLLFBD
0x0014       [2]    FARG_UART1_Write__data
0x0014       [2]    FARG_Ow_Write_port
0x0016       [2]    FARG_Ow_Write_pin
0x0018       [1]    FARG_Ow_Write_data_
0x0014       [2]    FARG_Ow_Reset_port
0x0016       [2]    FARG_Ow_Reset_pin
0x0014       [2]    FARG_Ow_Read_port
0x0016       [2]    FARG_Ow_Read_pin
0x0014       [1]    FARG_EnviarTramaRS485_puertoUART
0x0016       [2]    FARG_EnviarTramaRS485_cabecera
0x0018       [2]    FARG_EnviarTramaRS485_payload
0x0014       [2]    FARG_GenerarTramaPrueba_numDatosPrueba
0x0016       [2]    FARG_GenerarTramaPrueba_cabeceraPrueba
0x0014       [4]    FARG_UART1_Init_baud_rate
0x0014       [2]    FARG_EnviarTramaInt_cabecera
0x0016       [2]    FARG_EnviarTramaInt_temperatura
0x0014       [2]    FARG_ProcesarSolicitud_cabeceraSolicitud
0x0016       [2]    FARG_ProcesarSolicitud_payloadSolicitud
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x13DE      [84]    _h
0x1432       [2]    ?ICS_Mmed
0x1434      [10]    ?ICS_tramaPruebaRS485
0x143E       [2]    ?ICS_YY
0x1440       [4]    ?ICS_y0
//** Label List: ** 
//----------------------------------------------
  L_EnviarTramaRS4850
  L_EnviarTramaRS4851
  L_EnviarTramaRS4852
  L_EnviarTramaRS4853
  L_EnviarTramaRS4854
  L_EnviarTramaRS4855
  L_main6
  L_main7
  L_main8
  L_ConfiguracionPrincipal9
  L_ProcesarSolicitud11
  L_ProcesarSolicitud12
  L_ProcesarSolicitud13
  L_ProcesarSolicitud14
  L_ProcesarSolicitud15
  L_ProcesarSolicitud16
  L_ProcesarSolicitud17
  L_ProcesarSolicitud18
  L_ProcesarSolicitud19
  L_ProcesarSolicitud20
  L_ProcesarSolicitud21
  L_ProcesarSolicitud22
  L_ProcesarSolicitud23
  L_ProcesarSolicitud24
  L_ProcesarSolicitud25
  L_ProcesarSolicitud26
  L_ProcesarSolicitud27
  L_ProcesarSolicitud28
  L_ProcesarSolicitud29
  L_ProcesarSolicitud30
  L_ProcesarSolicitud32
  L_ProcesarSolicitud33
  L_ProcesarSolicitud34
  L_ProcesarSolicitud35
  L_ProcesarSolicitud36
  L_GenerarTramaPrueba37
  L_GenerarTramaPrueba38
  L_GenerarTramaPrueba39
  L_GenerarTramaPrueba40
  L_LeerDS18B2041
  L_LeerDS18B2043
  L_ProbarEnvioTrama45
  L_ProbarEnvioTrama46
  L_ProbarEnvioTrama47
  L_ProbarEnvioTrama49
  L_ProbarMuestreo51
  L_ProbarMuestreo52
  L_CapturarMuestras53
  L_CapturarMuestras54
  L_ProcesarMuestras55
  L_ProcesarMuestras56
  L_ProcesarMuestras57
  L_ProcesarMuestras58
  L_ProcesarMuestras59
  L_ProcesarMuestras60
  L_ProcesarMuestras61
  L_ProcesarMuestras62
  L_ProcesarMuestras63
  L_ProcesarMuestras64
  L_ProcesarMuestras65
  L_ProcesarMuestras66
  L_ProcesarMuestras67
  L_ProcesarMuestras68
  L_ProcesarMuestras69
  L_ProcesarMuestras70
  L_CalcularTOF71
  L_CalcularTOF72
  L_CalcularTOF73
  L_EnviarTramaInt74
  L_EnviarTramaInt75
  L_EnviarTramaInt76
  L_Timer1Interrupt77
  L_Timer1Interrupt78
  L_Timer1Interrupt79
  L_Timer1Interrupt80
  L_Timer2Interrupt81
  L_Timer2Interrupt82
  L_Timer2Interrupt83
  L_UART1Interrupt84
  L_UART1Interrupt85
  L_UART1Interrupt86
  L_UART1Interrupt87
  L_UART1Interrupt88
  L_UART1Interrupt89
  L_UART1Interrupt90
  L_UART1Interrupt91
  L_UART1Interrupt92
  L_UART1Interrupt93
  L_UART1Interrupt94
  L_UART1Interrupt95
  L_UART1Interrupt96
  L_UART1Interrupt97
  L_UART1Interrupt98
  L_UART1Interrupt99
  L_UART1Interrupt100
  L_UART1Interrupt101
  L_UART1Interrupt102
  L__GenerarTramaPrueba104
  L__UART1Interrupt105
  L__UART1Interrupt106
  L__UART1Interrupt107
  L__UART1Interrupt108
  L__UART1Interrupt109
  L__UART1Interrupt110
  L__UART1Interrupt111
  L__UART1Interrupt112
  L__UART1Interrupt113
  L__UART1Interrupt114
  L__UART1Interrupt115
  L__UART1Interrupt116
  L__UART1Interrupt117
  L_end_EnviarTramaRS485
  _EnviarTramaRS485
  L__EnviarTramaRS485119
  L__EnviarTramaRS485120
  L__EnviarTramaRS485121
  L_end_main
  _main
  L__main123
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_ProcesarSolicitud
  _ProcesarSolicitud
  L__ProcesarSolicitud127
  L__ProcesarSolicitud128
  L__ProcesarSolicitud129
  L__ProcesarSolicitud130
  L__ProcesarSolicitud131
  L__ProcesarSolicitud132
  L__ProcesarSolicitud133
  L__ProcesarSolicitud134
  L__ProcesarSolicitud135
  L__ProcesarSolicitud136
  L__ProcesarSolicitud137
  L__ProcesarSolicitud138
  L__ProcesarSolicitud139
  L_end_GenerarTramaPrueba
  _GenerarTramaPrueba
  L__GenerarTramaPrueba141
  L__GenerarTramaPrueba142
  L_end_LeerDS18B20
  _LeerDS18B20
  L_end_ProbarEnvioTrama
  _ProbarEnvioTrama
  L__ProbarEnvioTrama145
  L_end_ProbarMuestreo
  _ProbarMuestreo
  L__ProbarMuestreo147
  L_end_CapturarMuestras
  _CapturarMuestras
  L__CapturarMuestras149
  L_end_ProcesarMuestras
  _ProcesarMuestras
  L__ProcesarMuestras151
  L__ProcesarMuestras152
  L__ProcesarMuestras153
  L__ProcesarMuestras154
  L__ProcesarMuestras155
  L__ProcesarMuestras156
  L__ProcesarMuestras157
  L__ProcesarMuestras158
  L_end_CalcularTOF
  _CalcularTOF
  L__CalcularTOF160
  L__CalcularTOF161
  L__CalcularTOF162
  L_end_EnviarTramaInt
  _EnviarTramaInt
  L__EnviarTramaInt164
  L_end_Timer1Interrupt
  _Timer1Interrupt
  L__Timer1Interrupt166
  L_end_Timer2Interrupt
  _Timer2Interrupt
  L__Timer2Interrupt168
  L__Timer2Interrupt169
  L_end_UART1Interrupt
  _UART1Interrupt
  L__UART1Interrupt171
  L__UART1Interrupt172
  L__UART1Interrupt173
  L__UART1Interrupt174
  L__UART1Interrupt175
  L__UART1Interrupt176
  L__UART1Interrupt177
  L__UART1Interrupt178
  L__UART1Interrupt179
  L__UART1Interrupt180
  L__UART1Interrupt181
  L__UART1Interrupt182
  L__UART1Interrupt183
  Delay_Cyc_loop
  Delay_Cyc_rez
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_VDelay_ms3
  L_VDelay_ms4
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_VDelay_Advanced_ms7
  L_VDelay_Advanced_ms8
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_Delay_1us11
  L_Delay_10us13
  L_Delay_22us15
  L_Delay_50us17
  L_Delay_80us19
  L_Delay_500us21
  L_Delay_5500us23
  L_Delay_1ms25
  L_Delay_5ms27
  L_Delay_8ms29
  L_Delay_10ms31
  L_Delay_100ms33
  L_Delay_1sec35
  L_end_Get_Fosc_kHz
  _Get_Fosc_kHz
  L_end_Get_Fosc_Per_Cyc
  _Get_Fosc_Per_Cyc
  L_end_Delay_Cyc
  _Delay_Cyc
  L_end_Delay_Cyc_Long
  _Delay_Cyc_Long
  L_end_VDelay_ms
  _VDelay_ms
  L_end_VDelay_Advanced_ms
  _VDelay_Advanced_ms
  L_end_Delay_W0
  _Delay_W0
  L_end_Delay_1us
  _Delay_1us
  L_end_Delay_10us
  _Delay_10us
  L_end_Delay_22us
  _Delay_22us
  L_end_Delay_50us
  _Delay_50us
  L_end_Delay_80us
  _Delay_80us
  L_end_Delay_500us
  _Delay_500us
  L_end_Delay_5500us
  _Delay_5500us
  L_end_Delay_1ms
  _Delay_1ms
  L_end_Delay_5ms
  _Delay_5ms
  L_end_Delay_8ms
  _Delay_8ms
  L_end_Delay_10ms
  _Delay_10ms
  L_end_Delay_100ms
  _Delay_100ms
  L_end_Delay_1sec
  _Delay_1sec
  Divide_32x32___testsus
  the_end_Divide_32x32
  Divide_32x32___divsi3
  Divide_32x32___udivsi3
  Divide_32x32_divtestb
  Divide_32x32_calcquot
  Divide_32x32_returnq
  Divide_32x32_nextbit
  Divide_32x32_iterate
  Modulus_32x32___testsus
  the_end_Modulus_32x32
  Modulus_32x32___modsi3
  Modulus_32x32___umodsi3
  Modulus_32x32_modtestb
  Modulus_32x32_calcrem
  Modulus_32x32_exitr
  Modulus_32x32___udivsi3
  Modulus_32x32_nextbit
  Modulus_32x32_iterate
  L_end__Multiply_32x32
  __Multiply_32x32
  L_end__Divide_32x32
  __Divide_32x32
  L_end__Modulus_32x32
  __Modulus_32x32
  Float__fpack
  the_end_Float__fpack
  Float_notsubnormal
  Float_zerosig
  Float_subnormal
  Float_packupandgo
  Float_overflow
  LL_intro_Long2Float
  the_end__Long2Float
  Longint2Float__floatsisf
  Longword2Float__floatuisf
  Long2Float_notspecial
  Long2Float_return0
  Longint2Float_negative
  Long2Float_fixshift
  Long2Float_round
  Long2Float_shiftleft
  Long2Float_shiftright
  Long2Float__fpack
  Long2Float_notsubnormal
  Long2Float_zerosig
  Long2Float_subnormal
  Long2Float_packupandgo
  Long2Float_overflow
  Longlong2Float_floatdisf
  the_end__LongLong2Float
  Longlong2Float_negative
  Longlong2Float_notspecial
  Longlong2Float_return0
  Longlong2Float_fixshift
  Longlong2Float_round
  Longlong2Float_shiftleft
  Longlong2Float_shiftright
  Float2Longword_fixunssfsi
  the_end__Float2Longword
  Float2Longword_funpack
  Float2Longword_returnzero
  Float2Longword_exit
  Float2Longword_shiftright
  Float2Longword_shiftleft
  Float2Longword_shiftrightloop
  Float2Longword_zeroorsub
  Float2Longword_nanorinf
  Float2Longword_finitereturn
  Float2Longword_infinite
  Float2Longword_subnormal
  Float2Longword_normalize
  Float2Longint__fixsfsi
  the_end__Float2Longint
  Float2Longint__funpack
  Float2Longint_setsign
  Float2Longint_shiftright
  Float2Longint_shiftleft
  Float2Longint_exit
  Float2Longint_shiftrightloop
  Float2Longint_zeroorsub
  Float2Longint_nanorinf
  Float2Longint_finitereturn
  Float2Longint_infinite
  Float2Longint_subnormal
  Float2Longint_normalize
  AddSubFP__addsf3
  the_end__AddSub_FP
  AddSubFP__funpack2
  AddSubFP__fPropagateNaN
  AddSubFP_aisinfinite
  AddSubFP_checkspecialb
  AddSubFP_return2_3
  AddSubFP_getsign
  AddSubFP_gotsign
  AddSubFP_expcanonical
  AddSubFP_nonegate
  AddSubFP_aligniter
  AddSubFP_signoff
  AddSubFP_align
  AddSubFP_aligned
  AddSubFP_normalizesum
  AddSubFP_checknormal
  AddSubFP_round
  AddSubFP_discardguard
  AddSubFP_underflow
  AddSubFP_normalizeloop
  AddSubFP_normalizeexit
  AddSubFP_normalizetest
  AddSubFP__fpack
  AddSubFP__fbopExit
  AddSubFP_return8_3
  AddSubFP__fbopReturnNaN
  AddSubFP__funpack
  AddSubFP_return0_1
  AddSubFP_return8_1
  AddSubFP_notsubnormal_1
  AddSubFP_zerosig
  AddSubFP_subnormal_1
  AddSubFP_packupandgo
  AddSubFP_overflow
  AddSubFP_zeroorsub
  AddSubFP_nanorinf
  AddSubFP_finitereturn
  AddSubFP_infinite
  AddSubFP_subnormal_2
  AddSubFP_normalize
  MulFP___mulsf3
  the_end__Mul_FP
  MulFP__funpack2
  MulFP__fPropagateNaN
  MulFP_aisinfinite
  MulFP_bisinfinite
  MulFP_return8_1
  MulFP_return2_1
  MulFP_formsticky
  MulFP_formRandSig
  MulFP__fpack
  MulFP_return0_1
  MulFP__fbopExit
  MulFP__fbopReturnNaN
  MulFP__funpack
  MulFP_return0_2
  MulFP_return8_2
  MulFP_notsubnormal
  MulFP_zerosig
  MulFP_subnormal1
  MulFP_packupandgo
  MulFP_overflow
  MulFP_zeroorsub
  MulFP_nanorinf
  MulFP_finitereturn
  MulFP_infinite
  MulFP_subnormal2
  MulFP_normalize
  DivFP___divsf3
  the_end__Div_FP
  DivFP__funpack2
  DivFP__fPropagateNaN
  DivFP_aisinfinite
  DivFP_returnZero
  DivFP_aiszero
  DivFP_returnInf
  DivFP_finitenonzero
  DivFP_diventry
  DivFP_divnext
  DivFP_divdone
  DivFP_divloop
  DivFP_stickyok
  DivFP_guardused
  DivFP__fpack
  DivFP_return0_1
  DivFP__fbopExit
  DivFP__fbopReturnNaN
  DivFP_return8_1
  DivFP_return2_1
  DivFP__funpack
  DivFP_return0
  DivFP_return8
  DivFP_notsubnormal
  DivFP_zerosig
  DivFP_subnormal
  DivFP_packupandgo
  DivFP_overfloW
  DivFP_zeroorsub
  DivFP_nanorinf
  DivFP_finitereturn
  DivFP_infinite
  DivFP_subnormal2
  DivFP_normalize
  CompareFp__fcompare
  the_end__Compare_Fp
  CompareFp__funpack2
  CompareFp_exit
  CompareFp_comparemag
  CompareFp_returnEqual
  CompareFp_adjust
  CompareFp__funpack
  CompareFp_zeroorsub
  CompareFp_nanorinf
  CompareFp_finitereturn
  CompareFp_infinite
  CompareFp_subnormal
  CompareFp_normalize
  L_end_Float_fpack
  _Float_fpack
  L_end__Long2Float
  __Long2Float
  L_end__LongLong2Float
  __LongLong2Float
  L_end__Float2Longword
  __Float2Longword
  L_end__Float2Longint
  __Float2Longint
  L_end__AddSub_FP
  __AddSub_FP
  L_end__Sub_FP
  __Sub_FP
  L_end__Mul_FP
  __Mul_FP
  L_end__Div_FP
  __Div_FP
  L_end__Compare_Fp
  __Compare_Fp
  L_end__Compare_Le_Fp
  __Compare_Le_Fp
  L_end__Compare_Ge_Fp
  __Compare_Ge_Fp
  L_Ow_Read0
  L_Ow_Read1
  L_Ow_Read2
  L_Ow_Read3
  L_Ow_Write4
  L_Ow_Write5
  L_Ow_Write6
  L_Ow_Write7
  L__Ow_Read8
  L_end_Ow_Reset
  _Ow_Reset
  L__Ow_Reset10
  L_end_Ow_Read
  _Ow_Read
  L__Ow_Read12
  L__Ow_Read13
  L_end_Ow_Write
  _Ow_Write
  L__Ow_Write15
  L__Ow_Write16
  L_UART1_Write0
  L_UART1_Write1
  L_UART1_Write_Text2
  L_UART1_Write_Text3
  L_UART1_Read_Text4
  L_UART1_Read_Text5
  L_UART1_Read_Text6
  L_UART1_Read_Text7
  L_UART1_Read_Text8
  L_UART1_Read_Text9
  L_UART1_Read_Text10
  L_UART1_Read_Text11
  L_UART1_Read_Text12
  L_UART1_Init13
  L_UART1_Init14
  L_UART1_Init15
  L_UART1_Init_Advanced16
  L_UART1_Init_Advanced17
  L_UART1_Init_Advanced18
  L_UART1_Init_Advanced19
  L_UART1_Init_Advanced20
  L_UART1_Init_Advanced21
  L_UART1_Init_Advanced22
  L_UART1_Init_Advanced23
  L_UART1_Init_Advanced24
  L_UART_Write_Text25
  L_UART_Write_Text26
  L_UART_Read_Text27
  L_UART_Read_Text28
  L_UART_Read_Text29
  L_UART_Read_Text30
  L_UART_Read_Text31
  L_UART_Read_Text32
  L_UART_Read_Text33
  L_UART_Read_Text34
  L_UART_Read_Text35
  L__UART1_Read_Text36
  L__UART1_Init37
  L__UART1_Init38
  L__UART1_Init39
  L_end_UART1_Write
  _UART1_Write
  L_end_UART1_Write_Text
  _UART1_Write_Text
  L__UART1_Write_Text42
  L_end_UART1_Data_Ready
  _UART1_Data_Ready
  L_end_UART1_Read
  _UART1_Read
  L_end_UART1_Read_Text
  _UART1_Read_Text
  L__UART1_Read_Text46
  L__UART1_Read_Text47
  L__UART1_Read_Text48
  L__UART1_Read_Text49
  L__UART1_Read_Text50
  L__UART1_Read_Text51
  L_end_UART1_Tx_Idle
  _UART1_Tx_Idle
  L_end_UART1_Init
  _UART1_Init
  L__UART1_Init54
  L__UART1_Init55
  L__UART1_Init56
  L__UART1_Init57
  L__UART1_Init58
  L__UART1_Init59
  L__UART1_Init60
  L_end_UART1_Init_Advanced
  _UART1_Init_Advanced
  L__UART1_Init_Advanced62
  L__UART1_Init_Advanced63
  L__UART1_Init_Advanced64
  L__UART1_Init_Advanced65
  L__UART1_Init_Advanced66
  L__UART1_Init_Advanced67
  L__UART1_Init_Advanced68
  L__UART1_Init_Advanced69
  L__UART1_Init_Advanced70
  L__UART1_Init_Advanced71
  L__UART1_Init_Advanced72
  L__UART1_Init_Advanced73
  L__UART1_Init_Advanced74
  L__UART1_Init_Advanced75
  L__UART1_Init_Advanced76
  L_end_UART_Set_Active
  _UART_Set_Active
  L_end_UART_Write
  _UART_Write
  L_end_UART_Write_Text
  _UART_Write_Text
  L__UART_Write_Text80
  L_end_UART_Read
  _UART_Read
  L_end_UART_Data_Ready
  _UART_Data_Ready
  L_end_UART_Read_Text
  _UART_Read_Text
  L__UART_Read_Text84
  L__UART_Read_Text85
  L__UART_Read_Text86
  L__UART_Read_Text87
  L__UART_Read_Text88
  L__UART_Read_Text89
  L_end_UART_Tx_Idle
  _UART_Tx_Idle
  _VCT_L09
  _VCT_L11
  _VCT_L10
  _VCT_L14
  _VCT_L13
  _VCT_L12
  _VCT_L17
  _VCT_L16
  _VCT_L15
  _VCT_L18
  _VCT_L19
  _VCT_L23
  _VCT_L20
  _VCT_L22
  _VCT_L21
  _VCT_L27
  _VCT_L24
  _VCT_L26
  _VCT_L25
  _VCT_L28
  _VCT_L29
  _VCT_L30
  _VCT_L31
  L_Vector_Set4
  _VCT_L32
  L_end_Vector_Add
  _Vector_Add
  L_end_Vector_Convolve
  _Vector_Convolve
  L_end_Vector_Correlate
  _Vector_Correlate
  L_end_Vector_Dot
  _Vector_Dot
  L_end_Vector_Max
  _Vector_Max
  L_end_Vector_Min
  _Vector_Min
  L_end_Vector_Multiply
  _Vector_Multiply
  L_end_Vector_Negate
  _Vector_Negate
  L_end_VectorPower
  _VectorPower
  L_end_VectorScale
  _VectorScale
  L_end_Vector_Set
  _Vector_Set
  L__Vector_Set16
  L_end_Vector_Subtract
  _Vector_Subtract
  L_EnviarTramaRS4850
  L_EnviarTramaRS4851
  L_EnviarTramaRS4852
  L_EnviarTramaRS4853
  L_EnviarTramaRS4854
  L_EnviarTramaRS4855
  L_main6
  L_main7
  L_main8
  L_ConfiguracionPrincipal9
  L_ProcesarSolicitud11
  L_ProcesarSolicitud12
  L_ProcesarSolicitud13
  L_ProcesarSolicitud14
  L_ProcesarSolicitud15
  L_ProcesarSolicitud16
  L_ProcesarSolicitud17
  L_ProcesarSolicitud18
  L_ProcesarSolicitud19
  L_ProcesarSolicitud20
  L_ProcesarSolicitud21
  L_ProcesarSolicitud22
  L_ProcesarSolicitud23
  L_ProcesarSolicitud24
  L_ProcesarSolicitud25
  L_ProcesarSolicitud26
  L_ProcesarSolicitud27
  L_ProcesarSolicitud28
  L_ProcesarSolicitud29
  L_ProcesarSolicitud30
  L_ProcesarSolicitud32
  L_ProcesarSolicitud33
  L_ProcesarSolicitud34
  L_ProcesarSolicitud35
  L_ProcesarSolicitud36
  L_GenerarTramaPrueba37
  L_GenerarTramaPrueba38
  L_GenerarTramaPrueba39
  L_GenerarTramaPrueba40
  L_LeerDS18B2041
  L_LeerDS18B2043
  L_ProbarEnvioTrama45
  L_ProbarEnvioTrama46
  L_ProbarEnvioTrama47
  L_ProbarEnvioTrama49
  L_ProbarMuestreo51
  L_ProbarMuestreo52
  L_CapturarMuestras53
  L_CapturarMuestras54
  L_ProcesarMuestras55
  L_ProcesarMuestras56
  L_ProcesarMuestras57
  L_ProcesarMuestras58
  L_ProcesarMuestras59
  L_ProcesarMuestras60
  L_ProcesarMuestras61
  L_ProcesarMuestras62
  L_ProcesarMuestras63
  L_ProcesarMuestras64
  L_ProcesarMuestras65
  L_ProcesarMuestras66
  L_ProcesarMuestras67
  L_ProcesarMuestras68
  L_ProcesarMuestras69
  L_ProcesarMuestras70
  L_CalcularTOF71
  L_CalcularTOF72
  L_CalcularTOF73
  L_EnviarTramaInt74
  L_EnviarTramaInt75
  L_EnviarTramaInt76
  L_Timer1Interrupt77
  L_Timer1Interrupt78
  L_Timer1Interrupt79
  L_Timer1Interrupt80
  L_Timer2Interrupt81
  L_Timer2Interrupt82
  L_Timer2Interrupt83
  L_UART1Interrupt84
  L_UART1Interrupt85
  L_UART1Interrupt86
  L_UART1Interrupt87
  L_UART1Interrupt88
  L_UART1Interrupt89
  L_UART1Interrupt90
  L_UART1Interrupt91
  L_UART1Interrupt92
  L_UART1Interrupt93
  L_UART1Interrupt94
  L_UART1Interrupt95
  L_UART1Interrupt96
  L_UART1Interrupt97
  L_UART1Interrupt98
  L_UART1Interrupt99
  L_UART1Interrupt100
  L_UART1Interrupt101
  L_UART1Interrupt102
  L__GenerarTramaPrueba104
  L__UART1Interrupt105
  L__UART1Interrupt106
  L__UART1Interrupt107
  L__UART1Interrupt108
  L__UART1Interrupt109
  L__UART1Interrupt110
  L__UART1Interrupt111
  L__UART1Interrupt112
  L__UART1Interrupt113
  L__UART1Interrupt114
  L__UART1Interrupt115
  L__UART1Interrupt116
  L__UART1Interrupt117
  L_end_EnviarTramaRS485
  _EnviarTramaRS485
  L__EnviarTramaRS485119
  L__EnviarTramaRS485120
  L__EnviarTramaRS485121
  L_end_main
  _main
  L__main123
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_ProcesarSolicitud
  _ProcesarSolicitud
  L__ProcesarSolicitud127
  L__ProcesarSolicitud128
  L__ProcesarSolicitud129
  L__ProcesarSolicitud130
  L__ProcesarSolicitud131
  L__ProcesarSolicitud132
  L__ProcesarSolicitud133
  L__ProcesarSolicitud134
  L__ProcesarSolicitud135
  L__ProcesarSolicitud136
  L__ProcesarSolicitud137
  L__ProcesarSolicitud138
  L__ProcesarSolicitud139
  L_end_GenerarTramaPrueba
  _GenerarTramaPrueba
  L__GenerarTramaPrueba141
  L__GenerarTramaPrueba142
  L_end_LeerDS18B20
  _LeerDS18B20
  L_end_ProbarEnvioTrama
  _ProbarEnvioTrama
  L__ProbarEnvioTrama145
  L_end_ProbarMuestreo
  _ProbarMuestreo
  L__ProbarMuestreo147
  L_end_CapturarMuestras
  _CapturarMuestras
  L__CapturarMuestras149
  L_end_ProcesarMuestras
  _ProcesarMuestras
  L__ProcesarMuestras151
  L__ProcesarMuestras152
  L__ProcesarMuestras153
  L__ProcesarMuestras154
  L__ProcesarMuestras155
  L__ProcesarMuestras156
  L__ProcesarMuestras157
  L__ProcesarMuestras158
  L_end_CalcularTOF
  _CalcularTOF
  L__CalcularTOF160
  L__CalcularTOF161
  L__CalcularTOF162
  L_end_EnviarTramaInt
  _EnviarTramaInt
  L__EnviarTramaInt164
  L_end_Timer1Interrupt
  _Timer1Interrupt
  L__Timer1Interrupt166
  L_end_Timer2Interrupt
  _Timer2Interrupt
  L__Timer2Interrupt168
  L__Timer2Interrupt169
  L_end_UART1Interrupt
  _UART1Interrupt
  L__UART1Interrupt171
  L__UART1Interrupt172
  L__UART1Interrupt173
  L__UART1Interrupt174
  L__UART1Interrupt175
  L__UART1Interrupt176
  L__UART1Interrupt177
  L__UART1Interrupt178
  L__UART1Interrupt179
  L__UART1Interrupt180
  L__UART1Interrupt181
  L__UART1Interrupt182
  L__UART1Interrupt183
  L_UART1_Write0
  L_UART1_Write1
  L_UART1_Write_Text2
  L_UART1_Write_Text3
  L_UART1_Read_Text4
  L_UART1_Read_Text5
  L_UART1_Read_Text6
  L_UART1_Read_Text7
  L_UART1_Read_Text8
  L_UART1_Read_Text9
  L_UART1_Read_Text10
  L_UART1_Read_Text11
  L_UART1_Read_Text12
  L_UART1_Init13
  L_UART1_Init14
  L_UART1_Init15
  L_UART1_Init_Advanced16
  L_UART1_Init_Advanced17
  L_UART1_Init_Advanced18
  L_UART1_Init_Advanced19
  L_UART1_Init_Advanced20
  L_UART1_Init_Advanced21
  L_UART1_Init_Advanced22
  L_UART1_Init_Advanced23
  L_UART1_Init_Advanced24
  L_UART_Write_Text25
  L_UART_Write_Text26
  L_UART_Read_Text27
  L_UART_Read_Text28
  L_UART_Read_Text29
  L_UART_Read_Text30
  L_UART_Read_Text31
  L_UART_Read_Text32
  L_UART_Read_Text33
  L_UART_Read_Text34
  L_UART_Read_Text35
  L__UART1_Read_Text36
  L__UART1_Init37
  L__UART1_Init38
  L__UART1_Init39
  L_end_UART1_Write
  _UART1_Write
  L_end_UART1_Write_Text
  _UART1_Write_Text
  L__UART1_Write_Text42
  L_end_UART1_Data_Ready
  _UART1_Data_Ready
  L_end_UART1_Read
  _UART1_Read
  L_end_UART1_Read_Text
  _UART1_Read_Text
  L__UART1_Read_Text46
  L__UART1_Read_Text47
  L__UART1_Read_Text48
  L__UART1_Read_Text49
  L__UART1_Read_Text50
  L__UART1_Read_Text51
  L_end_UART1_Tx_Idle
  _UART1_Tx_Idle
  L_end_UART1_Init
  _UART1_Init
  L__UART1_Init54
  L__UART1_Init55
  L__UART1_Init56
  L__UART1_Init57
  L__UART1_Init58
  L__UART1_Init59
  L__UART1_Init60
  L_end_UART1_Init_Advanced
  _UART1_Init_Advanced
  L__UART1_Init_Advanced62
  L__UART1_Init_Advanced63
  L__UART1_Init_Advanced64
  L__UART1_Init_Advanced65
  L__UART1_Init_Advanced66
  L__UART1_Init_Advanced67
  L__UART1_Init_Advanced68
  L__UART1_Init_Advanced69
  L__UART1_Init_Advanced70
  L__UART1_Init_Advanced71
  L__UART1_Init_Advanced72
  L__UART1_Init_Advanced73
  L__UART1_Init_Advanced74
  L__UART1_Init_Advanced75
  L__UART1_Init_Advanced76
  L_end_UART_Set_Active
  _UART_Set_Active
  L_end_UART_Write
  _UART_Write
  L_end_UART_Write_Text
  _UART_Write_Text
  L__UART_Write_Text80
  L_end_UART_Read
  _UART_Read
  L_end_UART_Data_Ready
  _UART_Data_Ready
  L_end_UART_Read_Text
  _UART_Read_Text
  L__UART_Read_Text84
  L__UART_Read_Text85
  L__UART_Read_Text86
  L__UART_Read_Text87
  L__UART_Read_Text88
  L__UART_Read_Text89
  L_end_UART_Tx_Idle
  _UART_Tx_Idle
  L_EnviarTramaRS4850
  L_EnviarTramaRS4851
  L_EnviarTramaRS4852
  L_EnviarTramaRS4853
  L_EnviarTramaRS4854
  L_EnviarTramaRS4855
  L_main6
  L_main7
  L_main8
  L_ConfiguracionPrincipal9
  L_ProcesarSolicitud11
  L_ProcesarSolicitud12
  L_ProcesarSolicitud13
  L_ProcesarSolicitud14
  L_ProcesarSolicitud15
  L_ProcesarSolicitud16
  L_ProcesarSolicitud17
  L_ProcesarSolicitud18
  L_ProcesarSolicitud19
  L_ProcesarSolicitud20
  L_ProcesarSolicitud21
  L_ProcesarSolicitud22
  L_ProcesarSolicitud23
  L_ProcesarSolicitud24
  L_ProcesarSolicitud25
  L_ProcesarSolicitud26
  L_ProcesarSolicitud27
  L_ProcesarSolicitud28
  L_ProcesarSolicitud29
  L_ProcesarSolicitud30
  L_ProcesarSolicitud32
  L_ProcesarSolicitud33
  L_ProcesarSolicitud34
  L_ProcesarSolicitud35
  L_ProcesarSolicitud36
  L_GenerarTramaPrueba37
  L_GenerarTramaPrueba38
  L_GenerarTramaPrueba39
  L_GenerarTramaPrueba40
  L_LeerDS18B2041
  L_LeerDS18B2043
  L_ProbarEnvioTrama45
  L_ProbarEnvioTrama46
  L_ProbarEnvioTrama47
  L_ProbarEnvioTrama49
  L_ProbarMuestreo51
  L_ProbarMuestreo52
  L_CapturarMuestras53
  L_CapturarMuestras54
  L_ProcesarMuestras55
  L_ProcesarMuestras56
  L_ProcesarMuestras57
  L_ProcesarMuestras58
  L_ProcesarMuestras59
  L_ProcesarMuestras60
  L_ProcesarMuestras61
  L_ProcesarMuestras62
  L_ProcesarMuestras63
  L_ProcesarMuestras64
  L_ProcesarMuestras65
  L_ProcesarMuestras66
  L_ProcesarMuestras67
  L_ProcesarMuestras68
  L_ProcesarMuestras69
  L_ProcesarMuestras70
  L_CalcularTOF71
  L_CalcularTOF72
  L_CalcularTOF73
  L_EnviarTramaInt74
  L_EnviarTramaInt75
  L_EnviarTramaInt76
  L_Timer1Interrupt77
  L_Timer1Interrupt78
  L_Timer1Interrupt79
  L_Timer1Interrupt80
  L_Timer2Interrupt81
  L_Timer2Interrupt82
  L_Timer2Interrupt83
  L_UART1Interrupt84
  L_UART1Interrupt85
  L_UART1Interrupt86
  L_UART1Interrupt87
  L_UART1Interrupt88
  L_UART1Interrupt89
  L_UART1Interrupt90
  L_UART1Interrupt91
  L_UART1Interrupt92
  L_UART1Interrupt93
  L_UART1Interrupt94
  L_UART1Interrupt95
  L_UART1Interrupt96
  L_UART1Interrupt97
  L_UART1Interrupt98
  L_UART1Interrupt99
  L_UART1Interrupt100
  L_UART1Interrupt101
  L_UART1Interrupt102
  L__GenerarTramaPrueba104
  L__UART1Interrupt105
  L__UART1Interrupt106
  L__UART1Interrupt107
  L__UART1Interrupt108
  L__UART1Interrupt109
  L__UART1Interrupt110
  L__UART1Interrupt111
  L__UART1Interrupt112
  L__UART1Interrupt113
  L__UART1Interrupt114
  L__UART1Interrupt115
  L__UART1Interrupt116
  L__UART1Interrupt117
  L_end_EnviarTramaRS485
  _EnviarTramaRS485
  L__EnviarTramaRS485119
  L__EnviarTramaRS485120
  L__EnviarTramaRS485121
  L_end_main
  _main
  L__main123
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_ProcesarSolicitud
  _ProcesarSolicitud
  L__ProcesarSolicitud127
  L__ProcesarSolicitud128
  L__ProcesarSolicitud129
  L__ProcesarSolicitud130
  L__ProcesarSolicitud131
  L__ProcesarSolicitud132
  L__ProcesarSolicitud133
  L__ProcesarSolicitud134
  L__ProcesarSolicitud135
  L__ProcesarSolicitud136
  L__ProcesarSolicitud137
  L__ProcesarSolicitud138
  L__ProcesarSolicitud139
  L_end_GenerarTramaPrueba
  _GenerarTramaPrueba
  L__GenerarTramaPrueba141
  L__GenerarTramaPrueba142
  L_end_LeerDS18B20
  _LeerDS18B20
  L_end_ProbarEnvioTrama
  _ProbarEnvioTrama
  L__ProbarEnvioTrama145
  L_end_ProbarMuestreo
  _ProbarMuestreo
  L__ProbarMuestreo147
  L_end_CapturarMuestras
  _CapturarMuestras
  L__CapturarMuestras149
  L_end_ProcesarMuestras
  _ProcesarMuestras
  L__ProcesarMuestras151
  L__ProcesarMuestras152
  L__ProcesarMuestras153
  L__ProcesarMuestras154
  L__ProcesarMuestras155
  L__ProcesarMuestras156
  L__ProcesarMuestras157
  L__ProcesarMuestras158
  L_end_CalcularTOF
  _CalcularTOF
  L__CalcularTOF160
  L__CalcularTOF161
  L__CalcularTOF162
  L_end_EnviarTramaInt
  _EnviarTramaInt
  L__EnviarTramaInt164
  L_end_Timer1Interrupt
  _Timer1Interrupt
  L__Timer1Interrupt166
  L_end_Timer2Interrupt
  _Timer2Interrupt
  L__Timer2Interrupt168
  L__Timer2Interrupt169
  L_end_UART1Interrupt
  _UART1Interrupt
  L__UART1Interrupt171
  L__UART1Interrupt172
  L__UART1Interrupt173
  L__UART1Interrupt174
  L__UART1Interrupt175
  L__UART1Interrupt176
  L__UART1Interrupt177
  L__UART1Interrupt178
  L__UART1Interrupt179
  L__UART1Interrupt180
  L__UART1Interrupt181
  L__UART1Interrupt182
  L__UART1Interrupt183
  L_EnviarTramaRS4850
  L_EnviarTramaRS4851
  L_EnviarTramaRS4852
  L_EnviarTramaRS4853
  L_EnviarTramaRS4854
  L_EnviarTramaRS4855
  L_main6
  L_main7
  L_main8
  L_ConfiguracionPrincipal9
  L_ProcesarSolicitud11
  L_ProcesarSolicitud12
  L_ProcesarSolicitud13
  L_ProcesarSolicitud14
  L_ProcesarSolicitud15
  L_ProcesarSolicitud16
  L_ProcesarSolicitud17
  L_ProcesarSolicitud18
  L_ProcesarSolicitud19
  L_ProcesarSolicitud20
  L_ProcesarSolicitud21
  L_ProcesarSolicitud22
  L_ProcesarSolicitud23
  L_ProcesarSolicitud24
  L_ProcesarSolicitud25
  L_ProcesarSolicitud26
  L_ProcesarSolicitud27
  L_ProcesarSolicitud28
  L_ProcesarSolicitud29
  L_ProcesarSolicitud30
  L_ProcesarSolicitud32
  L_ProcesarSolicitud33
  L_ProcesarSolicitud34
  L_ProcesarSolicitud35
  L_ProcesarSolicitud36
  L_GenerarTramaPrueba37
  L_GenerarTramaPrueba38
  L_GenerarTramaPrueba39
  L_GenerarTramaPrueba40
  L_LeerDS18B2041
  L_LeerDS18B2043
  L_ProbarEnvioTrama45
  L_ProbarEnvioTrama46
  L_ProbarEnvioTrama47
  L_ProbarEnvioTrama49
  L_ProbarMuestreo51
  L_ProbarMuestreo52
  L_CapturarMuestras53
  L_CapturarMuestras54
  L_ProcesarMuestras55
  L_ProcesarMuestras56
  L_ProcesarMuestras57
  L_ProcesarMuestras58
  L_ProcesarMuestras59
  L_ProcesarMuestras60
  L_ProcesarMuestras61
  L_ProcesarMuestras62
  L_ProcesarMuestras63
  L_ProcesarMuestras64
  L_ProcesarMuestras65
  L_ProcesarMuestras66
  L_ProcesarMuestras67
  L_ProcesarMuestras68
  L_ProcesarMuestras69
  L_ProcesarMuestras70
  L_CalcularTOF71
  L_CalcularTOF72
  L_CalcularTOF73
  L_EnviarTramaInt74
  L_EnviarTramaInt75
  L_EnviarTramaInt76
  L_Timer1Interrupt77
  L_Timer1Interrupt78
  L_Timer1Interrupt79
  L_Timer1Interrupt80
  L_Timer2Interrupt81
  L_Timer2Interrupt82
  L_Timer2Interrupt83
  L_UART1Interrupt84
  L_UART1Interrupt85
  L_UART1Interrupt86
  L_UART1Interrupt87
  L_UART1Interrupt88
  L_UART1Interrupt89
  L_UART1Interrupt90
  L_UART1Interrupt91
  L_UART1Interrupt92
  L_UART1Interrupt93
  L_UART1Interrupt94
  L_UART1Interrupt95
  L_UART1Interrupt96
  L_UART1Interrupt97
  L_UART1Interrupt98
  L_UART1Interrupt99
  L_UART1Interrupt100
  L_UART1Interrupt101
  L_UART1Interrupt102
  L__GenerarTramaPrueba104
  L__UART1Interrupt105
  L__UART1Interrupt106
  L__UART1Interrupt107
  L__UART1Interrupt108
  L__UART1Interrupt109
  L__UART1Interrupt110
  L__UART1Interrupt111
  L__UART1Interrupt112
  L__UART1Interrupt113
  L__UART1Interrupt114
  L__UART1Interrupt115
  L__UART1Interrupt116
  L__UART1Interrupt117
  L_end_EnviarTramaRS485
  _EnviarTramaRS485
  L__EnviarTramaRS485119
  L__EnviarTramaRS485120
  L__EnviarTramaRS485121
  L_end_main
  _main
  L__main123
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_ProcesarSolicitud
  _ProcesarSolicitud
  L__ProcesarSolicitud127
  L__ProcesarSolicitud128
  L__ProcesarSolicitud129
  L__ProcesarSolicitud130
  L__ProcesarSolicitud131
  L__ProcesarSolicitud132
  L__ProcesarSolicitud133
  L__ProcesarSolicitud134
  L__ProcesarSolicitud135
  L__ProcesarSolicitud136
  L__ProcesarSolicitud137
  L__ProcesarSolicitud138
  L__ProcesarSolicitud139
  L_end_GenerarTramaPrueba
  _GenerarTramaPrueba
  L__GenerarTramaPrueba141
  L__GenerarTramaPrueba142
  L_end_LeerDS18B20
  _LeerDS18B20
  L_end_ProbarEnvioTrama
  _ProbarEnvioTrama
  L__ProbarEnvioTrama145
  L_end_ProbarMuestreo
  _ProbarMuestreo
  L__ProbarMuestreo147
  L_end_CapturarMuestras
  _CapturarMuestras
  L__CapturarMuestras149
  L_end_ProcesarMuestras
  _ProcesarMuestras
  L__ProcesarMuestras151
  L__ProcesarMuestras152
  L__ProcesarMuestras153
  L__ProcesarMuestras154
  L__ProcesarMuestras155
  L__ProcesarMuestras156
  L__ProcesarMuestras157
  L__ProcesarMuestras158
  L_end_CalcularTOF
  _CalcularTOF
  L__CalcularTOF160
  L__CalcularTOF161
  L__CalcularTOF162
  L_end_EnviarTramaInt
  _EnviarTramaInt
  L__EnviarTramaInt164
  L_end_Timer1Interrupt
  _Timer1Interrupt
  L__Timer1Interrupt166
  L_end_Timer2Interrupt
  _Timer2Interrupt
  L__Timer2Interrupt168
  L__Timer2Interrupt169
  L_end_UART1Interrupt
  _UART1Interrupt
  L__UART1Interrupt171
  L__UART1Interrupt172
  L__UART1Interrupt173
  L__UART1Interrupt174
  L__UART1Interrupt175
  L__UART1Interrupt176
  L__UART1Interrupt177
  L__UART1Interrupt178
  L__UART1Interrupt179
  L__UART1Interrupt180
  L__UART1Interrupt181
  L__UART1Interrupt182
  L__UART1Interrupt183
